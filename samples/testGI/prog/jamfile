#Platform ?= macOS ;
PlatformArch_windows ?= x86_64 ;
PlatformSpec_windows ?= clang ;

Root    ?= ../../.. ;
Location = samples/testGI/prog ;

UseD3DMulti ?= yes ;

include $(Root)/prog/_jBuild/defaults.jam ;

TargetType  = exe ;
Target      = samples/testGI-$(LegacyPlatformSuffix) ;

if $(UseWholeOpt) != yes {
  UseLLDLink ?= yes ;
}

if $(Platform)-$(PlatformArch) in windows-x86_64 linux-x86_64 || $(Platform) in ps5 {
  BVHSupport = yes ;
  BVHRi = no ;
  BVHRandomGrass = no ;
  BVHGpuObjects = no ;
  BVHDynRend = no ;
  BVHFx = no ;
  BVHCables = no ;
}

OutDir = $(Root)/$(Location)/../game ;

AddIncludes =
  $(Root)/prog/samples/commonFramework
  $(Root)/prog/gameLibs/publicInclude 
;

Sources =
#  perlinNoise.cpp
  test_app.cpp
  test_main.cpp
;

UseProgLibs =
  engine/osApiWrappers
  engine/kernel
  engine/memory
  engine/ioSys
  engine/startup
  engine/baseUtil
  engine/coreUtil
  engine/math
  engine/lib3d
  engine/image
  engine/shaders
  engine/workCycle
  engine/guiBase
  engine/scene
  engine/sceneRay

  engine/gameRes
  engine/perfMon
  engine/streaming

  samples/commonFramework


  gameLibs/render/lruCollision
  gameLibs/webui
  gameLibs/daSkies2
  gameLibs/render
  gameLibs/visualConsole
  gameLibs/fftWater
  gameLibs/heightmap
  engine/consoleProc
  gameLibs/daEditorE
  gameLibs/daGI2
  gameLibs/render/voxelizationTarget
  gameLibs/daGI
  gameLibs/bvh
  gameLibs/render/rtsm
  gameLibs/render/denoiser
  gameLibs/render/upscale
  gameLibs/profileEventsGUI
;

#UseRootLibs = xblades2/prog/anim ;

if $(Platform) in windows {
  UseProgLibs +=
    engine/drv/hid_mouse
    engine/drv/hid_keyboard
    engine/drv/hid_nulldrv
  ;
  UseProgLibs += engine/drv/drv3d_pc_multi ;
  AddLibs +=
    Ws2_32.lib ;

  include $(Root)/prog/engine/drv/drv3d_DX12/copy_bundles.jam ;

} else if $(Platform) = linux {
  BundleName = SkiesSample ;
  UseProgLibs +=
    engine/drv/drv3d_pc_multi
    engine/drv/hid_mouse
    engine/drv/hid_keyboard
    engine/drv/hid_nulldrv
    engine/osApiWrappers/messageBox
  ;

} else if $(Platform) = macOS {
  BundleName = testGI ;
  Sources += macosx_main.mm ;
  UseProgLibs +=
    engine/drv/hid_mouse
    engine/drv/hid_keyboard
    engine/drv/hid_nulldrv
  ;

  include $(Root)/prog/samples/macOS-testApp-res/macOS-common.jam ;

} else if $(Platform) in ps4 {
  UseProgLibs +=
    engine/drv/hid_sony
    engine/drv/drv3d_ps4
  ;
} else if $(Platform) = ps5 {
  UseProgLibs +=
    engine/drv/hid_sony
    engine/drv/drv3d_ps5
  ;
} else if $(Platform) in xboxOne scarlett {
  UseProgLibs += engine/drv/drv3d_DX12 ;
  UseProgLibs += engine/drv/hid_gamepad_xinput engine/drv/hid_keyboard engine/drv/hid_nulldrv ;

  OutDir = $(OutDir)/../game/$(Platform).loose ;

  XboxTitleName = testGI ;
  XboxTitlePublisher = "CN=Anton Yudintsev, OU=Gaijin Distribution Kft, O=Gaijin Entertainment Holdings, L=Budapest, S=Budapest, C=HU" ;
  XboxTitleDisplayName = "testGI" ;
  XboxTitlePublisherDisplayName = "Gaijin Distribution Kft" ;
  XboxTitleDesc = "Test bed for GI" ;
} else if $(Platform) = android {
  UseProgLibs +=
    engine/drv/drv3d_vulkan
    engine/drv/hid_android
    engine/drv/hid_nulldrv
    gameLibs/statsd
    gameLibs/folders
  ;

  AndroidAppID = com.gaijinent.testApp.testGI ;
  AndroidIcon = ../../../prog/samples/Android-testApp-res/icon.png ;
  AndroidAppIconName = Test Gl ;
  AndroidCopyToDevice = default ;

} else {
  Exit unsupported Platform\=$(Platform) for Target\=$(Target) ;
}

if $(Platform) in windows && $(Config) != rel && $(Sanitize) != address { UseMemoryDebugLevel = dbg ; }
 
include $(Root)/prog/_jBuild/build.jam ;
