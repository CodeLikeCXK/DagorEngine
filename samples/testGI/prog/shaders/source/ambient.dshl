include "sky_shader_global.dshl"
include "pbr.dshl"
include "gbuffer.dshl"
include "monteCarlo.dshl"
include "roughToMip.dshl"
//include "skyLight.dshl"
include "ssao_use.dshl"
include "tile_lighting.dshl"
include "punctualLights.dshl"
include "normaldetail.dshl"
include "viewVecVS.dshl"
include "invGlobTm.dshl"
include "clouds_vars.dshl"
include "sq_clouds_shadow.dshl"
include "static_shadow.dshl"
include "use_prefiltered_gf.dshl"

//include "world_sdf.dshl"
include "volumetric_gi_common.dshl"
include "screenspace_probes_common.dshl"
include "dagi_sky_vis_common.dshl"
include "dagi_irrad_grid_sample.dshl"
include "dagi_rad_grid_common.dshl"
include "dagi_quality.dshl"
include "reproject_gi.dshl"

int gi_debug_froxels;
interval gi_debug_froxels: off<1, on;

shader render_ambient
{
  no_ablend;

  cull_mode  = none;

  z_test = false;
  z_write = false;

  channel float2 pos = pos;
  (vs) {
    screen_size@f4 = (1./screen_pos_to_texcoord.x, 1./screen_pos_to_texcoord.y,0,0);
    world_view_pos@f3 = world_view_pos;
  }
  INIT_HDR(ps)
  USE_HDR(ps)
  INIT_PREV_PRE_EXPOSURE(ps)
  USE_PREV_PRE_EXPOSURE(ps)
  USE_POSTFX_VERTEX_POSITIONS()
  USE_AND_INIT_VIEW_VEC_VS()
  INIT_ZNZFAR()
  USE_DECODE_DEPTH()
  INIT_READ_DEPTH_GBUFFER()
  USE_READ_DEPTH_GBUFFER()

  INIT_SKY_DIFFUSE()
  USE_SKY_DIFFUSE()
  INIT_LOCAL_SPECULAR()
  //INIT_ENVI_SPECULAR()

  (ps) {
    world_view_pos@f3 = world_view_pos;
  }

  INIT_READ_GBUFFER()
  USE_READ_GBUFFER_NORMAL()
  USE_ROUGH_TO_MIP()
  //SAMPLE_IRRADIANCE_GRID(ps)
  //SAMPLE_RADIANCE_GRID(ps)

  if (gi_quality != screen_probes)
  {
    DAGI_NO_SCREEN_ENCODING(ps)
  }

  if (gi_quality != off)
  {
    if (gi_quality == only_ao)
    {
      hlsl {
        #define DAGI_IRRADIANCE_GRID_TYPE DAGI_IRRADIANCE_GRID_TYPE_SKYVIS
      }
      DAGI_SKY_VIS_SAMPLE(ps)
      //DAGI_IRRADIANCE_GRID_SAMPLE(ps)
    } else if (gi_quality == colored)
    {
      hlsl {
        #define DAGI_IRRADIANCE_GRID_TYPE DAGI_IRRADIANCE_GRID_TYPE_IRRADIANCE
      }
      DAGI_IRRADIANCE_GRID_SAMPLE(ps)
      DAGI_RAD_GRID_SAMPLE(ps)
    } else
    {
      SAMPLE_IRRADIANCE_SPECULAR_SP(ps)
      REPROJECT_GI(ps)
    }

    if (gi_quality != only_ao)
    {
      GI_VOLUMETRIC_IRRADIANCE_INIT(ps)
      GI_VOLUMETRIC_IRRADIANCE_USE(ps)
    }


    hlsl(ps) {
      #define AMBIENT 1
      #define NEED_SAMPLE_DEPTH 1
      #include <interleavedGradientNoise.hlsl>
    }
  }

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 viewVect : TEXCOORD0;
      float2 texcoord : TEXCOORD1;
    };
  }

  hlsl(vs) {
    VsOutput shadows_to_target_vs(uint vertexId : SV_VertexID)
    {
      VsOutput output;
      float2 pos = getPostfxVertexPositionById(vertexId);
      output.pos = float4( pos.xy, 1, 1 );
      output.texcoord = screen_to_texcoords(pos);
      output.viewVect = get_view_vec_by_vertex_id(vertexId);

      return output;
    }
  }


  hlsl(ps){
    #include <specular_brdf.hlsl>
    #include <diffuse_brdf.hlsl>
    #include <ssr_common_use.hlsl>
    #ifndef GI_ENCODED_TYPE
    #define GI_ENCODED_TYPE half3
    #endif
    struct Output
    {
      GI_ENCODED_TYPE ambient  : SV_Target0;
      GI_ENCODED_TYPE specular : SV_Target1;
      ##if (gi_quality == screen_probes)
      uint age : SV_Target2;
      ##endif
    };
    Output shadows_to_target_ps(VsOutput input HW_USE_SCREEN_POS)
    {
      Output output;
      float4 screenpos = GET_SCREEN_POS(input.pos);

      float rawDepth = readGbufferDepth(input.texcoord.xy);
      float w = linearize_z(rawDepth, zn_zfar.zw);
      float3 normal;
      half smoothness;
      readPackedGbufferNormalSmoothness(input.texcoord.xy, normal, smoothness);
      half linearRoughness = 1-smoothness;
      float ggx_alpha = max(1e-4, linearRoughness*linearRoughness);

      float3 pointToEye = -input.viewVect * w;
      float dist = length(pointToEye);
      float3 view = normalize(pointToEye);
      float NdotV = dot(normal, view);
      float3 worldPos = world_view_pos.xyz - pointToEye;

      float3 specularDir;
      {
        float3 reflectionVec = 2 * NdotV * normal - view;
        float NoV = abs( NdotV ) + 1e-5;
        float alpha = pow2(linearRoughness);
        float3 lightProbeReflectionVec = reflectionVec;
        specularDir = getRoughReflectionVec(lightProbeReflectionVec.xyz, normal, alpha);
      }

      float3 enviLightingNormal = normalize(getDiffuseDominantDir(normal, view, saturate(NdotV), ggx_alpha));
      half3 enviLight = GetSkySHDiffuse(enviLightingNormal);
      half3 ambient = enviLight;
      half3 specular = texCUBElod(envi_probe_specular, float4(specularDir, ComputeReflectionCaptureMipFromRoughness(linearRoughness))).rgb;
      half3 giSpecular = specular;

      ##if (gi_quality != off)
        ##if gi_debug_froxels == on && gi_quality != only_ao
          ambient = volumetric_gi_calc_diffuse_uvw(input.texcoord.xy, 0.97*w, enviLightingNormal);
          #define HAS_SPECULAR 0
          #define HACK_SPECULAR_BRIGHTNESS 1
        ##elif (gi_quality == screen_probes)
        {
          sample_bilinear_specular_irradiance_with_normal_campos(specularDir, enviLightingNormal, w, -pointToEye, normal, screenpos.xy, giSpecular, ambient);
          #define HAS_SPECULAR 1
          #define HACK_SPECULAR_BRIGHTNESS 0
        }
        ##elif (gi_quality == colored)
          float ofs = max(dist*0.04, 0.25*dagi_irrad_grid_probe_size(0));
          worldPos += view*ofs;
            //float3 filteredWorldPos = worldPos + normalize(lerp(normal, normalize(pointToEye), 0.8))*useProbeSize;
          dagi_irrad_grid_diffuse_biased_smooth(world_view_pos, worldPos, enviLightingNormal, view, max(0, dist-ofs), normal, interleavedGradientNoise( screenpos.xy ), ambient);
          //ambient = volumetric_gi_calc_diffuse_uvw(input.texcoord.xy, 0.95*w, enviLightingNormal);
          bool HAS_SPECULAR = 0;
          uint radGridCascade = dagi_rad_grid_get_best_enclosing_clip_border(worldPos, 0, 1);
          if (radGridCascade < DAGI_MAX_RAD_GRID_CLIPS)
          {
            float probeSize = dagi_rad_grid_probe_size(radGridCascade);
            float ofs = 0.5*sqrt(3)*probeSize;
            float vOfs = min(dist, ofs);
            float3 filtWorldPos = worldPos.xyz + ofs*normal + view*vOfs;
            giSpecular = dagi_trilinear_sample_radiance_grid_cascade_unsafe(radGridCascade, specularDir, filtWorldPos);
            HAS_SPECULAR = 1;
          }
          #define HACK_SPECULAR_BRIGHTNESS 1
        ##elif (gi_quality == only_ao)
          float ofs = max(dist*0.04, 0.25*dagi_sky_vis_probe_size(0));
          worldPos += view*ofs;
          float4 sh1 = dagi_get_sky_visibility_smooth_sh1(world_view_pos.xyz, worldPos, view, max(0, dist-ofs), normal, interleavedGradientNoise( screenpos.xy ) );
          if (all(sh1 != 1))
            ambient = GetSHFunctionValueSimple(enviLightingNormal, enviSPH0*sh1.wyzx, enviSPH1*sh1.wyzx, enviSPH2*sh1.wyzx);
          #define HAS_SPECULAR 0
          #define HACK_SPECULAR_BRIGHTNESS 1
        ##endif
        if (HAS_SPECULAR)
        {
          BRANCH
          if (smoothness > 0.5)
          {
            half3 blurredSpecular = texCUBElod(envi_probe_specular, float4(specularDir, 5)).rgb;
            blurredSpecular = max(0, blurredSpecular);
            float enviBlurredLuma = luminance(blurredSpecular), giSpecularLuma = luminance(giSpecular);
            half3 adjustment = lerp(1, min(4, (1e-3 + giSpecular)/(1e-3 + blurredSpecular)), (saturate(0.25*max(giSpecularLuma, enviBlurredLuma)/(1e-3 + min(giSpecularLuma, enviBlurredLuma)) - 0.25)));

            specular = lerp(giSpecular, specular*adjustment, smoothness*2 - 1);
            //specular = blurredSpecular;
          } else
            specular = giSpecular;
        }
        #if HACK_SPECULAR_BRIGHTNESS
           //fixme: add support specular from radiance grid
            half3 environmentAmbientReflection = specular;
            //https://www.activision.com/cdn/research/Volumetric_Global_Illumination_at_Treyarch.pdf
            //another (much faster) fake from Volumetric Global Illumination at Treyarch
            float mipForTrick =  linearRoughness*NUM_PROBE_MIPS;
            float maximumSpecValue = max3( 1.26816, 9.13681 * exp2( 6.85741 - 2 * mipForTrick ) * NdotV, 9.70809 * exp2( 7.085 - mipForTrick - 0.403181 * pow2(mipForTrick)) * NdotV );
            maximumSpecValue = min(maximumSpecValue, 32);//to be removed with envi light probes in rooms
            float3 adjustedMaxSpec = ambient * maximumSpecValue;
            float3 reflection = environmentAmbientReflection * (adjustedMaxSpec / ( adjustedMaxSpec + environmentAmbientReflection + 0.001));//avoid nans
            specular = reflection;
        #endif
      ##endif


      ##if (gi_quality == screen_probes)
      uint age;
      reproject_ambient(lerp(0.25, 0.1, linearRoughness), 0.1, input.texcoord.xy, rawDepth, w, ambient, specular, age);
      output.age = age;
      ##endif

      encode_gi_colors(output.ambient, output.specular, ambient, specular);
      return output;
    }
  }

  compile("target_vs", "shadows_to_target_vs");
  compile("target_ps", "shadows_to_target_ps");
}
