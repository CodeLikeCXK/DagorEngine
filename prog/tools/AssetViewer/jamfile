Root    ?= ../../.. ;
Location = prog/tools/AssetViewer ;
KernelLinkage = dynamic ;
BuildingTools = yes ;
PhysName = Jolt ;
include $(Root)/prog/tools/tools_setup.jam ;

UseD3DMulti = yes ;
UseD3DMultiList_windows = DX11 stub ;
UseD3DMultiList_linux   = vulkan stub ;

if $(Platform) = windows {
  PlatformSpec = vc17 ;
}

Exceptions = yes ;
CheckedContainers = no ;
UseMemoryDebugLevel = def ;
UseLLDLink = no ;
HaveOverlayUI = no ;
HaveDngInput = no ;
HaveEditor = no ;
HaveConsole = no ;
HaveSound = no ;
HaveSoundNet = no ;
include $(Root)/prog/daNetGame/setup.jam ;

UseQuirrel = sq3r+ ;

VRDeviceSupport = yes ;
VRDeviceOptional = yes ;
ToolsHaveVR ?= yes ;

DagorAnim_MEASURE_PERF = 1 ;
DagorMath_MEASURE_PERF = 1 ;
DagorFastPhys_MEASURE_PERF = 1 ;
# approximately ~5 sec (at 200 fps)
DagorAnim_MEASURE_PERF_FRAMES = 1000 ;
DagorMath_MEASURE_PERF_FRAMES = 1000 ;
DagorFastPhys_MEASURE_PERF_FRAMES = 1000 ;

DafxGravityZone ?= yes ;

TargetType  = exe ;
Target      = tools/assetViewer2.exe ;
include $(Root)/prog/tools/tools_setup_outdir_bin.jam ;

include $(Root)/prog/_jBuild/defaults.jam ;

if $(Platform)-$(PlatformArch) = windows-arm64 { VRDeviceSupport = no ; }

AddIncludes +=
  $(Root)/prog/tools/sharedInclude
  $(Root)/prog/tools/sceneTools/daEditorX/include
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/tools/sceneTools/impostorBaker
  $(Root)/prog/tools/sceneTools/pointCloudGen/generator
  $(Root)/prog/gameLibs/rendInst
;

Sources =
  main.cpp

  console.cpp
  av_version.cpp
  av_appwnd.cpp
  av_engine.cpp
  av_mainAssetSelector.cpp
  av_tree.cpp
  av_srvEngine.cpp
  av_dagored2stub.cpp
  av_environment.cpp
  av_plugins.cpp
  av_viewportWindow.cpp

  assetBuildCache.cpp

  av_util.cpp
  av_script_panel.cpp
  av_ecsPull.cpp
  av_das_manager.cpp

  badRefFinder.cpp
  compositeAssetCreator.cpp
;

if $(Platform) = windows {
  Sources += assetViewerRes.rc ;
} else if $(Platform) = linux {
  dasStdDlg_UserProvidedPlatform = yes ;
  Sources += av_dasStdDlg_linux.cpp ;
}

UseProgLibs =
  engine/startup
  engine/math
  engine/coreUtil
  engine/workCycle
  engine/lib3d
  engine/shaders
  engine/scene
  engine/image
  engine/guiBase

  engine/drv/hid_mouse
  engine/drv/hid_keyboard
  engine/drv/drv3d_pc_multi

  engine/gameRes
  engine/libFx
  engine/sceneRay
  engine/perfMon
  engine/consoleProc
  engine/imgui

  engine/anim
  engine/animChar
  engine/phys/fastPhys

  tools/libTools/assetMgr
  tools/libTools/assetMgrHlp
  tools/libTools/assetsGui

  tools/libTools/util
  tools/libTools/renderUtil
  tools/libTools/shaderResBuilder
  tools/libTools/EditorCore
  tools/libTools/EditorCore/IEditorCore
  tools/libTools/fastPhysData
  tools/libTools/ObjectEditor
  tools/libTools/renderViewports
  tools/libTools/staticGeom
  tools/libTools/sceneBuilder
  tools/libTools/scriptHelpers
  tools/libTools/dtx
  tools/libTools/ObjCreator3d
  tools/libTools/winGuiWrapper
  tools/libTools/staticGeomUi
  tools/libTools/scriptPanelWrapper
  tools/libTools/math
  tools/libTools/grsCurView

  tools/sceneTools/daEditorX/services/dngBasedRenderSrv
  tools/sceneTools/daEditorX/services/dynRenderSrv
  tools/sceneTools/daEditorX/services/wind
  tools/sceneTools/daEditorX/services/riMgr
  tools/sceneTools/daEditorX/services/prefabMgr
  tools/sceneTools/daEditorX/services/fxMgr
  tools/sceneTools/daEditorX/services/efxMgr
  tools/sceneTools/daEditorX/services/physobjMgr
  tools/sceneTools/daEditorX/services/gameobjMgr
  tools/sceneTools/daEditorX/services/compositMgr
  tools/sceneTools/daEditorX/services/invalidEntityMgr
  tools/sceneTools/daEditorX/services/bitMaskMgr
  tools/sceneTools/daEditorX/services/dynModelMgr
  tools/sceneTools/daEditorX/services/animCharMgr
  tools/sceneTools/daEditorX/services/assetSrv
  tools/sceneTools/daEditorX/services/lightSrv
  tools/sceneTools/daEditorX/services/dynModelMgr
  tools/sceneTools/daEditorX/services/physobjMgr
  tools/sceneTools/daEditorX/services/pixelPerfectSelection
  tools/sceneTools/daEditorX/services/skiesSrv
  tools/sceneTools/daEditorX/services/colorRangeSrv
  tools/sceneTools/daEditorX/services/csgEntMgr
  tools/sceneTools/daEditorX/services/cableSrv
  tools/sceneTools/daEditorX/services/splineGenSrv
  tools/sceneTools/daEditorX/services/ecsMgr
  tools/sceneTools/daEditorX/services/webui
  tools/sceneTools/daEditorX/services/ecsInput
  tools/sceneTools/daEditorX/services/visibilityFinderSrv

  tools/sceneTools/impostorBaker/impostorUtil

  tools/sceneTools/pointCloudGen/generator

  tools/libTools/propPanel
  tools/libTools/dagFileRW

  engine/phys/physCommon
  engine/phys/physBullet
  engine/phys/physJolt
  gameLibs/vehiclePhys/vehiclePhys-JOLT
  gameLibs/vehiclePhys/vehiclePhys-BULLET
  gameLibs/consoleWindow
  gameLibs/resourcePool
  gameLibs/render
  gameLibs/landMesh
  gameLibs/textureUtil
  gameLibs/render/dof
  gameLibs/render/wind
  gameLibs/render/volumetricLights/stub
  gameLibs/ecs/rendInst/stub
  gameLibs/ecs/delayedAct

  gameLibs/quirrel/bindQuirrelEx
  commonFx/commonFxGame
  commonFx/commonFxTools

  tools/AssetViewer/Textures
  tools/AssetViewer/Nodes
  tools/AssetViewer/Prefabs
  tools/AssetViewer/LandClass
  tools/AssetViewer/Materials
  tools/AssetViewer/Splines
  tools/AssetViewer/collision
  tools/AssetViewer/Entity
  tools/AssetViewer/Grass
  tools/AssetViewer/TifMask
  tools/AssetViewer/physObj
  tools/AssetViewer/fxEdit
  tools/AssetViewer/FastPhys
  tools/AssetViewer/Custom
  tools/AssetViewer/RandomGrass
  tools/AssetViewer/csgEntity
  tools/AssetViewer/A2d
  tools/AssetViewer/animTree
  tools/AssetViewer/dasModules
  tools/AssetViewer/ecsTemplate

  3rdPartyLibs/image/libpng-1.4.22
  3rdPartyLibs/arc/zlib-$(UseZlibVer)
  3rdPartyLibs/image/psdRead
  3rdPartyLibs/hash

  daNetGame
  1stPartyLibs/daScript/modules/dasStdDlg
;

if $(Platform) = windows {
  UseProgLibs +=
    engine/drv/hid_dinput
    engine/drv/hid_gamepad_xinput
    engine/drv/hid_joystick
  ;
}
else if $(Platform) = linux {
  UseProgLibs +=
    engine/drv/hid_joystick_linux
  ;
}
else {
  Exit unsupported Platform\=$(Platform) for Target\=$(Target) ;
}

gamePulls =
  daECS/core/componentType.h # first line is used for include!
  game_pulls                 #second line is name of var
;

if $(VRDeviceSupport) = yes && $(Platform) = windows {
  BundleCopy +=
    @$(OpenXrSdkPath)/$(LegacyPlatformSuffix)/bin/openxr_loader.dll openxr_loader.dll
    @$(OpenXrSdkPath)/$(LegacyPlatformSuffix)/bin/openxr_loader.pdb openxr_loader.pdb
  ;
}

if [ GLOB $(Root)/skyquake/prog/tools : * ] { # FIXME_BROKEN_DEP
  UseRootLibs =
    skyquake/prog/tools/wtUnit_av2 # FIXME_BROKEN_DEP
  ;
  CPPopt += -DHAS_PLUGIN_WT_UNIT ;
}
if [ GLOB $(Root)/prog/gameLibs/ecs/phys : * ] {
  opt on av_das_manager.cpp = -DHAS_PHYS ;
}

gamePulls +=
  actInThread_pull
;

include $(Root)/$(Location)/_dng_libs.jam ;

gamePulls_action = make_module_pull_cpp ;
Sources += gamePulls.jamvar ;

ImportProgLibs = tools/libTools/daKernel ;

if $(Platform) = windows && ! $(DagoredRel) {
  LINKopt = -opt:noref ;
}
else if $(Platform) = linux {
  LINKopt += -L$(Root)/tools/dagor_cdk/$(Platform)-$(PlatformArch) ; # to be able to find daKernel-dev.so
}

Game = asset_viewer_dng ;
GameMainVromFilePath = * ;
GameMainVromMountDir = * ;
include $(Root)/prog/daNetGame/game.jam ;
gameMain =
  void set_window_title(const char *){}
  void set_fps_limit(int){}
  int get_fps_limit(){return 0;}
  void set_corrected_fps_limit(int){}
  void exit_game(const char *){}
  void (*get_memcollect_cur_thread_cb())(){ return nullptr;}
  void update_float_exceptions(){}
;
gameVersion =
  unsigned get_exe_version32(){return 0;}
  char const *get_exe_version_str(){return \"0.0.0.0\";}
  int get_build_number(){ return -1;}
;
Sources += dng_pulls.cpp ;
opt on dng_pulls.cpp = -I$(Root)/prog/daNetGameLibs ;

include $(Root)/prog/_jBuild/build.jam ;
