Root    ?= ../../../.. ;
Location = prog/tools/sceneTools/daEditorX ;
KernelLinkage ?= dynamic ;
BuildingTools = yes ;
include $(Root)/prog/tools/tools_setup.jam ;

UseD3DMulti = yes ;

switch $(Platform) {
  case windows : UseD3DMultiList = DX9 DX11 stub ;
  case linux :   UseD3DMultiList = vulkan stub ;
}

TargetType  = exe ;
Target = tools/sceneTools/daEditorX/daEditor3x.exe ;
include $(Root)/prog/tools/tools_setup_outdir_bin.jam ;

include $(Root)/prog/_jBuild/defaults.jam ;


AddIncludes =
  $(Root)/prog/tools/sceneTools/daEditorX/include
  $(Root)/prog/tools/sharedInclude
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/gameLibs/publicInclude
  $(Root)/prog/1stPartyLibs/jsoncpp/include
;

Sources =
  dagorEd.cpp
  srvEngine.cpp

  de_apphandler.cpp
  de_appwnd.cpp
  de_appwndConCmd.cpp
  de_collision.cpp
  de_engine.cpp
  de_exportlevel.cpp
  de_ExportToDagDlg.cpp
  de_version.cpp
  dagored_main.cpp
  plugin_dlg.cpp
  de_startdlg.cpp
  de_workspace.cpp
  de_ProjectSettings.cpp
  de_screenshotMetaInfoLoader.cpp
  de_viewportWindow.cpp
  de_batch.cpp
  de_environment.cpp
  de_ecsPull.cpp
  car_camera_elem.cpp

  pluginService/de_IDagorPhysImpl.cpp
;

if $(Platform) = windows {
  Sources +=
    de_aboutdlg.cpp
    splashScreen.cpp

    _res/de.rc
  ;
}

UseProgLibs =
  engine/memory/rtlOverride
  engine/startup
  engine/math
  engine/lib3d
  engine/shaders
  engine/guiBase
  engine/osApiWrappers/messageBox # Add this early to prevent using the stub version.
  engine/workCycle

  engine/drv/drv3d_pc_multi
  engine/drv/hid_mouse
  engine/drv/hid_keyboard

  engine/anim
  engine/animChar
  engine/gameRes

  engine/phys/fastPhys
  engine/libFx
  engine/image
  engine/coreUtil
  engine/scene
  engine/sceneRay

  engine/streaming

  tools/libTools/propPanel

  tools/libTools/util
  tools/libTools/renderViewports
  tools/libTools/renderUtil
  tools/libTools/shaderResBuilder
  tools/libTools/EditorCore
  tools/libTools/EditorCore/IEditorCore
  tools/libTools/ObjCreator3d
  tools/libTools/grsCurView

  engine/phys/physCommon
  engine/phys/physBullet

  engine/perfMon
  engine/consoleProc

  tools/libTools/dagFileRW
  tools/libTools/dtx
  tools/libTools/texConverter
  tools/libTools/staticGeom
  tools/libTools/staticGeomImp
  tools/libTools/sceneBuilder
  tools/libTools/unwrapMapping
  tools/libTools/coolConsole
  tools/libTools/delaunay

  tools/libTools/assetMgr
  tools/libTools/assetsGui
  tools/libTools/assetMgrHlp

  tools/libTools/winGuiWrapper

  tools/sceneTools/daEditorX/ecsEditor
  tools/sceneTools/daEditorX/Environment
  tools/sceneTools/daEditorX/Collision
  tools/sceneTools/daEditorX/Collision/bullet_write
  tools/sceneTools/daEditorX/ScnExport
  tools/sceneTools/daEditorX/ssView
  tools/sceneTools/daEditorX/binSceneView

  tools/sceneTools/daEditorX/services/dynRenderSrv
  tools/sceneTools/daEditorX/services/riMgr
  tools/sceneTools/daEditorX/services/pixelPerfectSelection
  tools/sceneTools/daEditorX/services/prefabMgr
  tools/sceneTools/daEditorX/services/fxMgr
  tools/sceneTools/daEditorX/services/efxMgr
  tools/sceneTools/daEditorX/services/physobjMgr
  tools/sceneTools/daEditorX/services/gameobjMgr
  tools/sceneTools/daEditorX/services/compositMgr
  tools/sceneTools/daEditorX/services/entFilters
  tools/sceneTools/daEditorX/services/bitMaskMgr
  tools/sceneTools/daEditorX/services/hmapSrv
  tools/sceneTools/daEditorX/services/assetSrv
  tools/sceneTools/daEditorX/services/builtSceneView
  tools/sceneTools/daEditorX/services/lightSrv
  tools/sceneTools/daEditorX/services/fileTracker
  tools/sceneTools/daEditorX/services/invalidEntityMgr
  tools/sceneTools/daEditorX/services/carCamera
  tools/sceneTools/daEditorX/services/animCharMgr
  tools/sceneTools/daEditorX/services/dynModelMgr
  tools/sceneTools/daEditorX/services/skiesSrv
  tools/sceneTools/daEditorX/services/colorRangeSrv
  tools/sceneTools/daEditorX/services/grassSrv
  tools/sceneTools/daEditorX/services/waterSrv
  tools/sceneTools/daEditorX/services/csgEntMgr
  tools/sceneTools/daEditorX/services/waterProjFxSrv
  tools/sceneTools/daEditorX/services/cableSrv
  tools/sceneTools/daEditorX/services/splineGenSrv
  tools/sceneTools/daEditorX/services/ecsMgr
  tools/sceneTools/daEditorX/services/visibilityFinderSrv
  tools/sceneTools/daEditorX/services/webui
  tools/sceneTools/daEditorX/services/wind

  3rdPartyLibs/image/psdRead
  3rdPartyLibs/image/libpng-1.4.22
  3rdPartyLibs/arc/zlib-$(UseZlibVer)
  3rdPartyLibs/hash

  commonFx/commonFxGame
  gameLibs/consoleWindow
  gameLibs/resourcePool
  gameLibs/render
  gameLibs/rendInst
  gameLibs/rendInst/riFx/stub
  gameLibs/render/cables
  gameLibs/render/dof
  gameLibs/render/wind
  gameLibs/render/nodeBasedShader
  gameLibs/render/fx
  gameLibs/nodeBasedShaderManager/stub
  gameLibs/ecs/hierarchyTransform
  gameLibs/ecs/rendInst/stub
  gameLibs/daECS/scene
  gameLibs/daECS
  gameLibs/daFx
  gameLibs/eventLog

  gameLibs/vehiclePhys/vehiclePhys-BULLET
  gameLibs/landMesh
  gameLibs/textureUtil

  gameLibs/imguiInput
  gameLibs/physMap
;

if $(Platform) = windows {
  UseProgLibs +=
    engine/drv/hid_dinput
    engine/drv/hid_gamepad_xinput
    engine/drv/hid_joystick
  ;
}
else if $(Platform) = linux {
  UseProgLibs +=
    engine/drv/hid_joystick_linux
  ;
}
else {
  Exit unsupported Platform\=$(Platform) for Target\=$(Target) ;
}

gamePulls =
  daECS/core/componentType.h # first line is used for include!
  game_pulls                 # second line is name of var
;

gamePulls_action = make_module_pull_cpp ;
Sources += gamePulls.jamvar ;

ImportProgLibs = tools/libTools/daKernel ;

if $(KernelLinkage) != dynamic {
  local memory_lib = memory ;
  if $(PlatformSpec) = clang && $(Sanitize) = address { memory_lib = memory/rtlStdMemory ; }

  UseProgLibs =
    engine/osApiWrappers
    engine/kernel
    engine/$(memory_lib)
    engine/ioSys
    engine/baseUtil
    $(UseProgLibs)
    tools/libTools/ObjectEditor
    tools/libTools/util

    tools/sceneTools/daEditorX/HeightmapLand
    tools/sceneTools/daEditorX/IvyGen
    tools/sceneTools/daEditorX/Occluders
    tools/sceneTools/daEditorX/StaticGeom
    tools/sceneTools/daEditorX/csg
  ;

  if [ GLOB $(Root)/skyquake/prog/tools : * ] { # FIXME_BROKEN_DEP
    ProjectUseQuirrel = sq3r+ ;
    ProjectAllowsOodle = yes ;
    UseRootLibs =
      skyquake/prog/tools/daEditorX/missionEd2    # FIXME_BROKEN_DEP
      skyquake/prog/tools/daEditorX/locationScene # FIXME_BROKEN_DEP
    ;
    opt on dagorEd.cpp = -DHAS_PLUGINS_WT ;
  }

  ImportProgLibs = ;
  opt on dagored_main.cpp = -I $(Root)/prog/tools/libTools/daKernel ;
}

if $(Platform) = windows {
  AddLibs +=
    advapi32.lib
    htmlhelp.lib
    psapi.lib
  ;
}

if $(Platform) = windows && ! $(DagoredRel) {
  LINKopt = -opt:noref ;
} else if $(Platform) = linux {
  LINKopt += -L$(Root)/tools/dagor_cdk/$(Platform)-$(PlatformArch) ; # to be able to find daKernel-dev.so
}

SourceES = ;
AllSrcFolder_ES =
  ecsEditor
;

AutoscanBuildLists $(AllSrcFolder_ES)  : *ES.cpp.inl : SourceES ;
for s in $(SourceES) { GenESSourceFile $(s) ; }
SourceES = ;


include $(Root)/prog/_jBuild/build.jam ;
