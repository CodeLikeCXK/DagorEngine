PlatformArch_windows ?= x86_64 ;

Root    ?= ../../../.. ;
Location = prog/engine/drv/drv3d_DX12 ;
StrictCompile = yes ;

TargetType  = lib ;
Target      = engine/drv/drv3d_DX12.lib ;

include $(Root)/prog/_jBuild/defaults.jam ;

Sources =
  init_d3di.cpp
  dx12.cpp
  device.cpp
  device_queue.cpp
  swapchain.cpp
  format_store.cpp
  device_context.cpp
  synced_command_store.cpp
  shader.cpp
  texture.cpp
  pipeline.cpp
  pipeline_cache.cpp
  bindless.cpp
  resource_memory_heap.cpp
  resource_manager/heap_components.cpp
  resource_manager/buffer_components.cpp
  resource_manager/buffer_components_heap.cpp
  resource_manager/buffer_components_heap_state.cpp
  resource_manager/buffer_components_heap_suballocator.cpp
  resource_manager/rtx_components.cpp
  resource_manager/host_shared_components.cpp
  resource_update_buffer.cpp
  pipeline/blk_cache.cpp
  ray_trace_pipeline.cpp
;

CPPopt = -DINSIDE_DRIVER ;
# do not include stuff that depends on wrl, including wrl is a mess
CPPopt += -DD3DX12_NO_STATE_OBJECT_HELPERS ;

AddIncludes +=
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/engine/drv/drv3d_commonCode
  $(Root)/prog/engine/drv/drv3d_DX12
  $(Root)/prog/engine/shaders
  $(Root)/prog/dagorInclude
  $(Root)/prog/3rdPartyLibs/aftermath/2025.4.0.250729/include
  $(Root)/prog/3rdPartyLibs/imgui
;

if $(Platform) in windows xboxOne scarlett {
  CPPopt += -FId3d_config.h ;
  CPPopt += -DUSE_RESOURCE_HEAPS ;
}

if $(Config) != rel {
  Sources +=
    debug/debug_types.cpp
    debug/frame_command_logger.cpp
    resource_usage_debugger.cpp
  ;
}

if $(Platform) in windows {
  Sources +=
    platform_pc.cpp
    debug/gpu_capture.cpp
    debug/global_state.cpp
    debug/device_state_pc.cpp
    debug/gpu_postmortem_dagor_trace.cpp
    debug/gpu_postmortem_microsoft_dred.cpp
    debug/pipeline_resource_reporter.cpp
    shader_library.cpp
  ;

  if $(PlatformArch) = x86_64 {
    local AgsSdkDir = $(_DEVTOOL)/AGS.SDK.$(AgsSdkVer) ;
    if [ GLOB $(AgsSdkDir) : * ] && $(AgsEnabled) = yes {
      AddIncludes += $(AgsSdkDir)/include ;
      AddLibs += $(AgsSdkDir)/lib/amd_ags_x64.lib ;
      CPPopt += -DHAS_AMD_GPU_SERVICES ;
      Sources +=
        debug/amd_ags_init.cpp
        debug/gpu_postmortem_ags_trace.cpp
      ;
    }

    local 3rdPartyDir = $(Root)/prog/3rdPartyLibs ;
    if [ GLOB $(3rdPartyDir)/aftermath : * ] {
      CPPopt += -DHAS_GF_AFTERMATH ;
      Sources +=
        debug/gpu_postmortem_nvidia_aftermath.cpp
      ;
    }

    if [ GLOB $(3rdPartyDir)/nvapi : * ] {
      AddIncludes += $(3rdPartyDir)/nvapi ;
      CPPopt += -DHAS_NVAPI ;
    }

    if [ GLOB $(3rdPartyDir)/winpixeventruntime : * ] {
      AddIncludes += $(3rdPartyDir)/winpixeventruntime/Include ;
      AddLibs += $(3rdPartyDir)/winpixeventruntime/bin/x64/WinPixEventRuntime.lib ;
      AddLibs += delayimp.lib -delayload:WinPixEventRuntime.dll ;
      CPPopt += -DUSE_PIX ;
    }
  }
} else if $(Platform) in xboxOne scarlett {
  CPPopt += /wd4062 ; # enumerator 'XXX' in switch of enum 'YYY' is not handled
  AddLibs += PIXEvt.lib ;
  if $(Platform) = xboxOne {
    AddLibs += d3d12_x.lib xg_x.lib ;
  } else {
    Sources += shader_library.cpp ;
    AddLibs += d3d12_xs.lib xg_xs.lib ;
  }
  Sources +=
    platform_xbox.cpp
  ;
}

if $(XessEnabled) = yes && $(Platform)-$(PlatformArch) = windows-x86_64 && [ GLOB $(Root)/prog/3rdPartyLibs/xess_sdk : * ] {
  Target = $(Target:B) ~xess ;
  Target = $(Target:J="") ;
  Target = $(Target:S=.lib) ;
  Sources += xess_wrapper.cpp ;
} else {
  Sources += xess_wrapper_stub.cpp ;
}

if $(Fsr2Enabled) = yes && $(Platform)-$(PlatformArch) = windows-x86_64 {
  Target = $(Target:B)~fsr2.lib ;
  Sources += fsr2_wrapper.cpp ;
  UseProgLibs += 3rdPartyLibs/fsr2 ;
} else {
  Sources += fsr2_wrapper_stub.cpp ;
}

if $(Platform)-$(PlatformArch) = windows-x86_64 {
  Sources += amdFsrD3D12_windows.cpp ;
  AddIncludes +=
    $(Root)/prog/3rdPartyLibs/FidelityFX
    $(Root)/prog/3rdPartyLibs/FidelityFX/api/include
    $(Root)/prog/3rdPartyLibs/FidelityFX/framegeneration/include
    $(Root)/prog/3rdPartyLibs/FidelityFX/upscalers/include
  ;
}
else if $(Platform) in xboxOne scarlett {
  Sources += amdFsrD3D12_xbox.cpp ;
  AddIncludes += $(Root)/prog/3rdPartyLibs/fsr3.1.3_xbox/include ;
}

if $(Platform) in windows {
  local AgilitySdkDir = $(_DEVTOOL)/Agility.SDK.$(AgilitySdkVer) ;

  if ! [ GLOB $(AgilitySdkDir) : * ] { exit FATAL\: \"$(AgilitySdkDir)\" not found!  Please, update DEVTOOLS ; }

  pre_opt on $(Sources) = -I$(AgilitySdkDir)/include ;

  AddIncludes += $(AgilitySdkDir)/include/d3dx12 ;
}

# for GPU crash dump sending
if $(Platform) in windows {
  UseProgLibs +=
    1stPartyLibs/jsoncpp ;

  AddIncludes += $(Root)/prog/1stPartyLibs/jsoncpp/include ;
}

UseProgLibs +=
  engine/drv/drv3d_commonCode
  engine/shaders
;

include $(Root)/prog/_jBuild/build.jam ;
