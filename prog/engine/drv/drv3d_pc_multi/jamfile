Root    ?= ../../../.. ;
Location = prog/engine/drv/drv3d_pc_multi ;
StrictCompile = yes ;

UseD3DMulti ?= yes ;
if $(UseD3DMulti) != yes { Exit ERROR: UseD3DMulti must be defined as 'yes' or not defined at all to use $(Location) ; }

include $(Root)/prog/_jBuild/defaults.jam ;
if $(UseD3DMultiSingle) {
  StrictCompile = ;
  include $(Root)/$(Location:D)/drv3d_$(UseD3DMultiSingle)/jamfile ;
  return ;
}

TargetType  = lib ;
Target      = engine/drv/drv3d_pc_multi.lib ;

if $(UseD3DMultiList) != [ ValidateUseD3DMultiList stub DX11 DX12 vulkan Metal ] {
  Target = $(Target:S=~$(UseD3DMultiList:J=~).lib) ;
}

Sources =
  init.cpp
;

AddIncludes =
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/engine/drv/drv3d_commonCode
  $(Root)/prog/3rdPartyLibs/nvapi
;

CPPopt = -DINSIDE_DRIVER -DUSE_MULTI_D3D_$(UseD3DMultiList) ;

UseProgLibs =
  engine/drv/drv3d_commonCode
  engine/drv/drv3d_$(UseD3DMultiList)
;

if $(Platform) in windows {
  if DX11 in $(UseD3DMultiList) || DX12 in $(UseD3DMultiList) { Sources += hlsl_dx.cpp ; }
  else { Sources += hlsl_stub.cpp ; }
}

if $(Platform) = linux && ( vulkan in $(UseD3DMultiList) ) {
  CPPopt += -DUSE_X11 ;
  Sources += x11.cpp ;
}

include $(Root)/prog/_jBuild/build.jam ;
