if $(UseD3DMulti) = no { Exit UseD3DMulti must be defined as 'yes' or not defined at all ; }
Root    ?= ../../../.. ;
Location = prog/engine/drv/drv3d_pc_multi ;
StrictCompile = yes ;

rule ValidateUseD3DMultiList
{
  local valid_windows = stub DX11 DX12 vulkan ;
  local valid_macOS   = stub Metal ;
  local valid_linux   = stub vulkan ;
  local valid_nswitch = stub vulkan ;

  local ret_list = ;
  for v in $(valid_$(Platform)) { if $(v) in $(1) { ret_list += $(v) ; } }
  if ! $(ret_list) { Exit UseD3DMultiList\=\[ $(1) \] became empty for Platform\=$(Platform) ; }
  return $(ret_list) ;
}

UseD3DMulti = yes ;

include $(Root)/prog/_jBuild/defaults.jam ;

TargetType  = lib ;
Target      = engine/drv/drv3d_pc_multi.lib ;

UseD3DMultiList ?= D3D_ALL ;
if $(UseD3DMultiList) = D3D_ALL {
  UseD3DMultiList = [ ValidateUseD3DMultiList stub DX11 DX12 vulkan Metal ] ;
} else {
  UseD3DMultiList = [ ValidateUseD3DMultiList $(UseD3DMultiList) ] ;
  Target = $(Target:S=~$(UseD3DMultiList:J=~).lib) ;
}

Sources =
  init.cpp
;

AddIncludes =
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/engine/drv/drv3d_commonCode
  $(Root)/prog/3rdPartyLibs/nvapi
;

CPPopt = -DINSIDE_DRIVER -DUSE_MULTI_D3D_$(UseD3DMultiList) ;

UseProgLibs =
  engine/drv/drv3d_commonCode
  engine/drv/drv3d_$(UseD3DMultiList)
;

if $(Platform) in windows {
  if DX11 in $(UseD3DMultiList) || DX12 in $(UseD3DMultiList) { Sources += hlsl_dx.cpp ; }
  else { Sources += hlsl_stub.cpp ; }
}

if $(Platform) = linux && ( vulkan in $(UseD3DMultiList) ) {
  CPPopt += -DUSE_X11 ;
  Sources += x11.cpp ;
}

include $(Root)/prog/_jBuild/build.jam ;
