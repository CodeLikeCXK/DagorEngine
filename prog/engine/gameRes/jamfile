Root    ?= ../../.. ;
Location = prog/engine/gameRes ;

TargetType  = lib ;
Target      = engine/gameRes.lib ;
StrictCompile = yes ;

include $(Root)/prog/_jBuild/defaults.jam ;

Sources =
  gameResSystem.cpp
  gameResPackList.cpp
  gameResHooks.cpp
  gameResDescBin.cpp
  gameResOptionalPacks.cpp

  a2d_gameres.cpp
  animCharGameRes.cpp
  characterGameRes.cpp
  dynModelGameRes.cpp
  effectGameRes.cpp
  fastPhysGameRes.cpp
  geomNodeTreeGameRes.cpp
  physObjGameRes.cpp
  physSysGameRes.cpp
  rendInstGameRes.cpp
  materialGameRes.cpp
  lshaderGameRes.cpp
  impostorDataGameRes.cpp

  collisionDebug.cpp
  collisionFactory.cpp
  collisionGameRes.cpp
  collisionGameRes_avx.cpp

  stubGameResFactories.cpp
;

AddIncludes =
  $(Root)/prog/engine/sharedInclude
;


UseProgLibs +=
  3rdPartyLibs/eastl
;

if $(PlatformSpec) = clang {
  CPPopt += -Wno-undefined-bool-conversion ;
}

if $(PlatformSpec) in clang gcc && $(PlatformArch) in x86 x86_64 {
  for s in $(Sources) {
    switch $(s) {
      case *_avx512.c* : opt on $(s) = -mavx -mavx2 -mavx512f ;
      case *_avx2.c*   : opt on $(s) = -mavx -mavx2 ;
      case *_avx.c*    : opt on $(s) = -mavx ;
      case *_sse.c*    : opt on $(s) = -msse -msse2 -msse3 ;
    }
  }
} else if $(PlatformSpec) in vc15 vc16 vc17 && $(PlatformArch) in x86_64 {
  for s in $(Sources) {
    switch $(s) {
      case *_avx512.c* : opt on $(s) = /arch:AVX512 ;
      case *_avx2.c*   : opt on $(s) = /arch:AVX2 ;
      case *_avx.c*    : opt on $(s) = /arch:AVX ;
    }
  }
}
if $(PlatformSpec) in clang && $(PlatformArch) in e2k {
  opt on collisionGameRes.cpp += -Wno-pass-failed ;
  opt on collisionGameRes_avx.cpp += -Wno-pass-failed ;
}

# Disable WPO to workaround `collisionGameRes.cpp(1350) : fatal error C1001: Internal compiler error.`
if $(UseWholeOpt) = yes && $(Platform)-$(PlatformArch) = windows-arm64 && $(PlatformSpec) = vc17 { opt on collisionGameRes.cpp = /GL- ; }

include $(Root)/prog/_jBuild/build.jam ;
