include "shader_global.dshl"
include "use_bloom.dshl"
include "dof/dof_composite.dshl"

texture src_tex;
texture src_weight_tex;
float shadows_multiplier = 1.0;
float highlights_multiplier = 1.0;
float middle_luminance = 0.5;
float sigma_sq = 5.0;
int source_mip = 0;
int display_mip = 0;
int apply_per_tile_blur = 0;
interval apply_per_tile_blur: no < 1, yes;

int skip_each_odd_texel = 0;
interval skip_each_odd_texel: no < 1, yes;

int mips_cnt = 1;
interval mips_cnt : one < 2, two < 3, three < 4, four;

shader local_tone_mapping_downsample
{
  ENABLE_ASSERT(cs)
  INIT_BLOOM(cs)
  USE_BLOOM(cs)
  INIT_ZNZFAR_STAGE(cs)
  USE_DOF_COMPOSITE_NEAR_FAR_OPTIONAL_STAGE(cs)

  (cs) {
    src_tex@smp2d = src_tex;
    src_weight_tex@tex2d = src_weight_tex;
    shadows_multiplier@f1 = shadows_multiplier;
    highlights_multiplier@f1 = highlights_multiplier;
    middle_luminance@f1 = middle_luminance;
    sigma_sq@f1 = sigma_sq;
    source_mip@i1 = source_mip;
    display_mip@i1 = display_mip;
    dof_rt_size@f4 = dof_rt_size;
  }

  hlsl(cs) {
    #include "luminance_encoding.hlsl"
    ##if mips_cnt == one
    static const uint WINDOW_SIZE_POW = 0;
    ##elif mips_cnt == two
    static const uint WINDOW_SIZE_POW = 1;
    ##elif mips_cnt == three
    static const uint WINDOW_SIZE_POW = 2;
    ##elif mips_cnt == four
    static const uint WINDOW_SIZE_POW = 3;
    ##endif
    static const uint WINDOW_SIZE = 1u << WINDOW_SIZE_POW;
    static const uint GROUP_SIZE_POW = 3u;
    static const uint GROUP_SIZE = 1u << GROUP_SIZE_POW;
    RWTexture2D<float3> output[WINDOW_SIZE_POW + 1] : register(u0);
    RWTexture2D<float3> weights_tex[WINDOW_SIZE_POW + 1] : register(u4);

    ##if apply_per_tile_blur == yes
    static const float gaussian_weights[3][3] = {
      { 0.077847, 0.123317, 0.077847 },
      { 0.123317, 0.195346, 0.123317 },
      { 0.077847, 0.123317, 0.077847 }
    };
    ##endif

    float3 compute_weights(float3 exposures)
    {
      float3 weights = float3(exp(-0.5 * pow2(exposures - linear_to_log(middle_luminance)) * sigma_sq));
      return weights / (dot(weights, float3(1, 1, 1)) + 0.00001);
    }

    float3 get_exposure_variants(float3 color, float2 uv)
    {
      apply_dof(uv, color);
      apply_bloom(uv, color);
      float highlights = linear_to_log(luminance(color * highlights_multiplier));
      float midtones = linear_to_log(luminance(color));
      float shadows = linear_to_log(luminance(color * shadows_multiplier));
      return float3(highlights, midtones, shadows);
    }

    ##if apply_per_tile_blur == yes || mips_cnt > one

    // grouping as linear block of float4 instead of float3 is 4 times faster on vk/dx12
    // probably dx11 does that internally, while DXC does not
    groupshared float4 cachedMem[GROUP_SIZE*GROUP_SIZE];
    groupshared float4 cachedWeights[GROUP_SIZE*GROUP_SIZE];

    float3 get_cached_exposure(uint2 localId)
    {
      ##assert(all(localId < GROUP_SIZE), "localId (%f, %f) is out of bounds on exposure reading", localId.x, localId.y);
      return cachedMem[localId.x+GROUP_SIZE*localId.y].xyz;
    }
    float3 get_cached_weight(uint2 localId)
    {
      ##assert(all(localId < GROUP_SIZE), "localId (%f, %f) is out of bounds on weights reading", localId.x, localId.y);
      return cachedWeights[localId.x+GROUP_SIZE*localId.y].xyz;
    }
    void store_cached_exposure(uint2 localId, float3 exposure)
    {
      ##assert(all(localId < GROUP_SIZE), "localId (%f, %f) is out of bounds on exposure writing", localId.x, localId.y);
      cachedMem[localId.x+GROUP_SIZE*localId.y] = float4(exposure,0);
    }
    void store_cached_weight(uint2 localId, float3 weight)
    {
      ##assert(all(localId < GROUP_SIZE), "localId (%f, %f) is out of bounds on weights writing", localId.x, localId.y);
      cachedWeights[localId.x+GROUP_SIZE*localId.y] = float4(weight,0);
    }

    void process_mip(uint divisor_pow, uint2 algoBasedLocalId, uint2 algoBasedGroupId, uint2 groupDataOffset, uint2 localId, inout float3 exposure, inout float3 w)
    {
      GroupMemoryBarrierWithGroupSync();
      bool algoLocalIdInWindow = all(algoBasedLocalId < (WINDOW_SIZE >> divisor_pow));
      if (algoLocalIdInWindow)
      {
        exposure = 0;
        w = 0;
        UNROLL
        for (int i = 0; i < 2; ++i)
          UNROLL
          for (int j = 0; j < 2; ++j)
          {
            exposure += get_cached_exposure(algoBasedLocalId * 2 + int2(i, j) + groupDataOffset);
            w += get_cached_weight(algoBasedLocalId * 2 + int2(i, j) + groupDataOffset);
          }
        exposure /= 4;
        w /= 4;
        BRANCH
        if (display_mip <= divisor_pow)
        {
          uint2 finalImageIdx = (algoBasedGroupId << (WINDOW_SIZE_POW - divisor_pow)) + algoBasedLocalId;
          uint2 outputSize;
          output[divisor_pow].GetDimensions(outputSize.x, outputSize.y);
          if (all(finalImageIdx < outputSize))
          {
            texture2DAt(output[divisor_pow], finalImageIdx) = exposure;
            texture2DAt(weights_tex[divisor_pow], finalImageIdx) = w;
          }
        }
      }
      GroupMemoryBarrierWithGroupSync();
      if (algoLocalIdInWindow)
      {
        store_cached_exposure(algoBasedLocalId + groupDataOffset, exposure);
        store_cached_weight(algoBasedLocalId + groupDataOffset, w);
      }
      ##if apply_per_tile_blur == yes
      GroupMemoryBarrierWithGroupSync();
      exposure = 0;
      w = 0;
      UNROLL
      for (int i = 0; i < 3; ++i)
        UNROLL
        for (int j = 0; j < 3; ++j)
        {
          uint2 clampedId = clamp(int2(localId) + int2(i - 1, j - 1), 0, int(GROUP_SIZE >> divisor_pow) - 1);
          float3 cachedExposure = get_cached_exposure(clampedId);
          float3 cachedWeight = get_cached_weight(clampedId);
          float gaussianWeight = gaussian_weights[i][j];
          exposure += cachedExposure * gaussianWeight;
          w += cachedWeight * gaussianWeight;
        }
      store_cached_exposure(localId, exposure);
      store_cached_weight(localId, w);
      ##endif
    }
    ##endif

    [numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
    void local_tone_mapping_downsample_cs(uint2 dtId : SV_DispatchThreadID, uint2 localId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
    {
      uint2 algoBasedLocalId = localId & ((1u << WINDOW_SIZE_POW) - 1);
      uint2 groupDataOffset = (localId >> WINDOW_SIZE_POW) << WINDOW_SIZE_POW;
      uint2 algoBasedGroupId = (groupId << (GROUP_SIZE_POW - WINDOW_SIZE_POW)) | (localId >> WINDOW_SIZE_POW);
      float3 exposure = 0;
      float3 w = 0;
      uint2 mipSize;
      uint level;
      src_tex.GetDimensions(source_mip, mipSize.x, mipSize.y, level);
      UNROLL
      for (int i = 0; i < 2; ++i)
        UNROLL
        for (int j = 0; j < 2; ++j)
        {
          uint2 threadTc = dtId * 2 + int2(i, j);
          ##if skip_each_odd_texel == yes
          if (source_mip == 0)
            threadTc *= 2;
          ##endif
          threadTc = clamp(threadTc, 0u, mipSize - 1u);
          float3 sampledColor = texelFetch(src_tex, threadTc, source_mip).xyz;

          float3 currentExp = source_mip == 0 ? get_exposure_variants(sampledColor, (threadTc + 0.5) / mipSize) : sampledColor;
          exposure += currentExp;
          BRANCH
          if (source_mip == 0)
            w += compute_weights(currentExp);
          ##if src_weight_tex != NULL
          else
            w += texelFetch(src_weight_tex, threadTc, source_mip).xyz;
          ##endif
        }
      exposure /= 4;
      w /= 4;

      ##if apply_per_tile_blur == yes || mips_cnt > one
        store_cached_exposure(algoBasedLocalId + groupDataOffset, exposure);
        store_cached_weight(algoBasedLocalId + groupDataOffset, w);
        GroupMemoryBarrierWithGroupSync();
      ##endif

      ##if apply_per_tile_blur == yes
        exposure = 0;
        w = 0;
        UNROLL
        for (int x = 0; x < 3; ++x)
          UNROLL
          for (int y = 0; y < 3; ++y)
          {
            uint2 clampedId = clamp(int2(localId) + int2(x - 1, y - 1), 0, int(GROUP_SIZE) - 1);
            float3 cachedExposure = get_cached_exposure(clampedId);
            float3 cachedWeight = get_cached_weight(clampedId);
            float gaussianWeight = gaussian_weights[x][y];
            exposure += cachedExposure * gaussianWeight;
            w += cachedWeight * gaussianWeight;
          }
        ##if mips_cnt > one
          store_cached_exposure(localId, exposure);
          store_cached_weight(localId, w);
          //next process mip has GroupMemoryBarrierWithGroupSync(); internally
        ##endif
      ##endif


      BRANCH
      if (display_mip == 0)
      {
        uint2 outputSize;
        output[0].GetDimensions(outputSize.x, outputSize.y);
        if (all(dtId < outputSize))
        {
          texture2DAt(output[0], dtId) = exposure;
          texture2DAt(weights_tex[0], dtId) = w;
        }
      }

      ##if mips_cnt > one
      process_mip(1, algoBasedLocalId, algoBasedGroupId, groupDataOffset, localId, exposure, w);
      ##endif
      ##if mips_cnt > two
      process_mip(2, algoBasedLocalId, algoBasedGroupId, groupDataOffset, localId, exposure, w);
      ##endif
      ##if mips_cnt > three
      process_mip(3, algoBasedLocalId, algoBasedGroupId, groupDataOffset, localId, exposure, w);
      ##endif
    }
  }
  compile("cs_5_0", "local_tone_mapping_downsample_cs")
}
