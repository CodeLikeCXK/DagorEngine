include "dagdp_common_placer.dshl"

macro USE_DAGDP_VOLUME_UTILS()
  hlsl(cs) {
    float3 localVolumePos(float3 worldPos, const VolumeGpuData volume)
    {
      const float4 ip4 = float4(worldPos, 1.0);
      return float3(dot(ip4, volume.itmRow0), dot(ip4, volume.itmRow1), dot(ip4, volume.itmRow2));
    }

    bool isInsideVolumeLocal(float3 localPos, uint volumeType)
    {
      const bool isVolumeTypeOk[VOLUME_TYPE_COUNT] = {
        all(abs(localPos) <= 1.0),
        length(localPos.xz) <= 1.0 && abs(localPos.y) <= 1.0,
        length(localPos) <= 1.0,
        true,
      };
      ##assert(volumeType < VOLUME_TYPE_COUNT, "Invalid volume type: %d", volumeType);
      return isVolumeTypeOk[volumeType];
    }

    bool isInsideVolumeWorld(float3 worldPos, const VolumeGpuData volume)
    {
      return isInsideVolumeLocal(localVolumePos(worldPos, volume), volume.volumeType);
    }

    float localVolumeDistance(float3 localPos, uint volumeType)
    {
      const float dist[VOLUME_TYPE_COUNT] = {
        max(max(abs(localPos.x), abs(localPos.y)), abs(localPos.z)),
        max(length(localPos.xz), abs(localPos.y)),
        length(localPos),
        0.0,
      };
      ##assert(volumeType < VOLUME_TYPE_COUNT, "Invalid volume type: %d", volumeType);
      return dist[volumeType];
    }
  }
endmacro