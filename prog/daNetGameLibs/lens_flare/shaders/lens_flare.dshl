include "shader_global.dshl"
include "gbuffer.dshl"
include "use_volfog.dshl"
include "fom_shadows.dshl"

texture lens_flare_texture;
buffer lens_flare_info_buf;
buffer lens_flare_vertex_positions_buf;
buffer lens_flare_prepared_lights_buf;
float4 lens_flare_resolution;
float4 lens_flare_global_scale;
int lens_flare_light_source_id;
int lens_flare_rounding_type;
interval lens_flare_rounding_type : sharp < 1, rounded < 2, circle;


int lens_flare_prepare_flares_offset = 0;
int lens_flare_prepare_num_flares = 0;
int lens_flare_prepare_use_occlusion = 0;
int lens_flare_prepare_is_sun = 0;
float4 lens_flare_prepare_sun_color;
float lens_flare_prepare_fadeout_distance;
float4 lens_flare_prepare_sun_screen_tc;
float4 lens_flare_prepare_camera_pos;
int lens_flare_has_fom_shadows = 0;
interval lens_flare_has_fom_shadows : no<1, yes;
int lens_flare_has_volfog = 0;
interval lens_flare_has_volfog : no<1, yes;

shader prepare_lens_flare
{
  ENABLE_ASSERT(cs)

  INIT_ZNZFAR_STAGE(cs)
  INIT_LOAD_DEPTH_GBUFFER_BASE(cs)
  USE_LOAD_DEPTH_GBUFFER_BASE(cs)

  if (lens_flare_has_volfog == yes) {
    INIT_VOLUMETRIC_LIGHT(cs)
    USE_VOLUMETRIC_LIGHT(cs)
  }

  if (lens_flare_has_fom_shadows == yes) {
    INIT_FOM_SHADOWS(cs)
    USE_FOM_SHADOWS(cs)
  }

  (cs) {
    num_flares@i1 = (lens_flare_prepare_num_flares);
    flares_offset@i1 = (lens_flare_prepare_flares_offset);
    use_occlusion@i1 = (lens_flare_prepare_use_occlusion);
    is_sun@i1 = (lens_flare_prepare_is_sun);
    sun_color@f3 = (lens_flare_prepare_sun_color);
    fadeout_distance@f1 = (lens_flare_prepare_fadeout_distance);
    sun_tc@f2 = (lens_flare_prepare_sun_screen_tc);
    depth_resolution@f2 = get_dimensions(depth_gbuf, 0);
    camera_pos@f3 = lens_flare_prepare_camera_pos;

    preparedLights@uav = lens_flare_prepared_lights_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      RWStructuredBuffer<LensFLarePreparedLightSource> preparedLights@uav;
    }
  }

  hlsl(cs) {
    #include <lens_flare/shaders/lens_flare_info.hlsli>

    [numthreads(LENS_FLARE_THREADS, 1, 1)]
    void main(uint3 dtId : SV_DispatchThreadID)
    {
      uint id = dtId.x;
      if (id >= num_flares)
        return;
      uint preparedLightId = id + flares_offset;

      float2 screenTc = (sun_tc*float2(1, -1)*0.5+0.5);

      float2 lightScreenPos = sun_tc;
      float radialCenterDistance = max(abs(lightScreenPos.x), abs(lightScreenPos.y));
      float screenEdgeSignedDistance = 1.f-radialCenterDistance;

      float2 angleSinCos = lengthSq(lightScreenPos) > 0.000001f
        ? normalize(lightScreenPos)
        : float2(0, 1);

      float intensity = 1;
      if (fadeout_distance > 0 && screenEdgeSignedDistance < fadeout_distance)
        intensity = saturate(screenEdgeSignedDistance / fadeout_distance);


      BRANCH
      if (use_occlusion > 0 && intensity > 0) {
        float rawDepth = loadGbufferDepth(screenTc * depth_resolution);
        float depth = linearize_z(rawDepth, zn_zfar.zw);
        if (depth < zn_zfar.y)
          intensity = 0;

        BRANCH
        if (intensity > 0)
        {
          ##if lens_flare_has_volfog == yes
            // TODO: implement this for point lights. (intensity *= get_volfog_with_scattering_loss(screenTc, screenTc, view, dist, w);)
            intensity *= get_volumetric_light_sky(screenTc, screenTc).a;
          ##endif

          ##if lens_flare_has_fom_shadows == yes
            if (is_sun) {
              // The shadow is rendered from the sun's direction, so it only makes sense to apply to the sun.
              intensity *= getFOMShadow(camera_pos);
            }
          ##endif
        }
      }

      structuredBufferAt(preparedLights, preparedLightId).color_intensity = float4(sun_color, intensity);
      structuredBufferAt(preparedLights, preparedLightId).light_screen_pos = lightScreenPos;
      structuredBufferAt(preparedLights, preparedLightId).rotation_sin_cos = angleSinCos;
      structuredBufferAt(preparedLights, preparedLightId).radial_distances = float2(radialCenterDistance, 1-screenEdgeSignedDistance);
    }
  }
  compile("target_cs", "main");
}

shader lens_flare
{
  ENABLE_ASSERT(ps)

  supports global_frame;
  z_write = false;
  z_test = false;
  cull_mode = none;

  blend_src = sa; blend_dst = 1;
  blend_asrc = sa; blend_adst = 1;

  (vs) {
    lens_flare_info@buf = lens_flare_info_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      StructuredBuffer<LensFlareInfo> lens_flare_info@buf;
    };
    lens_flare_prepared_lights@buf = lens_flare_prepared_lights_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      StructuredBuffer<LensFLarePreparedLightSource> lens_flare_prepared_lights@buf;
    }
    resolution@f2 = (lens_flare_resolution);
    global_scale@f2 = (lens_flare_global_scale);
    light_source_id@i1 = (lens_flare_light_source_id);
  }

  (ps) {
    lens_flare_texture@smp2d = lens_flare_texture;

    vertex_positions@buf = lens_flare_vertex_positions_buf hlsl {
      StructuredBuffer<float2> vertex_positions@buf;
    }
  }

  channel float2 pos = pos;
  channel float2 tc[0] = tc[0];
  channel float2 tc[1] = tc[1];

  hlsl {
    struct VsInput
    {
      float2 pos : POSITION;
      float2 tc: TEXCOORD0;
      float2 flareId__vertexId: TEXCOORD1;
    };

    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      nointerpolation float4 color_intensity : TEXCOORD0;

      ##if lens_flare_rounding_type == sharp
        noperspective float4 tc_gradientIntensity_invFalloff : TEXCOORD1;
        noperspective float edgeGradientIntensity : TEXCOORD2;
      ##elif lens_flare_rounding_type == rounded
        noperspective float4 tc_pos : TEXCOORD1;
        noperspective float3 edgeDistance_vertexId_invMaxDist : TEXCOORD2;
        nointerpolation float4 roundness_radius_offset_cos : TEXCOORD3;
        nointerpolation float4 invGradient_invFalloff_invEdgeGradient_vposOffset : TEXCOORD4;
      ##elif lens_flare_rounding_type == circle
        noperspective float4 tc_normalizedPos : TEXCOORD1;
        nointerpolation float3 invGradient_invFalloff_invEdgeGradient : TEXCOORD2;
      ##endif
    };

    #ifndef M_PI
    #define M_PI (3.14159265358979323846)
    #endif
  }

  INIT_HDR(vs)
  USE_HDR(vs)

  hlsl(vs) {
    VsOutput lens_flare_vs(VsInput input)
    {
      VsOutput output;


      // --- Reading parameters ---


      uint flareId = uint(input.flareId__vertexId.x);
      bool isCenter = input.flareId__vertexId.y < 0;

      LensFlareInfo info = structuredBufferAt(lens_flare_info, flareId);
      float3 tint = info.tintRGB_invMaxDist.rgb;
      float invMaxDist = info.tintRGB_invMaxDist.w;
      float2 offset = info.offset;
      float2 scale = info.scale;
      float2 distortionScale = info.distortionScale;
      float invGradient = info.invGradient;;
      float invFalloff = info.invFalloff;
      float componentIntensity = info.intensity;;
      float axisOffset2 = info.axisOffset2;
      uint flags = info.flags;
      float distortionPow = info.distortionPow;
      float roundness = info.roundness;
      float roundingCircleRadius = info.roundingCircleRadius;
      float roundingCircleOffset = info.roundingCircleOffset;
      float roundingCircleCos = info.roundingCircleCos;
      uint vposOffset = info.vertexPosBufOffset;
      float2 rotationOffsetSinCos = info.rotationOffsetSinCos;
      bool invertedGradient = flags & LENS_FLARE_DATA_FLAGS__INVERTED_GRADIENT;
      bool useLightColor = flags & LENS_FLARE_DATA_FLAGS__USE_LIGHT_COLOR;
      bool autoRotation = flags & LENS_FLARE_DATA_FLAGS__AUTO_ROTATION;

      LensFLarePreparedLightSource lightSource = structuredBufferAt(lens_flare_prepared_lights, light_source_id);


      // --- These depend on the flare component, but not the specific vertex ---


      float distortionFactor = 0;
      if (flags & LENS_FLARE_DATA_FLAGS__RADIAL_DISTORTION)
      {
        float distortionDistance = flags & LENS_FLARE_DATA_FLAGS__RADIAL_DISTORTION_REL_TO_CENTER
          ? lightSource.radial_distances.x
          : lightSource.radial_distances.y;
        distortionFactor = pow(distortionDistance, distortionPow);
      }
      float2x2 rotation = float2x2(
        float2( rotationOffsetSinCos.y, rotationOffsetSinCos.x),
        float2(-rotationOffsetSinCos.x, rotationOffsetSinCos.y)
      );
      float intensity = componentIntensity * lightSource.color_intensity.w;
      float2 flarePos = lerp(lightSource.light_screen_pos, float2(0, 0), axisOffset2) + offset;

      float3 lightColor = lightSource.color_intensity.rgb;
      if (!useLightColor)
        lightColor.xyz = max3(lightColor.x, lightColor.y, lightColor.z);
      float3 preExposedColor = pack_hdr(lightColor*tint); // it will be modulated by texture rgb in ps


      // --- Calculations specific to this vertex ---


      float2 currentScale = lerp(scale, distortionScale, distortionFactor);
      const float invEdgeGradientMul = 0.5; // 1/2: fadeout over 2 pixels
      float invEdgeGradient = min(currentScale.x, currentScale.y) * max(resolution.x, resolution.y) * invEdgeGradientMul;

      float2 localPos = input.pos * currentScale;
      localPos = mul(rotation, localPos);
      BRANCH
      if (autoRotation)
      {
        float2x2 autoRotationTm = float2x2(
          float2( lightSource.rotation_sin_cos.y, lightSource.rotation_sin_cos.x),
          float2(-lightSource.rotation_sin_cos.x, lightSource.rotation_sin_cos.y)
        );
        localPos = mul(autoRotationTm, localPos);
      }
      localPos *= global_scale.xy;


      // --- Writing vertex output ---


      output.pos = float4(flarePos + localPos, 0, 1);
      output.color_intensity.rgb = preExposedColor;
      output.color_intensity.w = intensity;

      ##if lens_flare_rounding_type == sharp
        float edgeDistance = isCenter ? 1 : 0;
        float gradientIntensity = edgeDistance * invGradient;
        if (invertedGradient)
          gradientIntensity = 1 - gradientIntensity;
        output.tc_gradientIntensity_invFalloff.xy = input.tc;
        output.tc_gradientIntensity_invFalloff.z = gradientIntensity;
        output.tc_gradientIntensity_invFalloff.w = invFalloff;
        output.edgeGradientIntensity = edgeDistance * invEdgeGradient;
      ##elif lens_flare_rounding_type == rounded
        output.tc_pos.xy = input.tc;
        output.tc_pos.zw = input.pos;
        output.edgeDistance_vertexId_invMaxDist.x = isCenter ? 1 : 0;
        output.edgeDistance_vertexId_invMaxDist.y = isCenter ? 0 : input.flareId__vertexId.y;
        output.edgeDistance_vertexId_invMaxDist.z = invMaxDist;
        output.roundness_radius_offset_cos.x = roundness;
        output.roundness_radius_offset_cos.y = roundingCircleRadius;
        output.roundness_radius_offset_cos.z = roundingCircleOffset;
        output.roundness_radius_offset_cos.w = roundingCircleCos;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.x = invGradient;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.y = invFalloff;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.z = invertedGradient ? invEdgeGradient : 0;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.w = vposOffset;
      ##elif lens_flare_rounding_type == circle
        output.tc_normalizedPos.xy = input.tc;
        output.tc_normalizedPos.zw = input.pos * invMaxDist;
        output.invGradient_invFalloff_invEdgeGradient.x = invGradient;
        output.invGradient_invFalloff_invEdgeGradient.y = invFalloff;
        output.invGradient_invFalloff_invEdgeGradient.z = invertedGradient ? invEdgeGradient : 0;
      ##endif
      return output;
    }
  }

  hlsl(ps) {
    #include <lens_flare/shaders/lens_flare_info.hlsli>

    half4 lens_flare_ps(VsOutput input) : SV_Target
    {

      ##if lens_flare_rounding_type == sharp
        float2 tc = input.tc_gradientIntensity_invFalloff.xy;
        float invFalloff = input.tc_gradientIntensity_invFalloff.w;
      ##elif lens_flare_rounding_type == rounded

        float2 tc = input.tc_pos.xy;
        float sharpEdgeDistance = input.edgeDistance_vertexId_invMaxDist.x;
        float vertexId = input.edgeDistance_vertexId_invMaxDist.y;
        float invMaxDist = input.edgeDistance_vertexId_invMaxDist.z;
        float invGradient = input.invGradient_invFalloff_invEdgeGradient_vposOffset.x;
        float invFalloff = input.invGradient_invFalloff_invEdgeGradient_vposOffset.y;
        float invEdgeGradient = input.invGradient_invFalloff_invEdgeGradient_vposOffset.z;
        uint vposOffset = uint(input.invGradient_invFalloff_invEdgeGradient_vposOffset.w);
        float roundness = input.roundness_radius_offset_cos.x;
        float circleRadius = input.roundness_radius_offset_cos.y;
        float circleOffset = input.roundness_radius_offset_cos.z;
        float roundnessClippingConeCos = input.roundness_radius_offset_cos.w;
        float roundDistance = 1;

      ##elif lens_flare_rounding_type == circle
        float2 tc = input.tc_normalizedPos.xy;
        float invGradient = input.invGradient_invFalloff_invEdgeGradient.x;
        float invFalloff = input.invGradient_invFalloff_invEdgeGradient.y;
        float invEdgeGradient = input.invGradient_invFalloff_invEdgeGradient.z;
      ##endif

      ##if lens_flare_texture != NULL
        half4 texModifier = h4tex2D(lens_flare_texture, tc);
      ##else
        half4 texModifier = half4(1,1,1,1);
      ##endif

      float3 color = input.color_intensity.rgb * texModifier.rgb;
      float intensity = input.color_intensity.w * texModifier.a;

      ##if lens_flare_rounding_type == sharp
        float gradientIntensity = saturate(min(input.tc_gradientIntensity_invFalloff.z, input.edgeGradientIntensity));
      ##else
        ##if lens_flare_rounding_type == rounded
          // Project the vertexId to the edges -> avgVertexId is the interpolated value between the outer vertices only (influence of the central vertex is removed)
          float avgVertexId = vertexId / (1 - sharpEdgeDistance);
          float closestVertexId = round(avgVertexId);
          BRANCH
          if (roundness > 0 && sharpEdgeDistance < 1 - circleOffset && abs(avgVertexId - closestVertexId) < roundness*0.5)
          {
            float2 localPos = input.tc_pos.zw;
            float2 closestVertexPos = structuredBufferAt(vertex_positions, vposOffset + closestVertexId);
            float2 closestCirclePos = closestVertexPos * circleOffset;

            float2 circleToLocalPos = localPos - closestCirclePos;
            float circleToLocalPosDist = length(circleToLocalPos);
            float angularDiviationCos = dot(closestVertexPos, circleToLocalPos / circleToLocalPosDist);
            // edge distance is only effected by the roundness in this area
            if (angularDiviationCos > roundnessClippingConeCos && circleToLocalPosDist > 0.000001)
            {
              if (circleToLocalPosDist > circleRadius)
                discard;
              roundDistance = (circleRadius - circleToLocalPosDist) * invMaxDist;
            }
          }
          float edgeDistance = min(roundDistance, sharpEdgeDistance);
        ##elif lens_flare_rounding_type == circle
          float edgeDistance = 1-length(input.tc_normalizedPos.zw);
          if (edgeDistance < 0)
            discard;
        ##endif
        float gradientIntensity = saturate(edgeDistance * invGradient);
        if (invEdgeGradient > 0)
          gradientIntensity = min(1 - gradientIntensity, saturate(edgeDistance * invEdgeGradient));
      ##endif

      BRANCH
      if (invFalloff > 1 && gradientIntensity > 0 && gradientIntensity < 1)
        gradientIntensity = pow(gradientIntensity, invFalloff);
      return half4(color, gradientIntensity * intensity);
    }
  }

  compile("target_vs", "lens_flare_vs");
  compile("target_ps", "lens_flare_ps");
}