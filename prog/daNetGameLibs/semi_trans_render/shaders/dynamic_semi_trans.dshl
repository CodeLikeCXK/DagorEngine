include "dynamic_trans_inc.dshl"
include "semi_trans_inc.dshl"
include "camera_in_camera.dshl"

shader dynamic_semi_trans
{
  IMPORT_ON_TOP_CAMERA_IN_CAMERA(ps)
  ENABLE_ASSERT(ps)
  DYNAMIC_BLOCK_TRANS()
  static int num_bones = 0;
  interval num_bones: no_bones<1, four_bones;
  channel float3 pos=pos;
  channel color8 norm=norm unsigned_pack;

  blend_src = one;  blend_dst = isa;

  if (num_bones != no_bones)
  {
    channel color8 tc[4] = extra[0];
    channel color8 tc[5] = extra[1];
  }
  INIT_NO_SKINNING()
  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 normal                 : TEXCOORD1;
      float3 pointToEye             : TEXCOORD2;
      float3 placingColor           : TEXCOORD3;
    };
  }
  hlsl(vs) {
    struct VsInput
    {
      float3 pos                  : POSITION;
      float4 normal               : NORMAL;
      INIT_BONES_VSINPUT(TEXCOORD4, TEXCOORD5)
    };
  }
  NO_SKINNING_VS()
  USE_FLOAT_POS_PACKING()
  USE_UNPACK_UNIT_VECTOR_VS()
  hlsl(vs) {
    VsOutput dynamic_semi_trans_vs(VsInput input)
    {
      VsOutput output;
      input.pos.xyz = unpack_pos(input.pos);

      float3 eyeToPoint;
      float3 worldDu;
      float3 worldDv;
      float3 worldNormal;
      float3 localNormal = unpack_unit_vector(input.normal.rgb);

      float3 localDu = float3(1,0,0), localDv = float3(1,0,0);

      instance_skinning(
        input,
        input.pos,
        localNormal,
        localDu,
        localDv,
        eyeToPoint,
        output.pos,
        worldNormal,
        worldDu,
        worldDv);

      uint2 offsetCount = get_offset_count_additional_data(AAD_RAW_PLACING_COLOR);
      float4 placingColor = get_additional_data(offsetCount, 0);

      output.pointToEye.xyz = -eyeToPoint;
      output.normal.xyz = normalize(worldNormal);
      output.placingColor = placingColor.xyz;
      return output;
    }
  }
  compile("target_vs", "dynamic_semi_trans_vs");

  USE_HDR(ps)
  SEMI_TRANS_PS()
}