return {
  function getCurrentLanguage() {
    return "English"
  }
  function getForceLanguage() {
    return ""
  }
  function setLanguageToSettings(_lang) {}
  function [pure] loc(key, ...) {
    assert(key == null || type(key) == "string", @() $"type of 'key' argument should be string")
    assert(vargv.len() <= 2)
    let def = vargv.findvalue(@(v) type(v)=="string")
    let params = vargv.findvalue(@(v) type(v)=="table")
    assert(def==null || type(def) == "string", @() $"type of 'def' argument should be string or null")
    assert(params==null || type(params) == "table", @() $"type of 'params' argument should be table")
    return def ?? key
  }
  function [pure] doesLocTextExist(key) {
    assert("string" == type(key), @() $"type of argument should be one of: 'string'")
    return false
  }
  function [pure] getLocTextForLang(key, lang) {
    assert("string" == type(key), @() $"type of argument should be one of: 'string'")
    assert("string" == type(lang), @() $"type of argument should be one of: 'string'")
    return key
  }
  function initLocalization(a, b = "") {
    assert(["instance"].contains(type(a)), @() $"type of argument should be one of: 'instance'")
    assert(["string"].contains(type(b)), @() $"type of argument should be one of: 'string'")
  }
  processHypenationsCN = @[pure](...) ""
  processHypenationsJP = @[pure](...) ""
}