return {
  YU2_OK = "YU2_OK"
  YU2_WRONG_LOGIN = "YU2_WRONG_LOGIN"
  YU2_WRONG_PARAMETER = "YU2_WRONG_PARAMETER"
  YU2_2STEP_AUTH = "YU2_2STEP_AUTH"
  YU2_NOT_FOUND = "YU2_NOT_FOUND"
  YU2_UPDATE = "YU2_UPDATE"
  YU2_WRONG_PAYMENT = "YU2_WRONG_PAYMENT"
  YU2_ALREADY = "YU2_ALREADY"

  status_string = @(...) ""
  status_string_full = @(i) assert(type(i) == "integer") ?? ""
  get_distr = @() ""
  set_auth_token_renew_fail_cb =  @(cb) assert(type(cb)=="function")
  get_user_info = @() null
  convert_external_jwt_to_auth_jwt = @(...) null
  get_authenticated_url = function(base_url, host, evt_name) {
    assert(type(host)=="string")
    assert(type(base_url)=="string")
    assert(type(evt_name)=="string")
    return base_url
  }
  get_authenticated_url_sso = function(url, host, service, evt_name) {
    assert(type(url)=="string")
    assert(type(host)=="string")
    assert(type(service)=="string")
    assert(type(evt_name)=="string")
    return url
  }
  token_renew_fail_event = "auth.token_renew_fail"
  token_renew_event = "auth.token_renew"
  force_token_renew = @() null
  get_country_code = @() ""
  get_stoken = @(eventbus_name) eventbus_name
  login_2step = @(params, id) assert(type(params)=="table" && type(id)=="string")
  login = @(params, id) assert(type(params)=="table" && type(id)=="string")
  login_guest = @(...) null
}
