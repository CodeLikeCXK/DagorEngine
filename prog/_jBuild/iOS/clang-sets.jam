#  Setup for clang compiler for iOS (to be included from jBuild.jam)

_OBJ_SUFFIX  = .o ;

IOSUseCrashlytics ?= no ;
IOSUploadCrashlyticsSymbols ?= no ;

local _DEF_COM_CMDLINE =
  -pipe -c -arch $(PlatformArch)
  -miphoneos-version-min=$(iOSMinVer)
  -stdlib=libc++
  -MD -Wno-trigraphs -Wno-multichar -Wno-dangling-else -Wno-dynamic-class-memaccess
  -Wno-switch -Wno-constant-logical-operand -Wno-string-plus-int
  -Wno-unknown-warning-option -Wno-deprecated-register
  -Wno-deprecated-declarations -Wno-inconsistent-missing-override
  -Wno-null-dereference -Wno-constant-conversion -Wno-unused-value
  -Wno-deprecated-builtins -Wno-unused-command-line-argument
  -Wno-nan-infinity-disabled
  -ffunction-sections -fdata-sections
  -ffast-math -ffinite-math-only -mrecip=none
  "\"-D__forceinline=inline __attribute__((always_inline))\"" -D__cdecl= -D__stdcall= -D__fastcall
  -D_snprintf=snprintf
  -D_vsnprintf=vsnprintf
  -Dstricmp=strcasecmp
  -Dstrnicmp=strncasecmp
  -D_TARGET_APPLE=2 -D_TARGET_IOS -D_TARGET_STATIC_LIB
  -D__APPLE_IOS__ -DARM_NEON_GCC_COMPATIBILITY
  -Di_strlen=strlen
;

if $(ClangThreadSafety) = yes {
  _DEF_COM_CMDLINE += -Wthread-safety ;
}

_CLANG_BIN = $(_DEVTOOL)/mac/Toolchain/usr/bin ;
local _IOS_SWIFT_TARGET = arm64-apple-ios$(iOSMinVer) ;
if $(PlatformArch) = i386 {
  _IOS_SDK_ROOT = $(_DEVTOOL)/mac/SDKs/iPhoneSimulator.platform/iPhoneSimulator$(iOSVer).sdk ;
  _IOS_SWIFT_TARGET = x86_64-apple-ios$(iOSMinVer) ;
  _DEF_COM_CMDLINE +=
    -msse4.1
    -D_TARGET_SIMD_SSE=$(SSEVersion)
  ;
} else {
  _IOS_SDK_ROOT = $(_DEVTOOL)/mac/SDKs/iPhoneOS.platform/iPhoneOS$(iOSVer).sdk ;
  _DEF_COM_CMDLINE +=
    -D_TARGET_SIMD_NEON
  ;
}
if $(PlatformArch) in arm64 arm64e { _DEF_COM_CMDLINE += -D_TARGET_64BIT -D_TARGET_ARCH_ARM64 ; }

local _DEF_C_CMDLINE = -std=c99 ; 
local _DEF_CPP_CMDLINE = -std=c++$(CPPStd) -Wno-invalid-offsetof ;

if $(Exceptions) != yes {
  _DEF_CPP_CMDLINE += -fno-exceptions ;
} else {
  _DEF_CPP_CMDLINE += -fexceptions -DDAGOR_EXCEPTIONS_ENABLED ;
}

if $(Rtti) != yes {
  _DEF_CPP_CMDLINE += -fno-rtti ;
} else {
  _DEF_CPP_CMDLINE += -frtti ;
}

_LINK = $(_CLANG_BIN)/clang++ -pipe -arch $(PlatformArch) -isysroot $(_IOS_SDK_ROOT)
        -miphoneos-version-min=$(iOSMinVer)
        -ObjC -Wl,-objc_abi_version,2 -Wl,-headerpad_max_install_names
        -framework Foundation -framework QuartzCore -framework OpenAL -framework CoreLocation
        -framework AudioToolbox -framework CFNetwork -framework CoreGraphics -framework SystemConfiguration
        -framework AddressBook -framework MobileCoreServices -framework AuthenticationServices
        -framework CoreFoundation -framework Security
        -weak_framework StoreKit -weak_framework CoreFoundation -weak_framework GameKit
        -weak_framework UIKit -weak_framework CoreMotion -weak_framework CoreHaptics
;

_LINK += -framework Metal ;
UseMetalfx ?= no ;
if $(UseMetalfx) = yes {
  _LINK += -framework MetalFx ;
}

if $(PlatformArch) = i386 { _ASM_COMPILER = nasm -f macho ; }
if ! $(PlatformArch) in arm64 arm64e { _LINK += -Wl,-no_pie ; }

_INSTALL_NAME_TOOL = call $(_CLANG_BIN)/install_name_tool ;

_LIB          = $(_CLANG_BIN)/libtool $(_CLANG_BIN)/ranlib ;
_C_COMPILER   = $(_CLANG_BIN)/clang -x c $(_DEF_COM_CMDLINE) $(_DEF_C_CMDLINE) ;
_CPP_COMPILER = $(_CLANG_BIN)/clang++ -x c++ $(_DEF_COM_CMDLINE) $(_DEF_CPP_CMDLINE) ;
_OBJC_COMPILER   = $(_CLANG_BIN)/clang -x objective-c -std=c99 $(_DEF_COM_CMDLINE) -fno-objc-exceptions -fobjc-abi-version=2 -fobjc-legacy-dispatch ;
_OBJCPP_COMPILER = $(_CLANG_BIN)/clang++ -x objective-c++ -std=c++$(CPPStd) $(_DEF_COM_CMDLINE) -fno-objc-exceptions -fobjc-abi-version=2 -fobjc-legacy-dispatch ;
_GAS_COMPILER = $(_CLANG_BIN)/clang -g -c -arch $(PlatformArch) ;
_SWIFTC_COMPILER = $(_CLANG_BIN)/swiftc -sdk $(_IOS_SDK_ROOT) -target $(_IOS_SWIFT_TARGET) -parse-as-library ;

_INCLUDE      = $(Root)/prog/dagorInclude $(Root)/prog/1stPartyLibs $(Root)/prog/3rdPartyLibs ;

# make compiler cmd-line ###
_CPP_BASE_INCLUDES = "-iwithprefix "$(MasterPreInclude) "-I "$(MasterPreInclude) -isysroot $(_IOS_SDK_ROOT) "-I "$(Root)/prog/3rdPartyLibs/eastl/include ;
_C_BASE_INCLUDES   = "-iwithprefix "$(MasterPreInclude) "-I "$(MasterPreInclude) -isysroot $(_IOS_SDK_ROOT) ;


for inc in $(_INCLUDE) {
  _CPP_BASE_INCLUDES += -I $(inc) ;
  _C_BASE_INCLUDES   += -I $(inc) ;
}

_DEF_C_CMDLINE = ;

include $(Root)/prog/_jBuild/iOS/bundle.jam ;
