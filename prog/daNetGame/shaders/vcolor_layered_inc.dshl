include "layered_inc.dshl"
include "hmap_blend_use_inc.dshl"
include "translucent_inc.dshl"

macro VCOLOR_LAYERED_WEIGHT_BLENDING(stage)
hlsl(stage)
{
  half3 init_blend_weights(float3 vcolMask, float2 by_normal_params)
  {
    half3 weights = vcolMask;
    half weightsDot = vcolMask.x + vcolMask.y;
    weights.yz = vcolMask.xy * (weightsDot > 1 ? rcp(weightsDot) : 1);
    weights.x = saturate(1 - weightsDot);
    weights.y = lerp(weights.y, by_normal_params.x, by_normal_params.y);
    return weights;
  }
}
WEIGHT_BLENDING(stage)
endmacro

macro INIT_VCOLOR_LAYERED()

  INIT_LAYERED()

  static float4 invert_heights = (0, 0, 0, 0);
  static float4 paint_details = (0, 0, 0, 0);
  static int palette_index = 1;
  static float4 details_tile = (1, 1, 1, 0);
  static int atest = 0;
  interval atest: atestOff < 1, atestOn;
  static float4 overlay_color_from = (0.5, 0.5, 0.5, 0.5);
  static float4 overlay_color_to = (0.5, 0.5, 0.5, 0.5);
  if (atest == atestOn)
  {
    static float4 details_alphatest = (0, 0, 0, 0);
  }

  if (shader == rendinst_cliff)
  {
    texture leaks_tex = material.texture[7];

    static float4 mask_by_normal = (0, 1, 0, 0);
    static float4 overlay_strenght = (0, 0, 0, 0);
    static float4 normal_overlay_color_from = (0, 0, 0, 0);
    static float4 normal_overlay_color_to = (0, 0, 0, 0);
    static float4 overlay_by_normal = (0, 1, 0, 0);
    static float4 gradient_overlay_color_from = (0.5, 0.5, 0.5, 1);
    static float4 gradient_overlay_color_to = (0.5, 0.5, 0.5, 1);
    static float4 gradient_overlay_vector = (0, 1, 0, 0);
    static float leaks_treshhold = (0);
    static float leaks_tex_size = (1);
    static float leaks_noise_size = (1);
    static float leaks_normal_strength = (0);
    static float leaks_removal_by_overlay_normal = (0);
    static float leaks_noise_strength = (4);
    (ps) {
      mask_by_normal@f4 = mask_by_normal;
      overlay_strenght@f4 = overlay_strenght;
      normal_overlay_color_from@f4 = normal_overlay_color_from;
      normal_overlay_color_to@f4 = normal_overlay_color_to;
      overlay_by_normal@f4 = overlay_by_normal;
      gradient_overlay_color_from@f4 = gradient_overlay_color_from;
      gradient_overlay_color_to@f4 = gradient_overlay_color_to;
      gradient_overlay_vector@f4 = gradient_overlay_vector;
      leaks_treshhold_size_noise_strength@f4 = float4(leaks_treshhold,leaks_tex_size,leaks_noise_size,leaks_normal_strength);
      leaks_removal_normal_noise_strength@f4 = float4(leaks_removal_by_overlay_normal,leaks_noise_strength,0,0);
    }
  }

  (vs) { paint_palette_row_index@f2 = (paint_details.w,palette_index,0,0); }

  (ps) {
    invert_heights@f4 = invert_heights;
    details_tile@f4 = details_tile;
    overlay_color_from@f4 = overlay_color_from;
    overlay_color_to@f4 = overlay_color_to;
    paint_details@f4 = paint_details;
  }
  if (atest == atestOn)
  {
    (ps) { details_alphatest@f4 = details_alphatest; }
  }
endmacro

macro USE_VCOLOR_LAYERED(stage)
  VCOLOR_LAYERED_WEIGHT_BLENDING(stage)
endmacro

// If use_translucency is set to true, translucent_inc.dshl:INIT_TRANSLUCENCY_SETTING(ps) should be called before
macro VCOLOR_LAYERED_PS(is_writing_gbuffer, is_blending_hmap, use_translucency)
  USE_LAYERED_PS()
  USE_PIXEL_TANGENT_SPACE()
  ENABLE_ASSERT(ps)
  if (is_writing_gbuffer)
  {
    WRITE_GBUFFER()
  }
  USE_CHARACTER_MICRODETAIL()
  if (is_writing_gbuffer && is_blending_hmap)
  {
    USE_HMAP_BLEND()
  }
  if (shader == rendinst_cliff)
  {
    if (leaks_tex != NULL)
    {
      (ps){leaks_tex@static = leaks_tex;}
    }
  }

  hlsl(ps) {
    #ifndef SAMPLE_TEX
      #define SAMPLE_TEX(tex, tc) tex2DBindless(tex, tc)
    #endif
      #if VOXELIZE_ALBEDO_PASS
      void vcolor_layered_ps(VsOutput input INPUT_VFACE)
    #else
      GBUFFER_OUTPUT vcolor_layered_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
    #endif
    {
      #if SET_UP_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      #ifdef VOXELIZE_DISCARD_PRIM
        VOXELIZE_DISCARD_PRIM
      #endif
      #ifndef IS_DYNAMIC
        #define IS_DYNAMIC 0
      #endif
      #ifndef FORCE_AUTO_MOTION_VECTOR
        #define FORCE_AUTO_MOTION_VECTOR 0
      #endif

      input.normal.xyz = MUL_VFACE(input.normal.xyz);
      float2 texCoord = input.diffuseTexcoord.xy;
      float3 worldPos = world_view_pos-input.pointToEye.xyz;
      half4 diffuseColor = SAMPLE_TEX(get_diffuse_tex(), texCoord * get_details_tile().x);
      half4 diffuseColor1 = SAMPLE_TEX(get_diffuse_tex1(), texCoord * get_details_tile().y);
      half4 diffuseColor2 = SAMPLE_TEX(get_diffuse_tex2(), texCoord * get_details_tile().z);
      float moss = input.pointToEye.w;
      float2 by_normal_params = float2(0, 0);
      ##if (shader == rendinst_cliff)
        by_normal_params = float2(max(dot(get_mask_by_normal().xyz, input.normal.xyz), 0), get_mask_by_normal().w);
      ##endif
      half3 weights = init_blend_weights(input.vcolMask, by_normal_params);
      half3 initialHeight = half3(diffuseColor.a, diffuseColor1.a, diffuseColor2.a);
      weights = get_blending_weights(weights, lerp(initialHeight, 1 - initialHeight, get_invert_heights().xyz));
      ##if (atest == atestOn)
        float alpha = 1;
        if (weights.x >= max(weights.y, weights.z))
          alpha = initialHeight.x - get_details_alphatest().x;
        if (weights.y >= max(weights.x, weights.z))
          alpha = initialHeight.y - get_details_alphatest().y;
        if (weights.z >= max(weights.x, weights.y))
          alpha = initialHeight.z - get_details_alphatest().z;
        clip(alpha);
      ##endif
      ##if (paint_details_tex != NULL) // note: legacy behavior, paint_details_tex is not always needed (eg. for overlay map color)
        diffuseColor.rgb  = lerp(diffuseColor.rgb , diffuseColor.rgb *input.colorMul, get_paint_details().x);
        diffuseColor1.rgb = lerp(diffuseColor1.rgb, diffuseColor1.rgb*input.colorMul, get_paint_details().y);
        diffuseColor2.rgb = lerp(diffuseColor2.rgb, diffuseColor2.rgb*input.colorMul, get_paint_details().z);
      ##endif
      #if VOXELIZE_ALBEDO_PASS
        diffuseColor = diffuseColor*weights.x + diffuseColor1*weights.y + diffuseColor2*weights.z;
        WRITE_SCENE25D_VOXEL_DATA(worldPos, diffuseColor.rgb, 0, 0);
      #else
        half4 packedNormalMap = SAMPLE_TEX(get_normal_tex(), texCoord * get_details_tile().x);
        half4 packedNormalMap1 = SAMPLE_TEX(get_normal_tex1(), texCoord * get_details_tile().y);
        half4 packedNormalMap2 = SAMPLE_TEX(get_normal_tex2(), texCoord * get_details_tile().z);
        half3 normalMap;

        packedNormalMap = packedNormalMap * weights.x + packedNormalMap1 * weights.y + packedNormalMap2 * weights.z;
        normalMap = unpack_ag_normal(packedNormalMap);

        half smoothness = packedNormalMap.r;
        ##if (shader == rendinst_cliff)
        #define INV_LEAKS_CONTRAST_VALUE 10
        half3 overlayNormal = perturb_normal_precise( normalMap, normalize(input.normal.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy );
        float overlayNormalMask = saturate(dot(get_overlay_by_normal().xyz, overlayNormal.xyz));
        float4 normalOverlayColor = lerp(get_normal_overlay_color_from(), get_normal_overlay_color_to(), overlayNormalMask);
        float4 overlayColor = lerp(get_overlay_color_from(), get_overlay_color_to(), input.vcolMask.z);
        float4 overlayGradient = lerp(get_gradient_overlay_color_from(), get_gradient_overlay_color_to(), input.gradientFactor);
        float4 overlayColorFinal = normalOverlayColor * overlayGradient * overlayColor * 8; // the last multiplier for correct modulate2x, *2 per member
        ##if leaks_tex != NULL
        float3 posWithNoise = worldPos + tex3D(perlin_noise3d, (worldPos / get_leaks_removal_normal_noise_strength().y)).xyz * get_leaks_treshhold_size_noise_strength().z;
        float4 leakDiffuse = SAMPLE_TEX(get_leaks_tex(), (posWithNoise.xz / get_leaks_treshhold_size_noise_strength().y));
        leakDiffuse.xyz *= 4.59479341998814; // gamma correction for the same visual in game and AV
        float leakStrength = get_leaks_treshhold_size_noise_strength().w;
        float normMask = (leakStrength * (1 - leakStrength * input.normal.y)) * 0.5;
        float leakMask = (leakDiffuse.w - normMask) * (1 - (overlayNormalMask*get_leaks_removal_normal_noise_strength().x));
        leakMask = saturate((leakMask - get_leaks_treshhold_size_noise_strength().x) * INV_LEAKS_CONTRAST_VALUE);
        float3 overlayLeak = lerp(float3(0.5,0.5,0.5), leakDiffuse.xyz, leakMask.xxx);
        overlayColorFinal.xyz *= overlayLeak * 2;
        ##endif
        diffuseColor.rgb =  lerp(diffuseColor.rgb,  diffuseColor.rgb  * overlayColorFinal.xyz, get_overlay_strenght().x);
        diffuseColor1.rgb = lerp(diffuseColor1.rgb, diffuseColor1.rgb * overlayColorFinal.xyz, get_overlay_strenght().y);
        diffuseColor2.rgb = lerp(diffuseColor2.rgb, diffuseColor2.rgb * overlayColorFinal.xyz, get_overlay_strenght().z);
        smoothness *= overlayColorFinal.a;
        ##endif
        diffuseColor = diffuseColor*weights.x + diffuseColor1*weights.y + diffuseColor2*weights.z;

        half metalnessOrTranslucency;

        ##if use_translucency
        if (SHOULD_USE_TRANLUCENCY && SHOULD_USE_OVERRIDEN_TRANLUCENCY)
          metalnessOrTranslucency = TRANSLUCENCY_OVERRIDE;
        else
        ##endif
          metalnessOrTranslucency = packedNormalMap.b;

        half reflectance = 0.5;
        half ao = 1;
        BRANCH
        if (character_micro_detail_layer>=0)
        {
          apply_character_micro_detail(sample_character_micro_detail(input.diffuseTexcoord.xy*get_character_micro_detail_scale().xy, character_micro_detail_layer),
                                       diffuseColor.rgb, normalMap, reflectance, smoothness);
        }
        half3 worldNormal = perturb_normal_precise( normalMap, normalize(input.normal.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy );
        #if NORMAL_RENDER_PASS
          apply_wetness_by_microdetail(character_micro_detail_layer, worldPos, diffuseColor.rgb, worldNormal, reflectance, smoothness, ao);
        #endif

        UnpackedGbuffer gbuffer;
        init_gbuffer(gbuffer);

        ##if use_translucency
        if (SHOULD_USE_TRANLUCENCY)
        {
          init_translucency(gbuffer, metalnessOrTranslucency);
          init_material(gbuffer, SHADING_SUBSURFACE);
          init_sss_profile(gbuffer, SSS_PROFILE_NEUTRAL_TRANSLUCENT);
        }
        else
        ##endif
        {
          init_metalness(gbuffer, metalnessOrTranslucency);
          init_material(gbuffer, SHADING_NORMAL);
        }

        init_dynamic(gbuffer,IS_DYNAMIC);
        init_order(gbuffer, GBUFFER_ORDER_DYNAMIC);
        init_auto_motion_vector(gbuffer, FORCE_AUTO_MOTION_VECTOR);
        #ifdef MOTION_VECTORS_ENABLED
          float3 motion = encode_motion_vector( input.out_pos, input.out_pos_prev );
          init_motion_vector(gbuffer, motion);
        #endif
        init_ao(gbuffer, ao);
        ##if (shader != rendinst_cliff)
        diffuseColor.rgb *= lerp(get_overlay_color_from().xyz, get_overlay_color_to().xyz, input.vcolMask.b) * 2;
        ##endif
        init_smoothness(gbuffer, smoothness);
        init_reflectance(gbuffer, reflectance);
        init_normal(gbuffer, worldNormal);
        init_albedo(gbuffer, diffuseColor.rgb);

        ##if is_blending_hmap
        blend_with_landscape(gbuffer, worldPos, normalize(input.normal.xyz), input.pointToEye.xyz, input.riHmapBlend);
        ##endif

        #ifdef PLOD_PS_GEN
        PLOD_PS_GEN(input, pack_gbuffer(gbuffer), normalMap)
        #endif

        #if DEBUG_DOMINANT_UV
          init_albedo(gbuffer, get_dominant_uv_debug_color(input.diffuseTexcoord.xy));
        #endif

        return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
      #endif
    }
  }
  compile("target_ps", "vcolor_layered_ps");
endmacro