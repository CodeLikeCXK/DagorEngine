

macro USE_ANIMCHAR_DYNMAT_PARAMS(code)
  hlsl(code)
  {
    #include "dynamic_material_params.hlsli"

    uint2 get_dynmat_channel_metadata(uint2 data_offset_count, uint channel_id)
    {
      float4 rawMetadata = get_additional_data_unsafe(data_offset_count, 0);
      bool useLowChannels = channel_id < 4;
      uint shift = useLowChannels ? channel_id : (channel_id - 4);
      uint2 rawMetadataI = asuint(useLowChannels ? rawMetadata.xy : rawMetadata.zw);
      return (rawMetadataI >> (shift * 8)) & 0xFF;
    }

    bool get_dynmat_offset_count(int channel_id, int material_type, out uint2 global_offset_count)
    {
      global_offset_count = 0;

      if (channel_id < 0 || channel_id >= 8)
      {
        ##assert(false, "Dynmat error: invalid channel_id: %d", channel_id);
        return false;
      }

      uint2 dataOffsetCount = get_offset_count_additional_data(AAD_MATERIAL_PARAMS);

      if (dataOffsetCount.y == 0)
      {
        ##assert(false, "Dynmat error: no additional data");
        return false;
      }

      uint2 channelMetadata = get_dynmat_channel_metadata(dataOffsetCount, channel_id);

      if (channelMetadata.y != material_type)
      {
        ##assert(false, "Dynmat error: wrong material type: %d, expected: %d", channelMetadata.y, material_type);
        return false;
      }

      global_offset_count = uint2(dataOffsetCount.x + channelMetadata.x, DMEM_CNT);
      return true;
    }
  }
endmacro
