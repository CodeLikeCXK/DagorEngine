
include "skinning_inc2.dshl"
include "animchar_dynmat_params.dshl"
include "dynmat_params_inc.dshl"
include "projective_wounds.dshl"


macro INIT_EMISSIVE_ANIMCHAR_DYNMAT_PARAMS()
  static float4 emissive_color = (1,1,1,1);
  static float emission_albedo_mult = 1;

  PREPARE_EMISSIVE_COLOR(ps, emissive_color)
  (ps)
  {
    emission_albedo_mult@f1 = (emission_albedo_mult,0,0,0);
  }
  if (parameters_channel != from_asset)
  {
    if (dyn_model_render_pass == render_pass_normal)
    {
      INIT_PER_INSTANCE_DATA(ps)
    }
    (ps)
    {
      parameters_channel@f1 = parameters_channel;
    }
  }
endmacro

macro INIT_EMISSIVE_ANIMCHAR_DYNMAT_SIMPLE_PARAMS()
  static float emission_strength = (0);
  (ps)
  {
    emission_strength@f1 = emission_strength;
  }
  if (parameters_channel != from_asset)
  {
    if (dyn_model_render_pass == render_pass_normal)
    {
      INIT_PER_INSTANCE_DATA(ps)
    }
    (ps)
    {
      parameters_channel@f1 = parameters_channel;
    }
  }
endmacro

macro USE_EMISSIVE_ANIMCHAR_DYNMAT_PARAMS()
  if (parameters_channel != from_asset)
  {
    USE_ANIMCHAR_DYNMAT_PARAMS(ps) // TODO: use in VS, interpolate to PS
  }
  hlsl(ps)
  {
    void get_emissive_parameters(out float4 out_emissive_color, out float out_emission_albedo_mult)
    {
      out_emissive_color = get_emissive_color();
      out_emission_albedo_mult = get_emission_albedo_mult();
  ##if (parameters_channel != from_asset)
      FLATTEN if (disable_dynmat_params)
        return;

      uint globalOffset;
      FLATTEN if (get_dynmat_offset(get_parameters_channel(), DMT_EMISSIVE, globalOffset))
      {
        out_emissive_color        = get_additional_data_unsafe(globalOffset + DMEM_EMISSIVE_COLOR);
        out_emission_albedo_mult  = get_additional_data_unsafe(globalOffset + DMEM_EMISSION_ALBEDO_MULT).x;
      }
      else
      {
        out_emissive_color        = float4(1,0,1,16); // very bright magenta color to catch bugs easier
        out_emission_albedo_mult  = 0;
      }
  ##endif
    }
  }
endmacro

macro USE_EMISSIVE_ANIMCHAR_DYNMAT_SIMPLE_PARAMS()
  if (parameters_channel != from_asset)
  {
    USE_ANIMCHAR_DYNMAT_PARAMS(ps) // TODO: use in VS, interpolate to PS
  }
  hlsl(ps)
  {
    // it overwrites only the emission strength, unless there is a bug somewhere, in which case it gives debug colors
    void get_emissive_parameters(inout float4 emissive_color, inout float emission_albedo_mult)
    {
      emissive_color.a = get_emission_strength();
  ##if (parameters_channel != from_asset)
      FLATTEN if (disable_dynmat_params)
        return;

      uint globalOffset;
      FLATTEN if (get_dynmat_offset(get_parameters_channel(), DMT_EMISSIVE, globalOffset))
      {
        emissive_color.a = get_additional_data_unsafe(globalOffset + DMEM_EMISSIVE_COLOR).a;
      }
      else
      {
        emissive_color = float4(1,0,1,16); // very bright magenta color to catch bugs easier
        emission_albedo_mult  = 0;
      }
  ##endif
    }
  }
endmacro



macro EMISSIVE_INIT_IMPL()
  texture tex = material.texture.diffuse;

  texture normal = material.texture[2];

  static int use_alpha_for_emission_mask = 1;
  interval use_alpha_for_emission_mask: no < 1, yes;
  static int nightly = 0;

  hlsl(ps) {
    #define OVERRIDE_NIGHT_SUN_COS 1
    #include "light_consts.hlsli"
  }

  INIT_EMISSIVE_ANIMCHAR_DYNMAT_PARAMS()
endmacro


macro EMISSIVE_INIT_WITH_DYNAMIC_PARAMS()
  DECLARE_DYNAMIC_MATERIAL_PARAMS()
  EMISSIVE_INIT_IMPL()
endmacro

macro EMISSIVE_INIT()
  DECLARE_DYNAMIC_MATERIAL_PARAMS()
  assume parameters_channel = from_asset;
  EMISSIVE_INIT_IMPL()
endmacro


macro EMISSIVE_VS_OUT()
  hlsl {
    struct VsOutput
    {
      PRECISE VS_OUT_POSITION(pos)
      float2 diffuseTexcoord        : TEXCOORD0;
      float3 normal                 : TEXCOORD1;
      float3 pointToEye             : TEXCOORD2;
      // TODO: store emissiveColor and emissionAlbedoMult
      #if SET_UP_MULTIDRAW
        VSOUT_DRAW_ID
      #endif
    };
  }
endmacro

macro EMISSIVE_PS_PRESHADER()
(ps) {
  diffuse_tex@static = tex;
  normal_tex@static = normal;
  nightly@i1 = nightly;
  real_skies_sun_light_dir@f4 = real_skies_sun_light_dir;
}
endmacro

macro EMISSIVE_PS_BODY()
hlsl(ps) {
  #ifndef DYNAMIC_EMISSIVE_DIFFUSE_SRC
  #define DYNAMIC_EMISSIVE_DIFFUSE_SRC(input_tc) tex2DBindless(get_diffuse_tex(), input_tc)
  #endif

  GBUFFER_OUTPUT simple_ps(VsOutput input HW_USE_SCREEN_POS)
  {
    #if SET_UP_MULTIDRAW
      INIT_MULTIDRAW(input);
      SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
    #endif
    #ifndef IS_DYNAMIC
      #define IS_DYNAMIC 0
    #endif
    #ifndef FORCE_AUTO_MOTION_VECTOR
      #define FORCE_AUTO_MOTION_VECTOR 0
    #endif

    #ifndef APPLY_WOUNDS
      #define APPLY_WOUNDS 0
    #endif
    UnpackedGbuffer gbuffer;
    init_gbuffer(gbuffer);
    float2 texCoord = input.diffuseTexcoord.xy;

    float3 worldPos = world_view_pos-input.pointToEye.xyz;
    half4 diffuseColor = DYNAMIC_EMISSIVE_DIFFUSE_SRC(texCoord);
    ##if normal != NULL
      half4 packedNormalMap = tex2DBindless(get_normal_tex(), texCoord);

      half smoothness = packedNormalMap.r;//there is nothing good here!
      half reflectance = 0.5;
      //smoothness = get_specular_intensity_from_color( diffuseColor.rgb );//fixme: remove!
      half3 originalNormalMap = unpack_ag_normal(packedNormalMap);
      half3 normalMap = originalNormalMap;
      half3 worldNormal = perturb_normal_precise( normalMap, normalize(input.normal.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy );
      half metalness = packedNormalMap.b;
      #if APPLY_WOUNDS
        apply_burning_and_wounds(input, character_micro_detail_layer, worldNormal, diffuseColor.rgb, smoothness, reflectance);
      #endif
    ##else
      half3 worldNormal = normalize(input.normal.xyz);
      half metalness = 0;
      half smoothness = 0;//there is nothing good here!
    ##endif

    init_material(gbuffer, SHADING_NORMAL);

    init_smoothness(gbuffer, smoothness);
    init_normal(gbuffer, worldNormal);

    ##if use_alpha_for_emission_mask == yes
    half emissionMask = diffuseColor.a;
    ##else
    half emissionMask = 1;
    ##endif

    float4 emissiveColor;
    float emissionAlbedoMult;
    get_emissive_parameters(emissiveColor, emissionAlbedoMult);

    FLATTEN
    if (emissiveColor.a < 0)
      emissionMask = 1 - emissionMask;

    FLATTEN
    if (emissionMask > 0)
    {
      #ifdef get_special_anim_params
        float emissionStrength = 0;
        get_special_anim_params(texCoord, time_scroll_param, diffuseColor, emissionStrength);
      #endif
      float emissionMult = 1.0f;
      FLATTEN
      #if OVERRIDE_NIGHT_SUN_COS
        if (real_skies_sun_light_dir.z >= NIGHT_SUN_COS  && get_nightly() > 0)
      #else
        if (sun_color_0.r >= 0.1 && get_nightly() > 0)
      #endif
      {
        emissionMult =  0.0f;
      }
      init_material(gbuffer, SHADING_SELFILLUM);
      init_emission(gbuffer, RemoveSRGBCurve_Fast(emissionMask).x * min(abs(emissiveColor.a), MAX_EMISSION) * emissionMult);
      init_emission_color(gbuffer, half4(emissiveColor.rgb, emissionAlbedoMult));
    }
    init_albedo(gbuffer, diffuseColor.rgb);
    init_dynamic(gbuffer,IS_DYNAMIC);
    init_order(gbuffer, GBUFFER_ORDER_DYNAMIC);
    init_auto_motion_vector(gbuffer, FORCE_AUTO_MOTION_VECTOR);
  #ifdef MOTION_VECTORS_ENABLED
    float3 motion = encode_motion_vector( input.out_pos, input.out_pos_prev );
    init_motion_vector(gbuffer, motion);
  #endif
    return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
  }
}
endmacro

macro EMISSIVE_PS()
  supports global_const_block;
  USE_PIXEL_TANGENT_SPACE()
  WRITE_GBUFFER()
  USE_EMISSIVE_ANIMCHAR_DYNMAT_PARAMS()
  EMISSIVE_PS_PRESHADER()
  EMISSIVE_PS_BODY()
  compile("target_ps", "simple_ps");
endmacro
