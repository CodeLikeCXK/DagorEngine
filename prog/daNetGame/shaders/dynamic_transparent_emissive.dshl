include "dynamic_trans_inc.dshl"
include "gbuffer.dshl"

shader dynamic_transparent_emissive
{
  ENABLE_ASSERT(ps)
  DYNAMIC_BLOCK_TRANS()
  if (dyn_model_render_pass == render_to_depth)
  {
    dont_render;
  }

  blend_src = one;  blend_dst = isa;
  z_write = false;

  texture tex = material.texture.diffuse;
  render_trans;

  channel float3 pos = pos;
  channel color8 norm = norm unsigned_pack;
  channel float2 tc[0] = tc[0];

  if (two_sided)
  {
    cull_mode = none;
  }

  static int num_bones = 0;
  interval num_bones: no_bones<1, four_bones;

  if (num_bones != no_bones)
  {
    channel color8 tc[4] = extra[0];
    channel color8 tc[5] = extra[1];
  }

  INIT_OPTIONAL_SKINNING()
  INIT_SKY_DIFFUSE_BASE(vs)
  USE_SKY_DIFFUSE_BASE(vs)

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 texcoord_lighting    : TEXCOORD0;
    };
  }

  hlsl(vs) {
    struct VsInput
    {
      float3 pos                  : POSITION;
      float4 normal               : NORMAL;
      float2 texcoord             : TEXCOORD0;
      INIT_BONES_VSINPUT(TEXCOORD4, TEXCOORD5)
    };
  }

  OPTIONAL_SKINNING_SHADER()
  USE_UNPACK_UNIT_VECTOR_VS()
  hlsl(vs) {
    VsOutput transp_emissive_vs(VsInput input)
    {
      VsOutput output;

      float3 eyeToPoint;
      float3 worldDu;
      float3 worldDv;
      float3 worldNormal;
      float3 localNormal = unpack_unit_vector(input.normal.xyz);

      float3 localDu = float3(1,0,0), localDv = float3(1,0,0);
      instance_skinning(
        input,
        input.pos,
        localNormal,
        localDu,
        localDv,
        eyeToPoint,
        output.pos,
        worldNormal,
        worldDu,
        worldDv);

      output.texcoord_lighting.xy = input.texcoord;
      output.texcoord_lighting.z = luminance(GetSkySHDiffuse(normalize(worldNormal)));

      return output;
    }
  }
  compile("target_vs", "transp_emissive_vs");

  USE_HDR(ps)
  static float transparency_mul = 1;
  static float emission = 0;
  (ps) {
    emission__transparency_mul@f2 = (emission, transparency_mul, 0 ,0);
    diffuse_tex@static = tex;
  }

  hlsl(ps) {

    float4 transp_emissive_ps(VsOutput input) : SV_Target0
    {
      half4 diffuseColor = tex2DBindless(get_diffuse_tex(), input.texcoord_lighting.xy);
      diffuseColor.a *= get_emission__transparency_mul().y;
      diffuseColor.rgb *= lerp(1, MAX_EMISSION, get_emission__transparency_mul().x) * input.texcoord_lighting.z;
      return float4(pack_hdr(diffuseColor.rgb), diffuseColor.a);
    }
  }

  compile("target_ps", "transp_emissive_ps");
}