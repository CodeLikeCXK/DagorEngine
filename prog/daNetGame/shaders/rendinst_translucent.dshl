include "psh_derivate.dshl"
include "psh_tangent.dshl"
include "rendinst_inc.dshl"
include "rendinst_opaque_inc.dshl"
include "rendinst_voxelize_albedo_inc.dshl"
include "vertex_density_overlay_inc.dshl"
include "normaldetail.dshl"
include "character_micro_detail.dshl"

shader rendinst_translucent
{
  ENABLE_ASSERT(ps)

  VERTEX_DENSITY_INIT_VS()
  VERTEX_DENSITY_WRITE()

  if (compatibility_mode == compatibility_mode_on)
  {
    hlsl {
      #define SPECULAR_DISABLED 1
      #define BRDF_DIFFUSE DIFFUSE_LAMBERT
      #define USE_SSS_THIN 1
    }
  }

  if (rendinst_render_pass == rendinst_render_pass_grassify ||
      rendinst_render_pass == rendinst_render_pass_to_heightmap ||
      rendinst_render_pass == rendinst_render_pass_impostor_color ||
      rendinst_render_pass == rendinst_render_pass_impostor_shadow)
  {
    dont_render;
  }

  texture tex = material.texture.diffuse;
  texture normal = material.texture[2];

  channel float3 pos = pos;
  channel color8 norm = norm unsigned_pack;
  channel float2 tc[0] = tc[0];

  // @NOTE: this could be replaced/augmented with a configurable color, but that would require gbuffer fromat changes.
  //        Or, maybe we could pack some coarse color palette into the 5 bits allocated for the profile?
  static int profile = 0;
  (ps) { profile@i1 = profile; }

  static float translucency_override = -1.0;
  interval translucency_override: off < 0.0, on;

  SETUP_CHARACTER_MICRODETAIL()

  ENABLE_MULTI_DRAW(
    rendinst_render_pass == rendinst_render_pass_to_shadow ||
    rendinst_render_pass == rendinst_render_pass_depth)

  RENDINST_BLOCK()
  RI_VOXELIZE_ALBEDO()
  RENDINST_INSTANCING()

  NO_DYNSTCODE()

  if (translucency_override == on)
  {
    (ps) { translucency_override@f1 = translucency_override; }
  }

  USE_CHARACTER_MICRODETAIL()

  if (rendinst_render_pass == rendinst_render_pass_to_shadow)
  {
    hlsl {
      struct VsOutput
      {
        VS_OUT_POSITION(pos)
        #if defined(VSOUT_DRAW_ID)
          VSOUT_DRAW_ID
        #endif
      };
    }
    hlsl(vs) {
      INSTANCING_BUFFERS
      struct VsInput
      {
        float3 pos : POSITION;
      };

      VsOutput simple_vs(VsInput input HW_USE_INSTANCE_ID)
      {
        VsOutput output;

        float3 localNormal = 1;
        float3 localPos = input.pos;
        VB_PERFORM_INSTANCING

        output.pos = mulPointTm(worldPos + camera_base_offset, globtm);

        return output;
      }
    }
    compile("ps_null", "rendinst_render_depth_black_ps");
  }
  else
  {
    hlsl {
      struct VsOutput
      {
        PRECISE VS_OUT_POSITION(pos)
      ##if rendinst_render_pass != rendinst_render_pass_depth
        float4 normal_ao       : TEXCOORD0;
      ##endif
        float4 pointToEye      : TEXCOORD1;
      ##if (rendinst_render_pass != rendinst_render_pass_depth)
        float3 diffuseTexcoord : TEXCOORD2;
      ##endif
        float3 localPos        : TEXCOORD4;
        #if defined(VSOUT_DRAW_ID)
          VSOUT_DRAW_ID
        #endif
      };
    }

    hlsl(vs) {
      INSTANCING_BUFFERS

      struct VsInput
      {
        float3 pos             : POSITION;
      ##if (rendinst_render_pass != rendinst_render_pass_depth)
        float4 normal_ao       : NORMAL;
        float2 diffuseTexcoord : TEXCOORD0;
      ##endif
      };

      VsOutput simple_vs(VsInput input HW_USE_INSTANCE_ID)
      {
        VsOutput output;

        #if SET_UP_MULTIDRAW
          INIT_MULTIDRAW(output);
          SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET);
        #endif

        float3 localNormal = 1;
      ##if (rendinst_render_pass != rendinst_render_pass_depth)
        localNormal = normalize(BGR_SWIZZLE(input.normal_ao.xyz)*2-1);
      ##endif

        float3 localPos = input.pos;
        output.localPos = localPos;

        VB_PERFORM_INSTANCING

        float3 pointToEye = world_view_pos-worldPos;

        output.pos = mulPointTm(worldPos + camera_base_offset, globtm);
      ##if rendinst_render_pass != rendinst_render_pass_depth
        output.normal_ao = float4(worldNormal.xyz, input.normal_ao.a);
      ##endif
        output.pointToEye = pointToEye.xyzz;

      ##if (rendinst_render_pass != rendinst_render_pass_depth)
        output.diffuseTexcoord.xyz = float3(input.diffuseTexcoord, 0.0001);
      ##endif

        writeVertexDensityPos(output.pos);

        return output;
      }
    }

    if (rendinst_render_pass != rendinst_render_pass_depth)
    {
      USE_PIXEL_TANGENT_SPACE()
      WRITE_GBUFFER()

      (ps) {
        diffuse_tex@static = tex;
        normal_tex@static = normal;
      }

      hlsl(ps) {
        #if VOXELIZE_ALBEDO_PASS
        void simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
        #else
        GBUFFER_OUTPUT simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
        #endif
        {
          #if SET_UP_MULTIDRAW
            SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
          #endif
          #ifdef VOXELIZE_DISCARD_PRIM
            VOXELIZE_DISCARD_PRIM
          #endif
          #ifndef IS_DYNAMIC
            #define IS_DYNAMIC 0
          #endif

          float4 screenpos = GET_SCREEN_POS(input.pos);

          half4 diffuseColor = tex2DBindless(get_diffuse_tex(), input.diffuseTexcoord.xy);
          input.normal_ao.xyz = MUL_VFACE(input.normal_ao.xyz);

          UnpackedGbuffer gbuffer;
          init_gbuffer(gbuffer);

          half4 packedNormalMap = tex2DBindless(get_normal_tex(), input.diffuseTexcoord.xy);

          half smoothness = packedNormalMap.r;
          half3 normalMap = unpack_ag_normal(packedNormalMap);
          half3 worldNormal = perturb_normal(normalMap, normalize(input.normal_ao.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy);

        ##if translucency_override == on
          half translucency = get_translucency_override();
        ##else
          half translucency = packedNormalMap.b;
        ##endif

          if (character_micro_detail_layer >= 0)
          {
            half reflectance = 0.0; // modified with detail, but the value is not used in apply_character_micro_detail
            apply_character_micro_detail(
              sample_character_micro_detail(input.diffuseTexcoord.xy * get_character_micro_detail_scale().xy, character_micro_detail_layer),
              diffuseColor.rgb,
              normalMap,
              reflectance,
              smoothness);
          }

          init_ao(gbuffer, input.normal_ao.a);
          init_translucency(gbuffer, translucency);

          // @NOTE: if there are more than two profiles, this should be unhardcoded.
          //        Currently it's: (-inf, 0] : neutral, [1, inf) : foliage
          init_material(gbuffer, get_profile() < 1 ? SHADING_SUBSURFACE : SHADING_FOLIAGE);
          init_sss_profile(gbuffer, get_profile() < 1 ? SSS_PROFILE_NEUTRAL_TRANSLUCENT : 0);

          init_smoothness(gbuffer, smoothness);
          init_normal(gbuffer, worldNormal);
          init_albedo(gbuffer, diffuseColor.rgb);

        #if VOXELIZE_ALBEDO_PASS
          float3 worldPos = world_view_pos - input.pointToEye.xyz;
          WRITE_SCENE25D_VOXEL_DATA(worldPos, gbuffer.albedo.rgb, 0, 0);
        #else
          init_dynamic(gbuffer, IS_DYNAMIC);
          init_order(gbuffer, GBUFFER_ORDER_DYNAMIC);
          return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
        #endif
        }
      }

      compile("target_ps", "simple_ps");
    }
    else
    {
      compile("ps_null", "rendinst_render_depth_black_ps");
    }
  }

  COMPILE_RI_VS_TARGET("simple_vs")
}