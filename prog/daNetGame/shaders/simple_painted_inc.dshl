include "paint_details_inc.dshl"
include "const_color_inc.dshl"

macro INIT_SIMPLE_PAINTED()
  static float paint_details = 1.0; // paint_strength
  static float paint_white_point = 0.5;
  static float paint_black_point = 0.1;
  static float paint_mult = 1;
  static int paint_palette_row = 1;
  static int palette_index = 1;
  static int use_alpha_as_mask = 0;

  (vs) { paint_palette_row_index@f2 = (paint_palette_row,palette_index,0,0); }
  (ps) {
    paint_scale_bias_mult_details@f4 = (
      1 / (paint_white_point - paint_black_point),
      -paint_black_point / (paint_white_point - paint_black_point),
      paint_mult, paint_details);

      use_alpha_as_mask@i1 = use_alpha_as_mask;
  }

  INIT_CONST_COLOR_OVERRIDES(paint_const_color)
endmacro

// If use_translucency is set to true, translucent_inc.dshl:INIT_TRANSLUCENCY_SETTING(ps) should be called before
macro SIMPLE_PAINTED_PS(is_writing_gbuffer, use_translucency) //not for depth or shadow, for them use RENDER_TO_SHADOW_PS()
  USE_PIXEL_TANGENT_SPACE()
  if (is_writing_gbuffer)
  {
    WRITE_GBUFFER()
  }
  (ps) {
    diffuse_tex@static = tex;
    normal_tex@static = normal;
  }
  USE_CHARACTER_MICRODETAIL()
  USE_CONST_COLOR_OVERRIDES()
  ENABLE_ASSERT(ps)

  hlsl(ps) {
    #if VOXELIZE_ALBEDO_PASS
      void simple_painted_ps(VsOutput input)
    #else
      GBUFFER_OUTPUT simple_painted_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
    #endif
    {
      #if SET_UP_MULTIDRAW
        INIT_MULTIDRAW(input);
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      #ifdef VOXELIZE_DISCARD_PRIM
        VOXELIZE_DISCARD_PRIM
      #endif
      #ifndef IS_DYNAMIC
        #define IS_DYNAMIC 0
      #endif
      #ifndef FORCE_AUTO_MOTION_VECTOR
        #define FORCE_AUTO_MOTION_VECTOR 0
      #endif

      float2 texCoord = input.diffuseTexcoord.xy;
      half4 diffuseColor = tex2DBindless(get_diffuse_tex(), texCoord);
      ##if atest != atestOff
      clip (diffuseColor.a-0.5);
      ##endif

      // note: paint_const_color overrides overlay map color too!
      float3 colorMul = get_color_mul(input, get_paint_const_color());

      half mask = luminance(diffuseColor.rgb);
      if (get_use_alpha_as_mask())
      {
        mask = diffuseColor.a;
      }

      half details = get_paint_scale_bias_mult_details().w * saturate(mask * get_paint_scale_bias_mult_details().x + get_paint_scale_bias_mult_details().y);
      diffuseColor.rgb  = lerp(diffuseColor.rgb, diffuseColor.rgb * colorMul * get_paint_scale_bias_mult_details().z, details);

      float3 worldPos = world_view_pos - input.pointToEye.xyz;
      #if VOXELIZE_ALBEDO_PASS
        WRITE_SCENE25D_VOXEL_DATA(worldPos, diffuseColor.rgb, 0, 0);
      #else
        input.normal.xyz = MUL_VFACE(input.normal.xyz);
        ##if normal != NULL
          half4 packedNormalMap = tex2DBindless(get_normal_tex(), texCoord);
          half3 normalMap = unpack_ag_normal(packedNormalMap);
          half smoothness = packedNormalMap.r;//there is nothing good here!
          half metalnessOrTranslucency = packedNormalMap.b;
        ##else
          half3 normalMap = half3(0,0,1);
          half smoothness = 0;//there is nothing good here!
          half metalnessOrTranslucency = 0;
        ##endif

        ##if use_translucency
          if (SHOULD_USE_TRANLUCENCY && SHOULD_USE_OVERRIDEN_TRANLUCENCY)
          {
            metalnessOrTranslucency = TRANSLUCENCY_OVERRIDE;
          }
        ##endif

        half reflectance = 0.5;
        half ao = 1;
        BRANCH
        if (character_micro_detail_layer>=0)
        {
          apply_character_micro_detail(sample_character_micro_detail(input.diffuseTexcoord.xy*get_character_micro_detail_scale().xy, character_micro_detail_layer),
                                  diffuseColor.rgb, normalMap, reflectance, smoothness);
        }
        half3 worldNormal = perturb_normal_precise(normalMap, normalize(input.normal.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy);
        apply_wetness_by_microdetail(character_micro_detail_layer, worldPos, diffuseColor.rgb, worldNormal, reflectance, smoothness, ao);

        UnpackedGbuffer gbuffer;
        init_gbuffer(gbuffer);

        ##if use_translucency
        if (SHOULD_USE_TRANLUCENCY)
        {
          init_translucency(gbuffer, metalnessOrTranslucency);
          init_material(gbuffer, SHADING_SUBSURFACE);
          init_sss_profile(gbuffer, SSS_PROFILE_NEUTRAL_TRANSLUCENT);
        }
        else
        ##endif
        {
          init_metalness(gbuffer, metalnessOrTranslucency);
          init_material(gbuffer, SHADING_NORMAL);
        }

        init_ao(gbuffer, ao);
        init_smoothness(gbuffer, smoothness);
        init_reflectance(gbuffer, reflectance);
        init_normal(gbuffer, worldNormal);
        init_albedo(gbuffer, diffuseColor.rgb);

        init_dynamic(gbuffer,IS_DYNAMIC);
        init_order(gbuffer, GBUFFER_ORDER_STATIC);
        init_auto_motion_vector(gbuffer, FORCE_AUTO_MOTION_VECTOR);
        #ifdef MOTION_VECTORS_ENABLED
          float3 motion = encode_motion_vector( input.out_pos, input.out_pos_prev );
          init_motion_vector(gbuffer, motion);
        #endif
        #ifdef PLOD_PS_GEN
          PLOD_PS_GEN(input, pack_gbuffer(gbuffer), normalMap)
        #endif
        return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
      #endif
    }
  }
  compile("target_ps", "simple_painted_ps");
endmacro