include "dynamic_trans_inc.dshl"
include "normaldetail.dshl"
include "glass.dshl"
include "rt_glass_apply.dshl"
include "glass_icon_render_inc.dshl"
include "camera_in_camera.dshl"

include "indoor_light_probes.dshl"

include "gbuffer_to_temperature.dshl"

shader dynamic_simple_glass, dynamic_refraction, dynamic_simple_transparent
{
  IMPORT_ON_TOP_CAMERA_IN_CAMERA(ps)
  ENABLE_ASSERT(ps)
  if (dyn_model_render_pass != render_pass_normal)
  {
    dont_render;
  }
  SUPPORT_MULTIDRAW(false)
  USE_THERMAL_SIGNATURE()
  DYNAMIC_BLOCK_TRANS()
  hlsl {
    #define IS_DYNAMIC_GLASS 1
  }
  if (shader == dynamic_refraction)
  {
    INIT_REFRACTION_GLASS()
  }
  else
  {
    INIT_SIMPLE_GLASS()
    INIT_GLASS_HOLE_MASK(ps)
  }

  if (gi_quality != off)
  {
    USE_IN_FRUSTUM_GI(ps)
    hlsl {
      #define GLASS_USE_GI 1
    }
  }
  USE_BRUNETON_FOG()
  REFRACTION_USE()

  static int num_bones = 0;
  interval num_bones: no_bones<1, four_bones;

  if (num_bones != no_bones)
  {
    channel color8 tc[4] = extra[0];
    channel color8 tc[5] = extra[1];
  }
  INIT_OPTIONAL_SKINNING()

  hlsl(vs) {
    struct VsInput
    {
      float3 pos                  : POSITION;
      float4 normal               : NORMAL;
      float2 texcoord             : TEXCOORD0;
      INIT_BONES_VSINPUT(TEXCOORD4, TEXCOORD5)
    };
  }
  OPTIONAL_SKINNING_SHADER()
  USE_UNPACK_UNIT_VECTOR_VS()

  if (render_to_icon == yes && glass_normal_pass != no) {
    dont_render;
  }
  INIT_AND_USE_GLASS_ICON_RENDER(ps)
  hlsl(vs) {
    VsOutput glass_vs(VsInput input HW_USE_INSTANCE_ID)
    {
      VsOutput output;
      #if SET_UP_MULTIDRAW
        INIT_MULTIDRAW(output);
        SET_DRAW_CALL_ID(get_draw_id() & MATERIAL_OFFSET_MASK);
      #endif

      // unpack texcoord0
      // Skinning.

      float3 eyeToPoint;
      float3 worldDu;
      float3 worldDv;
      float3 worldNormal;
      float3 localNormal = unpack_unit_vector(input.normal.xyz);

      float3 localDu = float3(1,0,0), localDv = float3(1,0,0);
      instance_skinning(
        input,
        input.pos,
        localNormal,
        localDu,
        localDv,
        eyeToPoint,
        output.pos,
        worldNormal,
        worldDu,
        worldDv);

      worldNormal = normalize(worldNormal);
      float3 pointToEye = -eyeToPoint;

      output.texcoord.xy = input.texcoord;
      output.pointToEye.xyz = pointToEye;
      output.normal.xyz = worldNormal;

      half3 fogMul, fogAdd;
      ##if render_to_icon == no
        get_fog(pointToEye, fogMul, fogAdd);
      ##else
        fogMul = 1;
        fogAdd = 0;
      ##endif
      get_fog(pointToEye, fogMul, fogAdd);
      output.clipPos = output.pos;
      output.fogMul = fogMul;
      output.fogAdd = fogAdd;

      return output;
    }
  }
  compile("target_vs", "glass_vs");
  if (render_to_icon == no)
  {
    USE_CSM_SHADOW_DEF_NUM()
    hlsl (ps) {
      #define USE_CSM_SHADOWS 1
      float getCSMShadow(float3 pointToEye)
      {
        return get_csm_shadow(pointToEye).x;
      }
    }
  }
  if (shader == dynamic_simple_transparent)
  {
    static float premultipled_alpha = 1;
    (ps) { premultipled_alpha@f2 = (max(0, 1-premultipled_alpha), premultipled_alpha,0,0); }
    hlsl {
      #define NO_SPECULAR 1
      #define FIXED_ENVI_BRDF 0
      #define CAN_BE_PREMULTIPLED_ALPHA 1
    }
    static int transparent_mode = 0;
    interval transparent_mode: semi_trasparent<1, transparent;
    if (transparent_mode == transparent)
    {
      blend_src=sa;// blend_src=one; in semi_trasparent version
      blend_dst=isa;
    }
  }

  if (render_to_icon == yes)
  {
    if (shader == dynamic_refraction)
    {
      blend_src=sa;
      blend_dst=isa;
    }
    else
    {
      blend_asrc = zero;
      blend_adst = one;
    }
  }
  RT_GLASS_APPLY(ps)
  GLASS_PS()
}
