include "clipmap_compression_common.dshl"

int uncompressed_clipmap_buffer_srgb_mode = 0;
interval uncompressed_clipmap_buffer_srgb_mode : native < 1, software;

shader direct_cache_bypass
{
  cull_mode = none;
  z_test = false;
  supports global_frame;

  DIRECT_CACHE_BYPASS_VS()

  (ps) {
    cache_buffer_tex_0@smp2d = cache_buffer_tex_0;
    cache_buffer_tex_1@smp2d = cache_buffer_tex_1;
    cache_buffer_tex_2@smp2d = cache_buffer_tex_2;
  }
  hlsl(ps) {
    #include <pixelPacking/ColorSpaceUtility.hlsl>

    struct MRT_OUTPUT {
    ##if mobile_simplified_materials == no
      float4 cache0:SV_Target0;
      float2 cache1:SV_Target1;
      float4 cache2:SV_Target2;
    ##else
      float4 cache0:SV_Target0;
      float2 cache1:SV_Target1;
    ##endif
    };

    MRT_OUTPUT bypass_ps(VsOutput IN)
    {
      float4 tc = float4(IN.texcoord.xy,0,0);
      float4 buffer0 = tex2Dlod(cache_buffer_tex_0, tc);
      float4 buffer1 = tex2Dlod(cache_buffer_tex_1, tc);
      float4 buffer2 = tex2Dlod(cache_buffer_tex_2, tc);
      MRT_OUTPUT ret;
      ##if uncompressed_clipmap_buffer_srgb_mode == software
        ret.cache0 = float4(ApplySRGBCurve(buffer0.xyz), buffer1.b);
      ##else
        ret.cache0 = float4(buffer0.xyz, buffer1.b);
      ##endif

      ##if mobile_simplified_materials == yes
        ret.cache0.w = buffer2.z;
        ret.cache1 = buffer1.xy;
      ##else
        ret.cache1 = buffer1.xy;
        float2 ao_emission = saturate(float2(buffer2.x, buffer2.x - 0.5) * 2.0);
        ret.cache2 = float4(ao_emission.x, buffer2.y, ao_emission.y, buffer2.z);
      ##endif

      return ret;
    }
  }
  compile( "target_vs", "bypass_vs" );
  compile( "target_ps", "bypass_ps" );
}

shader cache0_compressor, cache1_compressor, cache2_compressor
{
  supports global_frame;
  supports land_mesh_prepare_clipmap;
  if (shader == cache0_compressor)
  {
    (ps) { src_tex@smp2d = cache_buffer_tex_0; }
    INIT_BC_COMPRESSION()
    USE_BC3_COMPRESSION(ps)
    if (mobile_simplified_materials == yes) {
      (ps) { src_detail_tex@smp2d = cache_buffer_tex_2; }
    } else {
      (ps) { src_smoothness_tex@smp2d = cache_buffer_tex_1; }
    }
  } else if (shader == cache1_compressor)
  {
    (ps) { src_tex@smp2d = cache_buffer_tex_1; }
    INIT_BC_COMPRESSION()
    USE_BC5_COMPRESSION(ps)
  } else
  {
    (ps) { src_tex@smp2d = cache_buffer_tex_2; }
    INIT_BC_COMPRESSION()
    USE_BC3_COMPRESSION(ps)
    INIT_BC_COMPRESSION_GET_HELPER()
  }

  //PS4_DEF_TARGET_FMT_32_GR() use for BC1/BC4
  PS4_DEF_TARGET_FMT_32_ABGR()

  hlsl(ps)
  {
    #define gatherTexels(channel, attr, tex) \
      block = tex.Gather##channel(tex##_samplerstate, texTc).wzxy;\
      texels[0+0*4].attr = block.x;texels[1+0*4].attr = block.y;texels[0+1*4].attr = block.z;texels[1+1*4].attr = block.w;\
      block = tex.Gather##channel(tex##_samplerstate, texTc, int2(2,0)).wzxy;\
      texels[2+0*4].attr = block.x;texels[3+0*4].attr = block.y;texels[2+1*4].attr = block.z;texels[3+1*4].attr = block.w;\
      block = tex.Gather##channel(tex##_samplerstate, texTc, int2(0,2)).wzxy;\
      texels[0+2*4].attr = block.x;texels[1+2*4].attr = block.y;texels[0+3*4].attr = block.z;texels[1+3*4].attr = block.w;\
      block = tex.Gather##channel(tex##_samplerstate, texTc, int2(2,2)).wzxy;\
      texels[2+2*4].attr = block.x;texels[3+2*4].attr = block.y;texels[2+3*4].attr = block.z;texels[3+3*4].attr = block.w;

    uint4 bc_compressor_ps( VsOutput input ) : SV_Target
    {
      half4 texels[16];
      half4 min_color, max_color;

      ##if shader == cache1_compressor
        float2 texTc = input.tex.xy+input.tex.zw; // sample in all directions
        float4 block;

        gatherTexels(Red, x, src_tex);
        gatherTexels(Green, y, src_tex);

        find_base_colors( texels, min_color, max_color );
        return pack_bc5_block( texels, min_color, max_color );
      ##elif shader == cache2_compressor
        get_texels( input.tex, texels, 0 );
        UNROLL
        for (int i = 0; i < 16; ++i)
        {
          float2 ao_emission = saturate(float2(texels[i].x, texels[i].x - 0.5) * 2.0);
          texels[i].x = ao_emission.x;
          texels[i].w = texels[i].z;
          texels[i].z = ao_emission.y;
          texels[i].rgb = saturate(texels[i].rgb - float3(4./255., 2./255., 4./255.)); // Mimic the error of a fixed BC3 encoder bug for which artists have adapted.
        }

        ##if find_base_colors_with_pca
          find_base_colors_pca_rgb( texels, min_color, max_color );
          inset_rgb_base_colors( min_color, max_color );
        ##else
          find_base_colors( texels, min_color, max_color );
          correlate_rgb_base_colors( texels, min_color, max_color );
          inset_rgb_base_colors( min_color, max_color );
        ##endif
        return pack_bc3_block( texels, min_color, max_color );
      ##elif shader == cache0_compressor
        //##if hardware.dx11 || hardware.vulkan || hardware.metal
        //int2 texTCi  = int2(input.tex.xy);
        //##else
        float2 texTc = input.tex.xy; // sample in all directions
        float2 src_texel_size = input.tex.zw;
        //##endif
        #define GET_TEXEL(x, y) {\
          float2 tc = texTc + float2( x, y ) * src_texel_size; texels[y * 4 + x] = tex2D( src_tex, tc ); }
        GET_TEXEL(0,0);GET_TEXEL(1,0);GET_TEXEL(2,0);GET_TEXEL(3,0);
        GET_TEXEL(0,1);GET_TEXEL(1,1);GET_TEXEL(2,1);GET_TEXEL(3,1);
        GET_TEXEL(0,2);GET_TEXEL(1,2);GET_TEXEL(2,2);GET_TEXEL(3,2);
        GET_TEXEL(0,3);GET_TEXEL(1,3);GET_TEXEL(2,3);GET_TEXEL(3,3);
        #undef GET_TEXEL
        texTc += src_texel_size;

        float4 block;
      ##if mobile_simplified_materials == yes
        gatherTexels(Blue, w, src_detail_tex);
      ##else
        gatherTexels(Blue, w, src_smoothness_tex);
      ##endif

        UNROLL
        for (int i = 0; i < 16; ++i)
          texels[i].rgb = saturate(texels[i].rgb - float3(4./255., 2./255., 4./255.)); // Mimic the error of a fixed BC3 encoder bug for which artists have adapted.

        ##if find_base_colors_with_pca
          find_base_colors_pca_rgb( texels, min_color, max_color );
        ##else
          find_base_colors( texels, min_color, max_color );
          correlate_rgb_base_colors( texels, min_color, max_color );
        ##endif
        inset_rgb_base_colors( min_color, max_color );
        return pack_bc3_block( texels, min_color, max_color );
      ##endif
    }
  }

  compile( "target_vs", "bc_compressor_vs" );
  compile( "target_ps", "bc_compressor_ps" );
}

shader cache0_etc2_compressor, cache1_etc2_compressor, cache2_etc2_compressor
{
  if (!hardware.metal && !hardware.vulkan)
  {
    dont_render;
  }

  if (shader == cache0_etc2_compressor)
  {
    (cs) { src_tex@smp2d = cache_buffer_tex_0; }
    if (mobile_simplified_materials == yes) {
      (cs) { src_detail_tex@smp2d = cache_buffer_tex_2; }
    } else {
      (cs) { src_smoothness_tex@smp2d = cache_buffer_tex_1; }
    }
  } else if (shader == cache1_etc2_compressor)
  {
    (cs) { src_tex@smp2d = cache_buffer_tex_1; }
  } else
  {
    (cs) { src_tex@smp2d = cache_buffer_tex_2; }
  }

  INIT_ETC2_COMPRESSION()

  hlsl(cs)
  {
    float4 tex_size__mip_zero : register(c51);

    ##if hardware.vulkan
    [numthreads( 8, 8, 1 )]
    ##else
    [numthreads( 4, 4, 1 )]
    ##endif
    void bc_compressor_cs(uint3 dtId : SV_DispatchThreadID)
    {
      float4 texels[16];

      float2 uv = dtId.xy * 4 * tex_size__mip_zero.xy;

    ##if shader == cache1_etc2_compressor
      #define GET_TEXEL(xx, yy) \
        texels[xx+yy*4].rg = tex2Dlod(src_tex, float4(uv + uint2(xx, yy)*tex_size__mip_zero.xy, 0, 0)).rg;
    ##elif shader == cache0_etc2_compressor
      ##if mobile_simplified_materials == yes
        #define SRC_CACHE_TEX src_detail_tex
      ##else
        #define SRC_CACHE_TEX src_smoothness_tex
      ##endif
      #define GET_TEXEL(xx, yy) \
        texels[xx+yy*4].rgb = tex2Dlod(src_tex, float4(uv + uint2(xx, yy)*tex_size__mip_zero.xy, 0, 0)).rgb; \
        texels[xx+yy*4].a = tex2Dlod(SRC_CACHE_TEX, float4(uv + uint2(xx, yy)*tex_size__mip_zero.xy, 0, 0)).b;
    ##else
        #define GET_TEXEL(xx, yy) \
        { float4 temp = tex2Dlod(src_tex, float4(uv + uint2(xx, yy)*tex_size__mip_zero.xy, 0, 0)).rgba; \
          texels[xx+yy*4].xz = saturate(float2(temp.x, temp.x - 0.5)*2.0); \
          texels[xx+yy*4].yw = temp.yz; \
        }
    ##endif

      GET_TEXEL(0, 0); GET_TEXEL(1, 0); GET_TEXEL(2, 0); GET_TEXEL(3, 0);
      GET_TEXEL(0, 1); GET_TEXEL(1, 1); GET_TEXEL(2, 1); GET_TEXEL(3, 1);
      GET_TEXEL(0, 2); GET_TEXEL(1, 2); GET_TEXEL(2, 2); GET_TEXEL(3, 2);
      GET_TEXEL(0, 3); GET_TEXEL(1, 3); GET_TEXEL(2, 3); GET_TEXEL(3, 3);

    ##if shader == cache0_etc2_compressor || shader == cache2_etc2_compressor
      compressedTexture[dtId.xy] = CompressBlock_ETC2_RGBA(texels);
    ##else
      compressedTexture[dtId.xy] = CompressBlock_ETC2_RG(texels);
    ##endif
    }
  }

  compile( "target_cs", "bc_compressor_cs" );
}
