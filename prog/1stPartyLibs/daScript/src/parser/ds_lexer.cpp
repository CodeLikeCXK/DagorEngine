#line 1 "ds_lexer.cpp"

#line 3 "ds_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define das_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer das_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define das_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer das_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define das_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer das_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define das_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string das_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define das_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes das_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define das_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer das_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define das_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer das_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define das_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state das_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define das_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer das_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define das_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state das_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define das_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state das_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define das_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack das_yyensure_buffer_stack
#endif

#ifdef yylex
#define das_yylex_ALREADY_DEFINED
#else
#define yylex das_yylex
#endif

#ifdef yyrestart
#define das_yyrestart_ALREADY_DEFINED
#else
#define yyrestart das_yyrestart
#endif

#ifdef yylex_init
#define das_yylex_init_ALREADY_DEFINED
#else
#define yylex_init das_yylex_init
#endif

#ifdef yylex_init_extra
#define das_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra das_yylex_init_extra
#endif

#ifdef yylex_destroy
#define das_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy das_yylex_destroy
#endif

#ifdef yyget_debug
#define das_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug das_yyget_debug
#endif

#ifdef yyset_debug
#define das_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug das_yyset_debug
#endif

#ifdef yyget_extra
#define das_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra das_yyget_extra
#endif

#ifdef yyset_extra
#define das_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra das_yyset_extra
#endif

#ifdef yyget_in
#define das_yyget_in_ALREADY_DEFINED
#else
#define yyget_in das_yyget_in
#endif

#ifdef yyset_in
#define das_yyset_in_ALREADY_DEFINED
#else
#define yyset_in das_yyset_in
#endif

#ifdef yyget_out
#define das_yyget_out_ALREADY_DEFINED
#else
#define yyget_out das_yyget_out
#endif

#ifdef yyset_out
#define das_yyset_out_ALREADY_DEFINED
#else
#define yyset_out das_yyset_out
#endif

#ifdef yyget_leng
#define das_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng das_yyget_leng
#endif

#ifdef yyget_text
#define das_yyget_text_ALREADY_DEFINED
#else
#define yyget_text das_yyget_text
#endif

#ifdef yyget_lineno
#define das_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno das_yyget_lineno
#endif

#ifdef yyset_lineno
#define das_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno das_yyset_lineno
#endif

#ifdef yyget_column
#define das_yyget_column_ALREADY_DEFINED
#else
#define yyget_column das_yyget_column
#endif

#ifdef yyset_column
#define das_yyset_column_ALREADY_DEFINED
#else
#define yyset_column das_yyset_column
#endif

#ifdef yywrap
#define das_yywrap_ALREADY_DEFINED
#else
#define yywrap das_yywrap
#endif

#ifdef yyget_lval
#define das_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval das_yyget_lval
#endif

#ifdef yyset_lval
#define das_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval das_yyset_lval
#endif

#ifdef yyalloc
#define das_yyalloc_ALREADY_DEFINED
#else
#define yyalloc das_yyalloc
#endif

#ifdef yyrealloc
#define das_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc das_yyrealloc
#endif

#ifdef yyfree
#define das_yyfree_ALREADY_DEFINED
#else
#define yyfree das_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define das_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 255
#define YY_END_OF_BUFFER 256
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[728] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       29,   29,    0,    0,    0,    0,  256,  255,   28,   26,
       24,   28,   25,   28,   28,   28,   23,   22,   21,   20,
       16,   23,   17,   12,   13,   12,   12,   12,    9,    8,
       31,   30,   29,  254,  246,  253,  245,  254,  140,  254,
      254,  254,  254,  254,  181,  180,  254,  254,  254,  254,
      254,  254,  167,  167,  254,  254,  254,  254,  254,  254,
      254,  139,  183,  254,  182,  254,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  185,  254,  184,   15,

       14,    0,   24,    0,    2,    3,    6,   19,   18,   11,
       10,   31,   29,  232,    0,  198,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  217,  221,  224,    0,    0,
        4,  216,  227,  213,    0,    0,    0,    0,  228,  214,
      211,  188,  172,    5,    7,  215,  173,  167,    0,  174,
      163,  165,    0,  167,  178,  163,  165,  186,  210,    0,
        0,    0,    0,  212,  236,  229,  197,  231,  241,  230,
      234,  209,  207,  208,    0,    0,    0,  139,  242,  243,
        0,  252,  226,  223,  139,  139,  139,  139,   97,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,   36,
      139,   87,   98,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  244,  225,  189,  222,    0,    0,   27,
        0,  196,  203,  202,  205,  199,  206,  200,  204,  201,
      218,  161,    0,    0,    0,    0,    0,    0,    0,    0,
      251,  249,  187,    0,  172,  176,    0,    0,  253,    0,
      166,  172,    0,  173,  177,    0,    0,  175,  164,  162,
      171,    0,    0,    0,  250,  248,  247,  235,  238,    0,

      191,    0,    0,  237,  233,  195,    0,    0,  220,  139,
      139,   44,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,   42,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,   34,  139,  139,  139,  139,
      139,  139,  119,  139,  139,  139,   47,  139,  107,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,   54,  139,
      139,  139,  139,  139,  139,  139,   49,  139,  139,  139,
      139,  139,  219,    0,    0,  154,  154,  160,  155,  158,
      157,  159,  156,    0,    0,    0,    0,    0,  172,    0,

        0,  172,  176,    0,    0,  173,  175,  179,    0,  171,
      169,  170,  170,    0,    0,    0,    0,  240,  192,  193,
        0,  239,  194,  139,  100,  139,  139,  111,  139,  139,
      112,  139,  139,   74,  139,  139,  139,  139,  139,  139,
      139,   38,   40,   53,  139,  139,  139,  139,  139,  139,
      139,  139,   59,  139,  139,  139,  139,  123,  124,  125,
      139,  120,  139,  139,  139,    0,    0,  139,  101,  139,
      139,  139,   76,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  109,  139,  106,
      126,  139,  139,  139,  139,    0,    0,  139,  113,  139,

      139,   43,  139,    0,  147,  153,  153,  148,  148,  151,
      151,  150,  150,  152,  152,  149,  149,    0,    0,  172,
      170,  168,    0,    0,  190,  139,   83,  139,  139,   65,
      104,  139,   52,   71,  139,  139,  139,   99,  139,  139,
      139,  110,  139,  139,  135,  139,  139,  139,  139,  139,
      121,  122,  139,   58,  139,    0,  139,  139,  139,  139,
      139,  139,  117,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,   82,   69,  139,  139,  139,  131,  132,
      133,  139,  128,  139,  139,  139,  139,    0,  139,   73,
       35,  103,    0,  146,  141,  144,  143,  145,  142,    0,

        0,    0,    0,  139,   45,  139,  139,  139,  139,  108,
      134,   81,  139,  139,  139,  136,  137,  138,  139,  139,
      139,  139,  139,  139,   67,    0,   46,   60,  139,  139,
      139,  139,   61,  139,  139,  139,  139,  102,   79,   90,
      139,   96,  114,   51,  139,  139,  129,  130,  139,   94,
       75,  118,    0,   48,  139,    0,  139,  139,   33,  139,
       85,  139,   41,  139,  139,  139,  139,   32,   95,  139,
      139,   62,  139,   91,  115,   55,  139,   64,  139,  139,
      139,   56,  139,  139,    0,   93,  139,   70,    0,   80,
      127,   72,   89,  139,   66,  139,   88,   86,   63,   78,

      139,  139,  139,  139,   57,  105,  139,  116,    1,  139,
       68,  139,   92,  139,   37,  139,  139,  139,  139,  139,
       84,   77,   39,  139,  139,   50,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   26,   28,   26,   29,   30,   31,
       32,   33,   34,   35,   36,   36,   36,   36,   37,   38,
       39,   39,   39,   39,   39,   40,   39,   39,   39,   39,
       39,   39,   39,   39,   41,   39,   39,   42,   39,   39,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   39,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    2,    3,    2,    2,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    1,    1,    1,    7,    7,    8,    9,   10,
       10,    9,    1,    1,    1,    1,   10,   11,    7,    7,
        7,    8,    7,    8,    9,    9,    9,    9,   12,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    9,    9,
        9,    9,    9,    1,    1,    1
    } ;

static const flex_int16_t yy_base[767] =
    {   0,
        0,    0,    0,    8,   15,   22,   27,   29, 1390, 1389,
       32,   36,   96,    0, 1388, 1387, 1389, 1394, 1394,   48,
     1394,   52,   58,   46, 1368,   28, 1394, 1394, 1394, 1394,
     1394,    2, 1394, 1394, 1394, 1394, 1367, 1371, 1394, 1394,
        0, 1394, 1380, 1394, 1394, 1394, 1394, 1352, 1394,   58,
      171, 1351,  163, 1338, 1394, 1394,   45,   59,  181,  157,
      184,  162,  239,   16,   61,  194,  160,   62,  155,  198,
      211,    0,  157,  245, 1394,  147,  237,  194,  174,  165,
      184,  226,  216,  252,   39, 1319,  151,  205,  252,  181,
      244,  259,  265,  222,  216, 1323, 1305,  282, 1394, 1394,

     1394,  330, 1394,  319, 1394, 1394,  234, 1394, 1394, 1394,
     1394,    0, 1373, 1394,  294, 1394, 1302,    0,    0,    0,
        0,    0,    0,    0,    0, 1394, 1344, 1394, 1363,  304,
     1394, 1394, 1394, 1394,  347,  340, 1329, 1328, 1394, 1394,
     1394, 1353,  403, 1394,  318, 1394,  444,  173,  352, 1394,
     1394,  344,    0,  342, 1394, 1317,  353, 1394, 1394,  402,
      344, 1325,  311, 1394,  331, 1394,  393, 1394, 1394, 1394,
      353, 1394, 1394, 1394,  386, 1294,  406,    0, 1394, 1394,
      416, 1394, 1394, 1336, 1301, 1314, 1316, 1299, 1297, 1295,
     1294, 1298, 1297, 1305,  336, 1308, 1295,  335, 1287,  376,

     1286, 1290, 1293,  268, 1289, 1285, 1288, 1287, 1280,    0,
     1283,  383,    0, 1292,  385, 1277, 1291, 1272, 1282,  256,
     1287, 1273, 1281, 1287, 1275,  387, 1286, 1285, 1284,  288,
     1282,  364, 1268, 1267, 1268,  382, 1277, 1278, 1261, 1268,
      407, 1257, 1270, 1394, 1394, 1394, 1290,  462,  455, 1394,
      456, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394,  375, 1309, 1308, 1307, 1306, 1305, 1304, 1300, 1311,
     1394, 1394, 1394,  483, 1394, 1394, 1259,  471, 1394,  474,
     1394,  476,  499, 1394, 1394, 1258,  515,  493, 1394, 1394,
      492, 1292, 1295, 1306, 1394, 1394, 1394, 1276, 1394,  552,

     1394,  560, 1287, 1394, 1274, 1394,  544, 1230, 1394, 1237,
     1238,    0, 1253, 1233, 1238, 1245, 1247, 1238, 1247, 1228,
     1227, 1227,  348, 1243, 1238, 1237, 1239, 1234, 1234, 1226,
      393, 1219, 1235, 1230, 1233,    0, 1230, 1227, 1217, 1219,
     1218, 1225,  546, 1210, 1221, 1223,  514, 1204,    0, 1212,
     1205, 1212, 1203, 1201, 1197, 1206, 1209, 1201, 1201, 1193,
     1192, 1200, 1193, 1192, 1189,  491, 1196, 1201,    0, 1194,
     1199, 1184, 1189, 1200, 1199, 1186,  574, 1194, 1180, 1185,
     1187, 1183, 1394,  574,  547, 1213, 1212,  412,  432,  517,
      525,  536,  540, 1224,  568, 1235,  607,  592,  569,  583,

      614, 1394, 1394, 1183,  622,  613, 1394, 1394, 1182,  565,
     1394,  594,  626, 1220,  569, 1231,  653, 1394, 1394, 1394,
     1230, 1394, 1394, 1167,    0, 1159, 1170,    0, 1172, 1170,
        0, 1169, 1158,    0, 1159, 1157, 1166, 1154, 1154, 1166,
     1160,    0,    0,    0, 1167, 1160, 1163, 1156, 1162, 1146,
     1145, 1146,    0, 1153, 1141, 1146, 1180,    0,    0,    0,
     1181,    0, 1156, 1145, 1151,  657, 1182, 1142,    0, 1151,
     1137, 1133,    0, 1148, 1139, 1142, 1125, 1126, 1135, 1126,
     1137, 1136, 1121, 1130, 1125, 1134, 1131,    0, 1130,  611,
      664, 1125, 1127, 1114, 1124,  674, 1158, 1128,    0, 1123,

     1122,    0, 1122, 1166, 1394, 1144, 1143, 1142, 1141, 1140,
     1139, 1138, 1137, 1136, 1135, 1134, 1133, 1145,  678,  655,
     1394, 1394, 1144, 1155, 1394, 1108,    0, 1103, 1102,    0,
        0, 1089,    0,    0, 1092, 1093, 1098,    0, 1097, 1082,
     1097,    0, 1088, 1091,  646, 1040, 1047, 1044, 1041,  991,
        0,    0,  986,    0, 1003, 1047,  994,  979,  984,  986,
      937,  951,  970,  943,  942,  928,  905,  912,  911,  915,
      892,  887,  874,    0,    0,  887,  878,  905,    0,    0,
        0,  906,    0,  863,  876,  861,  868,  917,  858,    0,
        0,    0,    0, 1394, 1394, 1394, 1394, 1394, 1394,  903,

      660,  902,  675,  859,    0,  850,  855,  839,  839,    0,
        0,    0,  842,  826,  848,    0,    0,    0,  834,  828,
      831,  834,  833,  823,    0,  881, 1394,    0,  815,  810,
      823,  821,    0,  848,  801,  800,  811,    0,    0,    0,
      800,  815,    0,    0,  575,  774,    0,    0,  759,  706,
        0,  788,  725, 1394,  660,  719,  658,  671,    0,  669,
        0,  654,    0,  655,  657,  655,  645,    0,    0,  632,
      631,    0,  631,    0,    0,    0,  619,    0,  614,  607,
      615,    0,  563,  543,  711, 1394,  565,    0,  574,    0,
        0,    0,    0,  488,    0,  479,    0,    0,    0,    0,

      447,  437,  434,  438,    0,    0,  420,    0, 1394,  412,
        0,  356,    0,  333,    0,  309,  218,  215,  198,  156,
        0,    0,    0,  128,   12,    0, 1394,  729,  741,  753,
      765,  777,  789,  801,  813,  825,  832,  844,  856,  867,
      878,  889,  900,  911,  922,  933,  944,  951,  955,  967,
      979,  986,  993, 1005, 1017, 1029, 1036, 1043, 1055, 1067,
     1079, 1086, 1098, 1110, 1122, 1134
    } ;

static const flex_int16_t yy_def[767] =
    {   0,
      728,  728,  729,  729,  730,  730,  731,  731,  732,  732,
      733,  733,  727,   13,  734,  734,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      735,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  736,  727,  727,  727,  727,  727,  727,
      727,  727,  727,   63,  727,  727,  727,  727,  727,  727,
      727,  737,  727,  727,  727,  727,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  738,  727,  727,  727,
      727,  735,  727,  727,  727,  727,  727,  739,  740,  741,
      742,  743,  744,  745,  746,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  747,  727,  727,   63,  727,  727,
      727,  727,  748,  749,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  737,  727,  727,
      727,  727,  727,  727,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  727,  727,  727,  727,  727,  738,  727,
      738,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  750,  751,
      727,  727,  727,  727,  727,  727,  727,  747,  727,  747,
      727,  147,  727,  727,  727,  727,  727,  752,  727,  727,
      753,  727,  754,  755,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  727,  727,  738,  727,  727,  727,  727,  727,
      727,  727,  727,  750,  756,  751,  727,  727,  757,  747,

      727,  727,  727,  727,  727,  758,  727,  727,  727,  753,
      727,  727,  727,  754,  759,  755,  727,  727,  727,  727,
      760,  727,  727,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  727,  727,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  727,  727,  737,  737,  737,

      737,  737,  737,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  761,  727,  762,
      727,  727,  763,  760,  727,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  764,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  765,  737,  737,
      737,  737,  766,  727,  727,  727,  727,  727,  727,  761,

      756,  763,  759,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  764,  727,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  765,  727,  737,  766,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  727,  727,  737,  737,  727,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  727,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,    0,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727
    } ;

static const flex_int16_t yy_nxt[1471] =
    {   0,
      727,   20,   21,   22,   23,  727,  727,   24,  108,   20,
       21,   22,   23,  727,   25,   24,   28,   29,   30,   26,
      727,   31,   25,   28,   29,   30,  727,   26,   31,   35,
       36,   35,   36,   42,   18,   18,   43,   42,   18,   18,
       43,   37,  106,   37,  727,  109,   38,  107,   38,  102,
      103,  102,  102,  102,  103,  102,  102,  727,   32,  102,
      103,  102,  102,  726,  131,   32,  104,  104,  104,  104,
      104,  104,  104,  104,  133,  108,  132,  108,  104,  104,
      104,  104,  104,  104,  104,  104,  727,  215,   33,  158,
      134,  216,  159,  168,  169,   33,   44,   45,   46,   47,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   64,   64,
       64,   64,   64,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   72,   72,   72,   72,   72,   72,   73,   74,
       75,   76,   72,   44,   77,   78,   79,   80,   81,   82,
       83,   72,   84,   72,   85,   86,   87,   88,   89,   72,
       90,   91,   92,   93,   94,   95,   72,   96,   72,   97,
       98,   99,  115,  127,  139,  115,  144,  164,  183,  116,
      725,  145,  135,  135,  135,  135,  170,  171,  140,  141,
      165,  166,  184,  146,  128,  160,  160,  160,  160,  179,

      136,  117,  142,  218,  143,  143,  143,  143,  143,  143,
      143,  143,  175,  161,  727,  175,  172,  198,  219,  118,
      119,  120,  195,  121,  122,  137,  199,  123,  724,  225,
      180,  173,  196,  226,  167,  197,  250,  124,  162,  125,
      174,  176,  200,  727,  201,  177,  181,  182,  181,  181,
      191,  723,  192,  251,  202,  193,  138,  147,  194,  148,
      148,  148,  148,  148,  148,  148,  148,  220,  208,  163,
      239,  241,  242,  221,  203,  149,  150,  209,  151,  152,
      153,  722,  204,  240,  205,  154,  185,  206,  186,  721,
      155,  149,  150,  207,  187,  115,  227,  156,  115,  228,

      222,  188,  189,  229,  190,  210,  157,  231,  351,  153,
      230,  211,  212,  245,  246,  262,  223,  213,  214,  224,
      279,  235,  352,  232,  117,  236,  233,  237,  333,  238,
      234,  102,  103,  102,  102,  248,  365,  280,  334,  104,
      104,  104,  104,  104,  104,  104,  104,  263,  135,  135,
      135,  135,  366,  264,  269,  296,  247,  265,  293,  270,
      292,  298,  299,  294,  266,  720,  136,  287,  267,  287,
      268,  289,  288,  288,  288,  288,  288,  288,  288,  288,
      289,  151,  152,  290,  304,  305,  297,  175,  324,  719,
      175,  137,  290,  325,  300,  301,  302,  300,  320,  326,

      151,  321,  290,  160,  160,  160,  160,  307,  718,  157,
      307,  290,  303,  436,  437,  386,  176,  181,  182,  181,
      181,  161,  138,  143,  143,  143,  143,  143,  143,  143,
      143,  368,  328,  341,  345,  369,  308,  358,  373,  274,
      275,  329,  387,  359,  346,  445,  162,  374,  342,  343,
      360,  446,  506,  361,  276,  274,  275,  250,  250,  379,
      717,  277,  281,  380,  282,  282,  282,  282,  282,  282,
      282,  282,  508,  279,  251,  385,  279,  163,  716,  507,
      283,  284,  384,  384,  384,  384,  384,  384,  384,  384,
      280,  715,  714,  400,  727,  285,  283,  284,  398,  509,

      398,  713,  286,  399,  399,  399,  399,  399,  399,  399,
      399,  712,  401,  402,  405,  466,  405,  466,  466,  406,
      406,  406,  406,  406,  406,  406,  406,  403,  401,  402,
      407,  411,  412,  467,  404,  288,  288,  288,  288,  288,
      288,  288,  288,  711,  408,  307,  407,  485,  307,  250,
      411,  409,  710,  302,  301,  302,  302,  510,  486,  413,
      419,  302,  301,  302,  302,  512,  385,  457,  458,  459,
      460,  303,  461,  462,  308,  496,  514,  496,  496,  303,
      516,  709,  395,  415,  511,  279,  420,  397,  417,  708,
      504,  707,  513,  497,  384,  384,  384,  384,  384,  384,

      384,  384,  400,  515,  411,  412,  275,  517,  135,  135,
      135,  135,  399,  399,  399,  399,  399,  399,  399,  399,
      276,  521,  275,  411,  706,  681,  136,  277,  682,  519,
      498,  519,  413,  522,  520,  520,  520,  520,  520,  520,
      520,  520,  406,  406,  406,  406,  406,  406,  406,  406,
      284,  137,  522,  521,  160,  160,  160,  160,  466,  703,
      466,  466,  576,  704,  285,  522,  284,  577,  616,  617,
      618,  286,  161,  705,  601,  496,  467,  496,  496,  397,
      702,  701,  138,  700,  522,  578,  579,  580,  581,  603,
      582,  583,  402,  497,  417,  699,  698,  162,  520,  520,

      520,  520,  520,  520,  520,  520,  403,  685,  402,  685,
      685,  697,  685,  404,  685,  685,  696,  695,  686,  694,
      693,  692,  691,  686,  690,  689,  688,  654,  163,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  112,  687,  684,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  129,  129,  683,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  178,  178,  178,
      178,  178,  178,  178,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  253,  253,  253,  253,
      253,  680,  679,  678,  677,  676,  253,  254,  254,  254,
      254,  254,  675,  674,  673,  672,  671,  254,  255,  255,
      255,  255,  255,  627,  670,  669,  668,  667,  255,  256,
      256,  256,  256,  256,  666,  665,  664,  663,  662,  256,

      257,  257,  257,  257,  257,  661,  660,  659,  658,  657,
      257,  258,  258,  258,  258,  258,  603,  601,  655,  654,
      652,  258,  259,  259,  259,  259,  259,  651,  650,  649,
      648,  647,  259,  260,  260,  260,  260,  260,  646,  645,
      644,  643,  642,  260,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  291,  291,  291,  154,
      154,  641,  640,  639,  154,  638,  154,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  288,  637,  288,  636,  635,  634,  288,  410,  410,

      410,  633,  410,  632,  410,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  399,  631,  399,  630,  629,  628,  399,  406,  627,
      406,  625,  624,  623,  406,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  520,  622,  520,  621,  620,  619,  520,  602,  602,

      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  656,  656,  656,  615,  656,  656,
      656,  656,  656,  656,  656,  656,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  525,  603,  601,
      599,  599,  598,  598,  597,  597,  596,  596,  595,  595,
      594,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,

      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  417,  415,  408,  403,  397,  395,  505,
      505,  503,  502,  501,  500,  499,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  465,  464,  463,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  444,  443,  442,  441,  440,
      439,  438,  435,  434,  433,  432,  431,  430,  429,  428,

      427,  426,  425,  424,  423,  422,  421,  418,  417,  415,
      281,  285,  276,  397,  395,  393,  392,  391,  390,  389,
      388,  383,  382,  381,  378,  377,  376,  375,  372,  371,
      370,  367,  364,  363,  362,  357,  356,  355,  354,  353,
      350,  349,  348,  347,  344,  340,  339,  338,  337,  336,
      335,  332,  331,  330,  327,  323,  322,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  306,  295,
      155,  273,  272,  271,  262,  261,  252,  113,  244,  243,
      217,  130,  126,  114,  113,  111,  110,  105,  727,  101,
      101,   40,   40,   17,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727
    } ;

static const flex_int16_t yy_chk[1471] =
    {   0,
        0,    3,    3,    3,    3,    0,    0,    3,   32,    4,
        4,    4,    4,    0,    3,    4,    5,    5,    5,    3,
        0,    5,    4,    6,    6,    6,    0,    4,    6,    7,
        7,    8,    8,   11,   11,   11,   11,   12,   12,   12,
       12,    7,   26,    8,    0,   32,    7,   26,    8,   20,
       20,   20,   20,   22,   22,   22,   22,   64,    5,   23,
       23,   23,   23,  725,   57,    6,   24,   24,   24,   24,
       24,   24,   24,   24,   58,   32,   57,   32,   50,   50,
       50,   50,   50,   50,   50,   50,   64,   85,    5,   65,
       58,   85,   65,   68,   68,    6,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   51,   53,   60,   51,   62,   67,   76,   51,
      724,   62,   59,   59,   59,   59,   69,   69,   60,   60,
       67,   67,   76,   62,   53,   66,   66,   66,   66,   73,

       59,   51,   61,   87,   61,   61,   61,   61,   61,   61,
       61,   61,   71,   66,  148,   71,   70,   80,   87,   51,
       51,   51,   79,   51,   51,   59,   80,   51,  720,   90,
       73,   70,   79,   90,   67,   79,  107,   51,   66,   51,
       70,   71,   81,  148,   81,   71,   74,   74,   74,   74,
       78,  719,   78,  107,   81,   78,   59,   63,   78,   63,
       63,   63,   63,   63,   63,   63,   63,   88,   83,   66,
       94,   95,   95,   88,   82,   63,   63,   83,   63,   63,
       63,  718,   82,   94,   82,   63,   77,   82,   77,  717,
       63,   63,   63,   82,   77,  115,   91,   63,  115,   91,

       89,   77,   77,   91,   77,   84,   63,   92,  220,   63,
       91,   84,   84,   98,   98,  130,   89,   84,   84,   89,
      145,   93,  220,   92,  115,   93,   92,   93,  204,   93,
       92,  102,  102,  102,  102,  104,  230,  145,  204,  104,
      104,  104,  104,  104,  104,  104,  104,  130,  135,  135,
      135,  135,  230,  130,  136,  163,   98,  130,  161,  136,
      154,  165,  165,  161,  130,  716,  135,  149,  130,  149,
      130,  152,  149,  149,  149,  149,  149,  149,  149,  149,
      157,  154,  154,  152,  171,  171,  163,  175,  198,  714,
      175,  135,  157,  198,  167,  167,  167,  167,  195,  198,

      154,  195,  152,  160,  160,  160,  160,  177,  712,  154,
      177,  157,  167,  323,  323,  262,  175,  181,  181,  181,
      181,  160,  135,  143,  143,  143,  143,  143,  143,  143,
      143,  232,  200,  212,  215,  232,  177,  226,  236,  143,
      143,  200,  262,  226,  215,  331,  160,  236,  212,  212,
      226,  331,  388,  226,  143,  143,  143,  249,  251,  241,
      710,  143,  147,  241,  147,  147,  147,  147,  147,  147,
      147,  147,  389,  278,  249,  251,  280,  160,  707,  388,
      147,  147,  248,  248,  248,  248,  248,  248,  248,  248,
      278,  704,  703,  280,  282,  147,  147,  147,  274,  389,

      274,  702,  147,  274,  274,  274,  274,  274,  274,  274,
      274,  701,  282,  282,  283,  347,  283,  347,  347,  283,
      283,  283,  283,  283,  283,  283,  283,  282,  282,  282,
      288,  291,  291,  347,  282,  287,  287,  287,  287,  287,
      287,  287,  287,  696,  288,  307,  288,  366,  307,  385,
      291,  288,  694,  300,  300,  300,  300,  390,  366,  291,
      300,  302,  302,  302,  302,  391,  385,  343,  343,  343,
      343,  300,  343,  343,  307,  377,  392,  377,  377,  302,
      393,  689,  395,  415,  390,  400,  300,  395,  415,  687,
      384,  684,  391,  377,  384,  384,  384,  384,  384,  384,

      384,  384,  400,  392,  410,  410,  399,  393,  397,  397,
      397,  397,  398,  398,  398,  398,  398,  398,  398,  398,
      399,  412,  399,  410,  683,  645,  397,  399,  645,  401,
      377,  401,  410,  412,  401,  401,  401,  401,  401,  401,
      401,  401,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  397,  412,  413,  417,  417,  417,  417,  466,  680,
      466,  466,  490,  680,  406,  413,  406,  490,  545,  545,
      545,  406,  417,  681,  601,  496,  466,  496,  496,  601,
      679,  677,  397,  673,  413,  491,  491,  491,  491,  603,
      491,  491,  520,  496,  603,  671,  670,  417,  519,  519,

      519,  519,  519,  519,  519,  519,  520,  650,  520,  650,
      650,  667,  685,  520,  685,  685,  666,  665,  650,  664,
      662,  660,  658,  685,  657,  656,  655,  653,  417,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  735,  652,  649,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  736,  736,  646,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  737,  737,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  739,  739,  739,  739,
      739,  642,  641,  637,  636,  635,  739,  740,  740,  740,
      740,  740,  634,  632,  631,  630,  629,  740,  741,  741,
      741,  741,  741,  626,  624,  623,  622,  621,  741,  742,
      742,  742,  742,  742,  620,  619,  615,  614,  613,  742,

      743,  743,  743,  743,  743,  609,  608,  607,  606,  604,
      743,  744,  744,  744,  744,  744,  602,  600,  589,  588,
      587,  744,  745,  745,  745,  745,  745,  586,  585,  584,
      582,  578,  745,  746,  746,  746,  746,  746,  577,  576,
      573,  572,  571,  746,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  748,  748,  748,  749,
      749,  570,  569,  568,  749,  567,  749,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  752,  566,  752,  565,  564,  563,  752,  753,  753,

      753,  562,  753,  561,  753,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  757,  560,  757,  559,  558,  557,  757,  758,  556,
      758,  555,  553,  550,  758,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  762,  549,  762,  548,  547,  546,  762,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  766,  766,  766,  544,  766,  766,
      766,  766,  766,  766,  766,  766,  543,  541,  540,  539,
      537,  536,  535,  532,  529,  528,  526,  524,  523,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  504,  503,  501,  500,  498,  497,  495,  494,
      493,  492,  489,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  472,  471,  470,

      468,  467,  465,  464,  463,  461,  457,  456,  455,  454,
      452,  451,  450,  449,  448,  447,  446,  445,  441,  440,
      439,  438,  437,  436,  435,  433,  432,  430,  429,  427,
      426,  424,  421,  416,  414,  409,  404,  396,  394,  387,
      386,  382,  381,  380,  379,  378,  376,  375,  374,  373,
      372,  371,  370,  368,  367,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  348,  346,  345,  344,  342,  341,  340,  339,  338,
      337,  335,  334,  333,  332,  330,  329,  328,  327,  326,
      325,  324,  322,  321,  320,  319,  318,  317,  316,  315,

      314,  313,  311,  310,  308,  305,  303,  298,  294,  293,
      292,  286,  277,  270,  269,  268,  267,  266,  265,  264,
      263,  247,  243,  242,  240,  239,  238,  237,  235,  234,
      233,  231,  229,  228,  227,  225,  224,  223,  222,  221,
      219,  218,  217,  216,  214,  211,  209,  208,  207,  206,
      205,  203,  202,  201,  199,  197,  196,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  176,  162,
      156,  142,  138,  137,  129,  127,  117,  113,   97,   96,
       86,   54,   52,   48,   43,   38,   37,   25,   17,   16,
       15,   10,    9,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[256] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ds_lexer.lpp"
#line 2 "ds_lexer.lpp"
    #include "daScript/misc/platform.h"
    #include <inttypes.h>
    #include <fast_float/fast_float.h>
    #include "daScript/ast/ast.h"
    #include "parser_state.h"
    #include "ds_parser.hpp"

    #ifndef SCNi64
      #define SCNi64       "lli"
    #endif
    #ifndef SCNu64
      #define SCNu64       "llu"
    #endif
    #ifndef SCNx64
      #define SCNx64       "llx"
    #endif

    using namespace das;

    union DAS_YYSTYPE;
    typedef DAS_YYSTYPE YYSTYPE;

    #define YY_NO_INPUT

    void das_yyfatalerror ( DAS_YYLTYPE * lloc, yyscan_t scanner, const string & error, CompilationError cerr = CompilationError::syntax_error );
    LineInfo tokAt ( yyscan_t scanner, const struct DAS_YYLTYPE & li );

    #define YY_USER_ACTION \
        yylloc_param->first_line = yylloc_param->last_line = \
            (yytext[yyleng - 1] == '\n' || yytext[yyleng - 1] == '\r') ? yylineno - 1 : yylineno; \
        yylloc_param->first_column = yyextra->das_yycolumn; \
        yylloc_param->last_column = yyextra->das_yycolumn + yyleng; \
        YYCOLUMN (yyextra->das_yycolumn += yyleng, "YY_USER_ACTION");

#ifdef FLEX_DEBUG
    void YYCOLUMN ( int, const char * comment ) {
        printf("%i:%i %s\n", yyextra->das_yycolumn, yylineno, comment ? comment : "");
    }
#else
    #define YYCOLUMN(expr,comment)  ((expr))
#endif

void YYTAB() {
    // YYCOLUMN(yyextra->das_yycolumn = (yyextra->das_yycolumn - 1 + yyextra->das_tab_size) & ~(yyextra->das_tab_size-1), "TAB");
}

void YYNEWLINE(yyscan_t yyscanner);
void das_accept_cpp_comment ( vector<CommentReader *> & crdi, yyscan_t scanner, DAS_YYLTYPE & li, const char * text );

#define YY_DECL int yylex(DAS_YYSTYPE *yylval_param, DAS_YYLTYPE *yylloc_param, yyscan_t yyscanner)

#define YY_EXTRA_TYPE das::DasParserState *

#line 1305 "ds_lexer.cpp"
#define YY_NO_UNISTD_H 1
/* %option debug */

#line 1309 "ds_lexer.cpp"

#define INITIAL 0
#define indent 1
#define strb 2
#define c_comment 3
#define cpp_comment 4
#define include 5
#define normal 6
#define reader 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT

    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 76 "ds_lexer.lpp"


#line 1593 "ds_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 728 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 727 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )

    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 78 "ds_lexer.lpp"
{
    string txt = yytext;
    int lRow, lCol;
    char lFile[256];
    if ( sscanf ( yytext, "#%i,%i,\"%255s\"#", &lRow, &lCol, lFile )==3 ) {
        lFile[strlen(lFile)-2] = 0;
        auto cfi = yyextra->g_FileAccessStack.back();
        string incFileName = yyextra->g_Access->getIncludeFileName(cfi->name,lFile);
        auto info = yyextra->g_Access->getFileInfo(incFileName);
        if ( !info ) {
            das_yyfatalerror(yylloc_param,yyscanner,"can't open "+incFileName);
        } else {
            yyextra->g_FileAccessStack.pop_back();
            yyextra->g_FileAccessStack.push_back(info);
            yylineno = lRow;
            YYCOLUMN ( yyextra->das_yycolumn = lCol, "LINE DIRECTIVE");
        }
    } else {
        das_yyfatalerror(yylloc_param,yyscanner,"can't process line directive " + string(yytext),
            CompilationError::invalid_line_directive); return LEXER_ERROR;
    }
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 100 "ds_lexer.lpp"
das_yyfatalerror(yylloc_param,yyscanner,"Unexpected */", CompilationError::unexpected_close_comment); return LEXER_ERROR;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "ds_lexer.lpp"
{
    BEGIN(c_comment);
    yyextra->das_c_style_depth = 1;
    yyextra->das_in_normal = false;
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->open(false, tak);
    }
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 110 "ds_lexer.lpp"
das_yyfatalerror(yylloc_param,yyscanner,"Unexpected */", CompilationError::unexpected_close_comment); return LEXER_ERROR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 111 "ds_lexer.lpp"
{
    BEGIN(c_comment);
    yyextra->das_c_style_depth = 1;
    yyextra->das_in_normal = true;
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->open(false, tak);
    }
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 120 "ds_lexer.lpp"
{
    BEGIN(cpp_comment);
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->open(true, tak);
    }
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 127 "ds_lexer.lpp"
{
    BEGIN(cpp_comment);
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->open(true, tak);
    }
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 134 "ds_lexer.lpp"
{
    BEGIN(normal);
    unput('\n');
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->close(tak);
    }
}
	YY_BREAK
case YY_STATE_EOF(cpp_comment):
#line 142 "ds_lexer.lpp"
BEGIN(normal);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 143 "ds_lexer.lpp"
{
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->accept(*yytext, tak);
    }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 149 "ds_lexer.lpp"
{
    yyextra->das_c_style_depth ++;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 152 "ds_lexer.lpp"
{
    yyextra->das_c_style_depth --;
    if ( yyextra->das_c_style_depth==0 ) {
        if ( !yyextra->g_CommentReaders.empty() ) {
            auto tak = tokAt(yyscanner,*yylloc_param);
            for ( auto & crd : yyextra->g_CommentReaders ) crd->close(tak);
        }
        if ( yyextra->das_in_normal ) {
            BEGIN(normal);
        } else {
            BEGIN(indent);
        }
    }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 166 "ds_lexer.lpp"
{                      /* skipping comment body */
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->accept(*yytext, tak);
    }
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 172 "ds_lexer.lpp"
{                 /* skipping comment eol */
    if ( !yyextra->g_CommentReaders.empty() ) {
        auto tak = tokAt(yyscanner,*yylloc_param);
        for ( auto & crd : yyextra->g_CommentReaders ) crd->accept(*yytext, tak);
    }
}
	YY_BREAK
case YY_STATE_EOF(c_comment):
#line 178 "ds_lexer.lpp"
{
    das_yyfatalerror(yylloc_param,yyscanner,"end of file encountered inside c-style comment", CompilationError::comment_contains_eof);
    BEGIN(normal);
}
	YY_BREAK
case YY_STATE_EOF(reader):
#line 182 "ds_lexer.lpp"
{
    das_yyfatalerror(yylloc_param,yyscanner,"reader constant exceeds file", CompilationError::string_constant_exceeds_file);
    BEGIN(normal);
    return END_OF_READ;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 187 "ds_lexer.lpp"
{
    YYNEWLINE(yyscanner);
    yylval_param->ch = yytext[0];
    return STRING_CHARACTER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 192 "ds_lexer.lpp"
{
    yylval_param->ch = yytext[0];
    return STRING_CHARACTER;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 196 "ds_lexer.lpp"
{
    // assert(nested_sb==0);
    BEGIN(normal);
    return END_STRING;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 201 "ds_lexer.lpp"
{
    DAS_ASSERT(yyextra->das_nested_sb==0);
    yyextra->das_nested_sb ++;
    BEGIN(normal);
    return BEGIN_STRING_EXPR;
}
	YY_BREAK
case YY_STATE_EOF(strb):
#line 207 "ds_lexer.lpp"
{
    das_yyfatalerror(yylloc_param,yyscanner,"string constant exceeds file", CompilationError::string_constant_exceeds_file);
    BEGIN(normal);
    return END_STRING;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 212 "ds_lexer.lpp"
{
    return STRING_CHARACTER_ESC;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 215 "ds_lexer.lpp"
{
    yylval_param->ch = yytext[1];
    return STRING_CHARACTER;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 219 "ds_lexer.lpp"
/* do exactly nothing */
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 220 "ds_lexer.lpp"
{
    yylval_param->ch = *yytext;
    YYNEWLINE(yyscanner);
    return STRING_CHARACTER;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 225 "ds_lexer.lpp"
{
    YYTAB();
    yylval_param->ch = *yytext;
    return STRING_CHARACTER;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 230 "ds_lexer.lpp"
{
    yylval_param->ch = *yytext;
    return STRING_CHARACTER;
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 234 "ds_lexer.lpp"
/* skip empty line */ {
    yyextra->das_current_line_indent = 0;
    YYNEWLINE(yyscanner);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 238 "ds_lexer.lpp"
{
    yyextra->das_current_line_indent++;
    #ifdef FLEX_DEBUG
        printf("[ ], indent=%i\n", yyextra->das_current_line_indent);
    #endif
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 244 "ds_lexer.lpp"
{
    yyextra->das_current_line_indent = (yyextra->das_current_line_indent + yyextra->das_tab_size) & ~(yyextra->das_tab_size-1);
    #ifdef FLEX_DEBUG
        printf("\\t, cli=%i\n", yyextra->das_current_line_indent);
    #endif
    YYTAB();
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 251 "ds_lexer.lpp"
{
    yyextra->das_current_line_indent = 0;
    yyextra->das_need_oxford_comma = true;
    YYNEWLINE(yyscanner);
    #ifdef FLEX_DEBUG
        printf("new line\n");
    #endif
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 260 "ds_lexer.lpp"
{
    unput(*yytext);
    YYCOLUMN(yyextra->das_yycolumn--, "UNPUT");
    if (yyextra->das_current_line_indent > yyextra->das_indent_level*yyextra->das_tab_size ) {
        if ( yyextra->das_current_line_indent > (1 + yyextra->das_indent_level) * yyextra->das_tab_size ) {
            #ifdef FLEX_DEBUG
            printf("INVALID INDENT at %i, emit BEGIN_STRING\n", yyextra->das_current_line_indent);
            #endif
            das_yyfatalerror(yylloc_param,yyscanner,"invalid indentation"); // pretend tab was pressed
            return BEGIN_STRING;
        }
        if ( yyextra->das_current_line_indent % yyextra->das_tab_size ) {
            #ifdef FLEX_DEBUG
            printf("INVALID INDENT at %i, emit {\n", yyextra->das_current_line_indent);
            #endif
            das_yyfatalerror(yylloc_param,yyscanner,"invalid indentation"); // pretend tab was pressed
            yyextra->das_current_line_indent = (yyextra->das_current_line_indent + yyextra->das_tab_size) & ~(yyextra->das_tab_size-1);
        }
        yyextra->das_indent_level++;
        #ifdef FLEX_DEBUG
        printf("emit {, cli=%i, indent =%i\n", yyextra->das_current_line_indent, yyextra->das_indent_level);
        #endif
        return '{';
    } else if (yyextra->das_current_line_indent < yyextra->das_indent_level*yyextra->das_tab_size ) {
        yyextra->das_indent_level--;
        #ifdef FLEX_DEBUG
        printf("emit }, cli=%i, indent =%i\n", yyextra->das_current_line_indent, yyextra->das_indent_level);
        #endif
        return '}';
    } else {
        BEGIN(normal);
    }
}
	YY_BREAK
case YY_STATE_EOF(indent):
#line 293 "ds_lexer.lpp"
{
    if ( yyextra->g_FileAccessStack.size()==1 ) {
        if ( yyextra->das_indent_level ) {
            yyextra->das_indent_level--;
            unput('\n');
            #ifdef FLEX_DEBUG
            printf("emit }\n");
            #endif
            return '}';
        } else {
            return 0;
        }
    } else {
        yypop_buffer_state(yyscanner);
        yyextra->g_FileAccessStack.pop_back();
        yylineno = yyextra->das_line_no.back();
        yyextra->das_line_no.pop_back();
    }
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 313 "ds_lexer.lpp"
/* eat the whitespace */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 314 "ds_lexer.lpp"
{
    YYTAB();
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 317 "ds_lexer.lpp"
{ /* got the include file name */
    auto cfi = yyextra->g_FileAccessStack.back();
    string incFileName = yyextra->g_Access->getIncludeFileName(cfi->name,yytext);
    auto info = yyextra->g_Access->getFileInfo(incFileName);
    if ( !info ) {
        das_yyfatalerror(yylloc_param,yyscanner,"can't open "+incFileName);
    } else {
        if ( yyextra->das_already_include.find(incFileName) == yyextra->das_already_include.end() ) {
            yyextra->das_already_include.insert(incFileName);
            yyextra->g_FileAccessStack.push_back(info);
            yyextra->das_line_no.push_back(yylineno);
            yylineno = 1;
            yypush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
            const char * src = nullptr;
            uint32_t len = 0;
            info->getSourceAndLength(src, len);
            yy_scan_bytes(src, len, yyscanner);
            yylineno = 1;
        }
    }
    BEGIN(normal);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 340 "ds_lexer.lpp"
BEGIN(include);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 341 "ds_lexer.lpp"
return DAS_CAPTURE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 342 "ds_lexer.lpp"
/* yyextra->das_need_oxford_comma = false; */ return DAS_FOR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 343 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_WHILE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 344 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_IF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 345 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_STATIC_IF;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 346 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_ELIF;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 347 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_STATIC_ELIF;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 348 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_ELSE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 349 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_FINALLY;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 350 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_DEF;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 351 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_WITH;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 352 "ds_lexer.lpp"
return DAS_AKA;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 353 "ds_lexer.lpp"
return DAS_ASSUME;
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 354 "ds_lexer.lpp"
{
    yyextra->das_need_oxford_comma = false;
    unput('\n');
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
    return DAS_LET;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 360 "ds_lexer.lpp"
return DAS_LET;
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 361 "ds_lexer.lpp"
{
    yyextra->das_need_oxford_comma = false;
    unput('\n');
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
    return DAS_VAR;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 367 "ds_lexer.lpp"
return DAS_VAR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 368 "ds_lexer.lpp"
return DAS_UNINITIALIZED;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 369 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_STRUCT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 370 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_CLASS;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 371 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_ENUM;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 372 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_TRY;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 373 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_CATCH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 374 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_TYPEDEF;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 375 "ds_lexer.lpp"
return DAS_TYPEDECL;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 376 "ds_lexer.lpp"
return DAS_LABEL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 377 "ds_lexer.lpp"
return DAS_GOTO;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 378 "ds_lexer.lpp"
return DAS_MODULE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 379 "ds_lexer.lpp"
return DAS_PUBLIC;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 380 "ds_lexer.lpp"
return DAS_OPTIONS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 381 "ds_lexer.lpp"
return DAS_OPERATOR;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 382 "ds_lexer.lpp"
return DAS_REQUIRE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 383 "ds_lexer.lpp"
return DAS_TBLOCK;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 384 "ds_lexer.lpp"
return DAS_TFUNCTION;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 385 "ds_lexer.lpp"
return DAS_TLAMBDA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 386 "ds_lexer.lpp"
return DAS_GENERATOR;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 387 "ds_lexer.lpp"
return DAS_TTUPLE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 388 "ds_lexer.lpp"
return DAS_TVARIANT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 389 "ds_lexer.lpp"
return DAS_CONST;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 390 "ds_lexer.lpp"
return DAS_CONTINUE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 391 "ds_lexer.lpp"
return DAS_WHERE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 392 "ds_lexer.lpp"
return DAS_CAST;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 393 "ds_lexer.lpp"
return DAS_UPCAST;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 394 "ds_lexer.lpp"
return DAS_PASS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 395 "ds_lexer.lpp"
return DAS_REINTERPRET;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 396 "ds_lexer.lpp"
return DAS_OVERRIDE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 397 "ds_lexer.lpp"
return DAS_SEALED;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 398 "ds_lexer.lpp"
return DAS_ABSTRACT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 399 "ds_lexer.lpp"
return DAS_EXPECT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 400 "ds_lexer.lpp"
return DAS_TABLE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 401 "ds_lexer.lpp"
return DAS_ARRAY;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 402 "ds_lexer.lpp"
return DAS_FIXED_ARRAY;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 403 "ds_lexer.lpp"
return DAS_DEFAULT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 404 "ds_lexer.lpp"
return DAS_ITERATOR;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 405 "ds_lexer.lpp"
return DAS_IN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 406 "ds_lexer.lpp"
return DAS_IMPLICIT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 407 "ds_lexer.lpp"
return DAS_EXPLICIT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 408 "ds_lexer.lpp"
return DAS_SHARED;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 409 "ds_lexer.lpp"
return DAS_PRIVATE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 410 "ds_lexer.lpp"
return DAS_SMART_PTR;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 411 "ds_lexer.lpp"
{
    unput('(');
    YYCOLUMN(yyextra->das_yycolumn--, "UNPUT (");
    return DAS_UNSAFE;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 416 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; return DAS_UNSAFE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 417 "ds_lexer.lpp"
return DAS_INSCOPE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 418 "ds_lexer.lpp"
return DAS_STATIC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 419 "ds_lexer.lpp"
return DAS_AS;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 420 "ds_lexer.lpp"
return DAS_IS;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 421 "ds_lexer.lpp"
return DAS_DEREF;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 422 "ds_lexer.lpp"
return DAS_ADDR;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 423 "ds_lexer.lpp"
return DAS_NULL;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 424 "ds_lexer.lpp"
return DAS_RETURN;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 425 "ds_lexer.lpp"
return DAS_YIELD;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 426 "ds_lexer.lpp"
return DAS_BREAK;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 427 "ds_lexer.lpp"
return DAS_TYPEINFO;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 428 "ds_lexer.lpp"
return DAS_TYPE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 429 "ds_lexer.lpp"
return DAS_NEWT;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 430 "ds_lexer.lpp"
return DAS_DELETE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 431 "ds_lexer.lpp"
return DAS_TRUE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 432 "ds_lexer.lpp"
return DAS_FALSE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 433 "ds_lexer.lpp"
return DAS_TAUTO;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 434 "ds_lexer.lpp"
return DAS_TBOOL;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 435 "ds_lexer.lpp"
return DAS_TVOID;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 436 "ds_lexer.lpp"
return DAS_TSTRING;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 437 "ds_lexer.lpp"
return DAS_TRANGE64;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 438 "ds_lexer.lpp"
return DAS_TURANGE64;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 439 "ds_lexer.lpp"
return DAS_TRANGE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 440 "ds_lexer.lpp"
return DAS_TURANGE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 441 "ds_lexer.lpp"
return DAS_TINT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 442 "ds_lexer.lpp"
return DAS_TINT8;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 443 "ds_lexer.lpp"
return DAS_TINT16;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 444 "ds_lexer.lpp"
return DAS_TINT64;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 445 "ds_lexer.lpp"
return DAS_TINT2;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 446 "ds_lexer.lpp"
return DAS_TINT3;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 447 "ds_lexer.lpp"
return DAS_TINT4;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 448 "ds_lexer.lpp"
return DAS_TUINT;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 449 "ds_lexer.lpp"
return DAS_TBITFIELD;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 450 "ds_lexer.lpp"
return DAS_TUINT8;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 451 "ds_lexer.lpp"
return DAS_TUINT16;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 452 "ds_lexer.lpp"
return DAS_TUINT64;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 453 "ds_lexer.lpp"
return DAS_TUINT2;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 454 "ds_lexer.lpp"
return DAS_TUINT3;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 455 "ds_lexer.lpp"
return DAS_TUINT4;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 456 "ds_lexer.lpp"
return DAS_TDOUBLE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 457 "ds_lexer.lpp"
return DAS_TFLOAT;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 458 "ds_lexer.lpp"
return DAS_TFLOAT2;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 459 "ds_lexer.lpp"
return DAS_TFLOAT3;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 460 "ds_lexer.lpp"
return DAS_TFLOAT4;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 461 "ds_lexer.lpp"
{
    auto it = yyextra->das_keywords.find(yytext);
    if ( it != yyextra->das_keywords.end() ) {
        if ( !it->second.is_type_function && !it->second.needs_oxford_comma ) {
            yyextra->das_need_oxford_comma = false;
        }
        yylval_param->s = new string(it->second.keyword);
        return it->second.is_type_function ? TYPE_FUNCTION : KEYWORD;
    }
    yylval_param->s = new string(yytext);
    return NAME;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 473 "ds_lexer.lpp"
{
        BEGIN(strb);
        return BEGIN_STRING;
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 477 "ds_lexer.lpp"
yylval_param->ui = 8; return UNSIGNED_INT8;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 478 "ds_lexer.lpp"
yylval_param->ui = 9; return UNSIGNED_INT8;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 479 "ds_lexer.lpp"
yylval_param->ui = 10; return UNSIGNED_INT8;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 480 "ds_lexer.lpp"
yylval_param->ui = 12; return UNSIGNED_INT8;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 481 "ds_lexer.lpp"
yylval_param->ui = 13; return UNSIGNED_INT8;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 482 "ds_lexer.lpp"
yylval_param->ui = '\\'; return UNSIGNED_INT8;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 483 "ds_lexer.lpp"
yylval_param->ui = uint32_t(yytext[1]); return UNSIGNED_INT8;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 485 "ds_lexer.lpp"
yylval_param->ui = 8; return UNSIGNED_INTEGER;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 486 "ds_lexer.lpp"
yylval_param->ui = 9; return UNSIGNED_INTEGER;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 487 "ds_lexer.lpp"
yylval_param->ui = 10; return UNSIGNED_INTEGER;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 488 "ds_lexer.lpp"
yylval_param->ui = 12; return UNSIGNED_INTEGER;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 489 "ds_lexer.lpp"
yylval_param->ui = 13; return UNSIGNED_INTEGER;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 490 "ds_lexer.lpp"
yylval_param->ui = '\\'; return UNSIGNED_INTEGER;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 491 "ds_lexer.lpp"
yylval_param->ui = uint32_t(yytext[1]); return UNSIGNED_INTEGER;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 493 "ds_lexer.lpp"
yylval_param->i = 8; return INTEGER;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 494 "ds_lexer.lpp"
yylval_param->i = 9; return INTEGER;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 495 "ds_lexer.lpp"
yylval_param->i = 10; return INTEGER;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 496 "ds_lexer.lpp"
yylval_param->i = 12; return INTEGER;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 497 "ds_lexer.lpp"
yylval_param->i = 13; return INTEGER;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 498 "ds_lexer.lpp"
yylval_param->i = '\\'; return INTEGER;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 500 "ds_lexer.lpp"
yylval_param->i = int32_t(yytext[1]); return INTEGER;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 501 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->ui64);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"uint64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-2 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_LONG_INTEGER;
    }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 512 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->i64);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"int64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-1 ) {
            return LEXER_ERROR;
        }
        return LONG_INTEGER;
    }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 523 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        uint8_t u8_const;
        auto res = fast_float::from_chars(temptext, temptext+templength, u8_const);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"uint8 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-2 ) {
            return LEXER_ERROR;
        }
        yylval_param->ui = u8_const;
        return UNSIGNED_INT8;
    }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 536 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->ui);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"uint constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-1 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_INTEGER;
    }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 547 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->i);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"int constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength-2 ) {
            return LEXER_ERROR;
        }
        unput('.');
        YYCOLUMN(yyextra->das_yycolumn--, "UNPUT .");
        unput('.');
        YYCOLUMN(yyextra->das_yycolumn--, "UNPUT .");
        return INTEGER;
    }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 562 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext, temptext+templength, yylval_param->i);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"int constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+templength ) {
            return LEXER_ERROR;
        }
        return INTEGER;
    }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 573 "ds_lexer.lpp"
{
        char temptext[128];
        skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui64, 16);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"uint64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-2 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_LONG_INTEGER;
    }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 584 "ds_lexer.lpp"
{
        char temptext[128];
        skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui64, 16);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"int64 constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-1 ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_LONG_INTEGER;
    }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 595 "ds_lexer.lpp"
{
        char temptext[128];
        int templength = skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        if ( templength>2 && (temptext[templength-2]=='u' || temptext[templength-2]=='U') && temptext[templength-1]=='8' ) {
            uint8_t u8_const;
            auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext)-2, u8_const, 16);
            if ( res.ec == std::errc::result_out_of_range ) {
                das_yyfatalerror(yylloc_param,yyscanner,"uint8 constant out of range", CompilationError::integer_constant_out_of_range);
            } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-2 ) {
                return LEXER_ERROR;
            }
            yylval_param->ui = u8_const;
            return UNSIGNED_INT8;
        } else {
            auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui, 16);
            if ( res.ec == std::errc::result_out_of_range ) {
                das_yyfatalerror(yylloc_param,yyscanner,"uint constant out of range", CompilationError::integer_constant_out_of_range);
            } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext)-1 ) {
                return LEXER_ERROR;
            }
            return UNSIGNED_INTEGER;
        }
    }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 618 "ds_lexer.lpp"
{
        char temptext[128];
        skip_underscode(yytext,temptext,temptext+sizeof(temptext));
        auto res = fast_float::from_chars(temptext + 2, temptext+strlen(temptext), yylval_param->ui, 16);
        if ( res.ec == std::errc::result_out_of_range ) {
            das_yyfatalerror(yylloc_param,yyscanner,"uint constant out of range", CompilationError::integer_constant_out_of_range);
        } else if ( res.ec != std::errc() || res.ptr != temptext+strlen(temptext) ) {
            return LEXER_ERROR;
        }
        return UNSIGNED_INTEGER;
    }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 629 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 638 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;

}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 648 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 657 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->fd);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"float constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return FLOAT;
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 666 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 675 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 684 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 693 "ds_lexer.lpp"
{
    auto res = fast_float::from_chars(yytext, yytext+strlen(yytext), yylval_param->d);
    if ( res.ec == std::errc::result_out_of_range ) {
        das_yyfatalerror(yylloc_param,yyscanner,"double constant out of range", CompilationError::floating_point_constant_out_of_range);
    } else if ( res.ec != std::errc() ) {
        return LEXER_ERROR;
    }
    return DOUBLE;
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 702 "ds_lexer.lpp"
{
    if ( !yyextra->das_nested_parentheses ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching parentheses", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_parentheses --;
    return ')';
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 710 "ds_lexer.lpp"
{
    yyextra->das_nested_parentheses ++;
    return '(';
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 714 "ds_lexer.lpp"
{
    if ( !yyextra->das_nested_square_braces ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_square_braces --;
    return ']';
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 722 "ds_lexer.lpp"
{
    yyextra->das_nested_square_braces ++;
    return '[';
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 726 "ds_lexer.lpp"
{
    if ( yyextra->das_nested_sb ) {
        yyextra->das_nested_sb --;
        if ( !yyextra->das_nested_sb ) {
            BEGIN(strb);
            return END_STRING_EXPR;
        } else {
            return '}';
        }
    } else {
        if ( !yyextra->das_nested_curly_braces ) {
            das_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_curly_bracers);
            return '}';
        }
        yyextra->das_nested_curly_braces --;
        return '}';
    }
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 744 "ds_lexer.lpp"
{
    if ( yyextra->das_nested_sb ) {
        yyextra->das_nested_sb ++;
    } else {
        yyextra->das_nested_curly_braces ++;
    }
    return '{';
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 752 "ds_lexer.lpp"
return COLCOL;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 753 "ds_lexer.lpp"
return MTAG_DOTDOTDOT;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 754 "ds_lexer.lpp"
return DOTDOT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 755 "ds_lexer.lpp"
return RPIPE;
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 756 "ds_lexer.lpp"
{
    yyextra->das_need_oxford_comma = false;
    unput('\n');
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
    return LBPIPE;
}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 762 "ds_lexer.lpp"
yyextra->das_need_oxford_comma = false; unput('\n'); return LBPIPE;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 763 "ds_lexer.lpp"
{
    unput('$');
    YYCOLUMN(yyextra->das_yycolumn--, "UNPUT $");
    if ( yyextra->das_nested_parentheses ) {
        return LPIPE;
    } else {
        yyextra->das_need_oxford_comma = false;
        return LBPIPE;
    }
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 773 "ds_lexer.lpp"
{
    unput('@');
    YYCOLUMN(yyextra->das_yycolumn--, "UNPUT @");
    if ( yyextra->das_nested_parentheses ) {
        return LPIPE;
    } else {
        yyextra->das_need_oxford_comma = false;
        return LBPIPE;
    }
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 783 "ds_lexer.lpp"
{
    unput('@');
    unput('@');
    YYCOLUMN(yyextra->das_yycolumn-=2, "UNPUT @@");
    if ( yyextra->das_nested_parentheses ) {
        return LFPIPE;
    } else {
        yyextra->das_need_oxford_comma = false;
        return LFPIPE;
    }
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 794 "ds_lexer.lpp"
{
    unput('@');
    YYCOLUMN(yyextra->das_yycolumn--, "UNPUT @");
    if ( yyextra->das_nested_parentheses ) {
        return LAPIPE;
    } else {
        yyextra->das_need_oxford_comma = false;
        return LAPIPE;
    }
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 804 "ds_lexer.lpp"
{
    unput('$');
    YYCOLUMN(yyextra->das_yycolumn--, "UNPUT $");
    if ( yyextra->das_nested_parentheses ) {
        return LLPIPE;
    } else {
        yyextra->das_need_oxford_comma = false;
        return LLPIPE;
    }
}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 814 "ds_lexer.lpp"
return LPIPE;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 815 "ds_lexer.lpp"
return MTAG_E;
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 816 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_E;
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 817 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_I;
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 818 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_V;
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 819 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_B;
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 820 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_A;
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 821 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_T;
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 822 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_C;
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 823 "ds_lexer.lpp"
unput(yytext[yyleng-1]); return MTAG_F;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 824 "ds_lexer.lpp"
return QQ;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 825 "ds_lexer.lpp"
{
    yyextra->das_nested_square_braces ++;
    return QBRA;
}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 829 "ds_lexer.lpp"
return QDOT;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 830 "ds_lexer.lpp"
return CLONEEQU;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 831 "ds_lexer.lpp"
return RARROW;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 832 "ds_lexer.lpp"
return LARROW;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 833 "ds_lexer.lpp"
return ADDEQU;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 834 "ds_lexer.lpp"
return SUBEQU;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 835 "ds_lexer.lpp"
return DIVEQU;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 836 "ds_lexer.lpp"
return MULEQU;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 837 "ds_lexer.lpp"
return MODEQU;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 838 "ds_lexer.lpp"
return ANDANDEQU;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 839 "ds_lexer.lpp"
return OROREQU;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 840 "ds_lexer.lpp"
return XORXOREQU;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 841 "ds_lexer.lpp"
return ANDAND;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 842 "ds_lexer.lpp"
return OROR;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 843 "ds_lexer.lpp"
return XORXOR;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 844 "ds_lexer.lpp"
return ANDEQU;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 845 "ds_lexer.lpp"
return OREQU;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 846 "ds_lexer.lpp"
return XOREQU;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 847 "ds_lexer.lpp"
return ADDADD;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 848 "ds_lexer.lpp"
return SUBSUB;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 849 "ds_lexer.lpp"
return LEEQU;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 850 "ds_lexer.lpp"
return GREQU;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 851 "ds_lexer.lpp"
return EQUEQU;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 852 "ds_lexer.lpp"
return NOTEQU;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 853 "ds_lexer.lpp"
{
    if ( yyextra->das_arrow_depth ) {
        unput('>');
        unput('>');
        YYCOLUMN(yyextra->das_yycolumn-=2, "UNPUT");
        return '>';
    } else {
        return ROTR;
    }
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 863 "ds_lexer.lpp"
{
    if ( yyextra->das_arrow_depth ) {
        unput('>');
        YYCOLUMN(yyextra->das_yycolumn--, "UNPUT");
        return '>';
    } else {
        return SHR;
    }
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 872 "ds_lexer.lpp"
return ROTL;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 873 "ds_lexer.lpp"
return SHL;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 874 "ds_lexer.lpp"
return SHREQU;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 875 "ds_lexer.lpp"
return SHLEQU;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 876 "ds_lexer.lpp"
return ROTREQU;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 877 "ds_lexer.lpp"
return ROTLEQU;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 878 "ds_lexer.lpp"
return MAPTO;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 879 "ds_lexer.lpp"
{
        if ( yyextra->das_gen2_make_syntax ) {
            yyextra->das_nested_square_braces ++;
            unput('[');
            return '[';
        } else {
            yyextra->das_nested_square_braces ++;
            yyextra->das_nested_square_braces ++;
            return BRABRAB;
        }
    }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 890 "ds_lexer.lpp"
{
        if ( yyextra->das_gen2_make_syntax ) {
            yyextra->das_nested_square_braces ++;
            unput('{');
            return '[';
        } else {
            yyextra->das_nested_curly_braces ++;
            yyextra->das_nested_square_braces ++;
            return BRACBRB;
        }
    }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 901 "ds_lexer.lpp"
{
        if ( yyextra->das_gen2_make_syntax ) {
            yyextra->das_nested_curly_braces ++;
            unput('{');
            return '{';
        } else {
            yyextra->das_nested_curly_braces ++;
            yyextra->das_nested_curly_braces ++;
            return CBRCBRB;
        }
    }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 912 "ds_lexer.lpp"
/* skip white space */
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 913 "ds_lexer.lpp"
{
    YYTAB();
}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 917 "ds_lexer.lpp"
{
    if ( yyextra->das_nested_curly_braces < 2 ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_curly_braces -= 2;
    return SEMICOLON_CUR_CUR;
}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 926 "ds_lexer.lpp"
{
    if ( !yyextra->das_nested_curly_braces ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    if ( !yyextra->das_nested_square_braces ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_curly_braces --;
    yyextra->das_nested_square_braces --;
    return SEMICOLON_CUR_SQR;
}
	YY_BREAK
case 249:
/* rule 249 can match eol */
YY_RULE_SETUP
#line 940 "ds_lexer.lpp"
{
    if ( !yyextra->das_nested_curly_braces ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching curly braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    if ( !yyextra->das_nested_square_braces ) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_curly_braces --;
    yyextra->das_nested_square_braces --;
    return COMMA_CUR_SQR;
}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 954 "ds_lexer.lpp"
{
    if ( yyextra->das_nested_square_braces < 2) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_square_braces -= 2;
    return SEMICOLON_SQR_SQR;
}
	YY_BREAK
case 251:
/* rule 251 can match eol */
YY_RULE_SETUP
#line 963 "ds_lexer.lpp"
{
    if ( yyextra->das_nested_square_braces < 2) {
        das_yyfatalerror(yylloc_param,yyscanner,"mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    yyextra->das_nested_square_braces -= 2;
    return COMMA_SQR_SQR;
}
	YY_BREAK
case 252:
/* rule 252 can match eol */
YY_RULE_SETUP
#line 971 "ds_lexer.lpp"
{
    YYCOLUMN(yyextra->das_yycolumn = 0, "NEW LINE");
}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 974 "ds_lexer.lpp"
{
    YYCOLUMN(yyextra->das_yycolumn = 0, "NEW LINE");
    das_accept_cpp_comment(yyextra->g_CommentReaders, yyscanner, *yylloc_param, yytext);
    if  ( !yyextra->das_nested_parentheses && !yyextra->das_nested_curly_braces && !yyextra->das_nested_square_braces ) {
        bool ns = ((yyextra->das_current_line_indent!=0) && yyextra->das_need_oxford_comma) || yyextra->das_force_oxford_comma;
        #ifdef FLEX_DEBUG
        if ( yyextra->das_force_oxford_comma ) printf ( "forcing oxford comma\n");
        #endif
        yyextra->das_force_oxford_comma = false;
        yyextra->das_current_line_indent = 0;
        yyextra->das_need_oxford_comma = true;
        BEGIN(indent);
        if ( ns ) {
            #ifdef FLEX_DEBUG
            printf("emit ; at EOL\n");
            #endif
            return ';';
        }
    }
}
	YY_BREAK
case YY_STATE_EOF(normal):
#line 994 "ds_lexer.lpp"
{
    if ( yyextra->g_FileAccessStack.size()==1 ) {
        YYCOLUMN(yyextra->das_yycolumn = 0,"EOF");
        if  ( !yyextra->das_nested_parentheses && !yyextra->das_nested_curly_braces && !yyextra->das_nested_square_braces ) {
            bool ns = (yyextra->das_current_line_indent!=0) && yyextra->das_need_oxford_comma;
            yyextra->das_current_line_indent = 0;
            yyextra->das_need_oxford_comma = true;
            BEGIN(indent);
            if ( ns ) {
                #ifdef FLEX_DEBUG
                printf("emit ; at EOF\n");
                #endif
                return ';';
            }
        } else {
            return 0;
        }
    } else {
        yypop_buffer_state(yyscanner);
        yyextra->g_FileAccessStack.pop_back();
        yylineno = yyextra->das_line_no.back();
        yyextra->das_line_no.pop_back();
    }
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 1018 "ds_lexer.lpp"
return *yytext;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1020 "ds_lexer.lpp"
ECHO;
	YY_BREAK
#line 3654 "ds_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(include):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 728 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 728 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 727);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )

    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{

	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;

    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;

    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );

    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );

    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1020 "ds_lexer.lpp"


void das_accept_sequence ( yyscan_t yyscanner, const char * seq, size_t seqLen, int lineNo, FileInfo * info ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    auto infoPtr = info ? info : yyextra->g_FileAccessStack.back();
    yyextra->g_FileAccessStack.push_back(infoPtr);
    yyextra->das_line_no.push_back(yylineno);
    yypush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
    yy_scan_bytes(seq, seqLen, yyscanner);
    yylineno = lineNo;
    BEGIN(normal);
}

void das_yybegin_reader ( yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(reader);
}

void das_yyend_reader ( yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(normal);
}

#if DAS_YYDEBUG
extern int das_yydebug;
#endif

void das_collect_keywords ( Module * mod, yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    for ( auto & kwd : mod->keywords ) {
        auto it = yyextra->das_keywords.find(kwd.first);
        if ( it != yyextra->das_keywords.end() && it->second.keyword!=kwd.first ) {
            yyextra->g_Program->error("mismatching keyword " + kwd.first + " in module " + mod->name,
                it->second.keyword + " is already defined","",LineInfo());
            return;
        }
        yyextra->das_keywords[kwd.first] = DasKeyword{kwd.second,false,kwd.first};
    }
    for ( auto & tfun : mod->typeFunctions ) {
        string keyword = mod->name.empty() ? tfun : mod->name + "::" + tfun;
        auto it = yyextra->das_keywords.find(tfun);
        if ( it != yyextra->das_keywords.end() && it->second.keyword!=keyword ) {
            yyextra->g_Program->error("mismatching type function " + tfun + " in module " + mod->name,
                it->second.keyword + " is already defined","",LineInfo());
            return;
        }
        yyextra->das_keywords[tfun] = DasKeyword{false,true,keyword};
    }
}

void das_yybegin(const char * str, uint32_t len, yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra->g_thisStructure = nullptr;
    yyextra->das_module_alias.clear();
    yyextra->das_already_include.clear();
    yyextra->das_keywords.clear();
#if DAS_YYDEBUG
    das_yydebug = 0;
#endif
    yyextra->das_tab_size = yyextra->das_def_tab_size;
    yyextra->das_line_no.clear();
    YYCOLUMN(yyextra->das_yycolumn = 0,"YYBEGIN");
    yyextra->das_current_line_indent = 0;
    yyextra->das_indent_level = 0;
    yyextra->das_nested_parentheses = 0;
    yyextra->das_nested_curly_braces = 0;
    yyextra->das_nested_square_braces = 0;
    yyextra->das_nested_sb = 0;
    yyextra->das_need_oxford_comma = true;
    yyextra->das_force_oxford_comma = false;
    yyextra->das_c_style_depth = 0;
    yyextra->das_arrow_depth = 0;
    yyextra->g_CommentReaders.clear();
    yyextra->g_ReaderMacro = nullptr;
    yyextra->g_ReaderExpr = nullptr;
    BEGIN(normal);
    yy_scan_bytes(str, len, yyscanner);
    yylineno = 1;
}

void YYNEWLINE ( yyscan_t yyscanner ) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    YYCOLUMN(yyextra->das_yycolumn = 0,"NEW LINE");
}

void das_accept_cpp_comment ( vector<CommentReader *> & crdi, yyscan_t scanner, DAS_YYLTYPE & li, const char * text ) {
    if ( crdi.empty() ) return;
    while ( !(text[0]=='/' && text[1]=='/') && *text ) text ++;
    if ( *text==0 ) return;
    auto tak = tokAt(scanner,li);
    for ( auto & crd : crdi ) crd->open(false, tak);
    for ( auto ch = text + 2; *ch!='\n'; ++ch ) {
        if ( *ch!='\r' ) {
            for ( auto & crd : crdi ) crd->accept(*ch, tak);
        }
    }
    for ( auto & crd : crdi ) crd->close(tak);
}

