# VCUpdateVer ?= 15.9.5 ;
# PlatformSpec_windows_x86 ?= vc15 ;

Root    ?= ../../.. ;
Location = prog/1stPartyLibs/daScript ;

include $(Root)/prog/_jBuild/defaults.jam ;

#WPO in win32 msvc2015 produces buggy code
if $(Platform)-$(PlatformArch) = windows-x86 && $(UseWholeOpt) = yes && ! $(PlatformSpec) in clang vc15 vc16 vc17 {
  CPPopt += /GL- ;
  Copt += /GL- ;
}

if $(PlatformSpec) in gcc {
  CPPopt += -Wno-stringop-overflow ;
}

TargetType  = lib ;
Target      = 1stPartyLibs/daScript.lib ;
AddIncludes =
  $(Root)/prog/1stPartyLibs/daScript/include
  $(Root)/prog/1stPartyLibs/daScript/include/modules/uriparser
  $(Root)/prog/3rdPartyLibs/uriparser/include
  $(Root)/prog/3rdPartyLibs/fmt/include
;

if $(daScript_MaxFunctionArgs) {
  Target = $(Target:S=~ma$(daScript_MaxFunctionArgs).lib) ;
  CPPopt += -DDAS_MAX_FUNCTION_ARGUMENTS=$(daScript_MaxFunctionArgs) ;
}

if $(daScript_Fusion) {
  Target = $(Target:S=~f$(daScript_Fusion).lib) ;
  CPPopt += -DDAS_FUSION=$(daScript_Fusion) ;
}

if $(daScript_trackAllocations) = 1 {
  Target = $(Target:S=~ta$(daScript_trackAllocations).lib) ;
  CPPopt += -DDAS_TRACK_ALLOCATIONS=$(daScript_trackAllocations) ;
}

if $(daScript_sanitizer) = 1 {
  Target = $(Target:S=~sa$(daScript_sanitizer).lib) ;
  CPPopt += -DDAS_SANITIZER=$(daScript_sanitizer) ;
}

if $(daScript_keepalive) = 1 {
  Target = $(Target:S=~ka$(daScript_keepalive).lib) ;
  CPPopt += -DDAS_ENABLE_KEEPALIVE=$(daScript_keepalive) ;
} else {
  CPPopt += -DDAS_ENABLE_KEEPALIVE=0 ;
}

if $(Platform) = macOS {
  CPPopt += -Wno-deprecated-declarations ;
}

# Fix for fmt library Unicode compilation errors
CPPopt += -DFMT_UNICODE=0 ;

if $(daScript_ConsoleExe) = yes {
  Target = $(Target:S=~s$(Target:S)) ;
  CPPopt += -DDAS_DEFAULT_STDOUT ;
}

BuiltinFolder = src/builtin ;
StringifySourceFile $(BuiltinFolder)/rtti.das : $(BuiltinFolder)/rtti.das.inc : $(BuiltinFolder)/module_builtin_rtti.cpp : "--full-string" ;
StringifySourceFile $(BuiltinFolder)/fio.das : $(BuiltinFolder)/fio.das.inc : $(BuiltinFolder)/module_builtin_fio.cpp : "--full-string" ;
StringifySourceFile $(BuiltinFolder)/builtin.das : $(BuiltinFolder)/builtin.das.inc : $(BuiltinFolder)/module_builtin_das.cpp : "--full-string" ;
StringifySourceFile $(BuiltinFolder)/ast.das : $(BuiltinFolder)/ast.das.inc : $(BuiltinFolder)/module_builtin_ast.cpp : "--full-string" ;
StringifySourceFile $(BuiltinFolder)/network.das : $(BuiltinFolder)/network.das.inc : $(BuiltinFolder)/module_builtin_network.cpp : "--full-string" ;
StringifySourceFile $(BuiltinFolder)/debugger.das : $(BuiltinFolder)/debugger.das.inc : $(BuiltinFolder)/module_builtin_debugger.cpp : "--full-string" ;

local AllSrcFolder_CPP = 
  src/ast
  src/builtin
  src/simulate
  src/misc
  src/parser
  src/modules/uriparser
;

AutoscanBuildLists $(AllSrcFolder_CPP) : *.cpp       : Sources ;

local ExcOpt ;
if $(Platform) in windows xboxOne scarlett {
  ExcOpt += /EHsc -D_HAS_EXCEPTIONS=1 -DDAS_ENABLE_EXCEPTIONS ;
} else {
  ExcOpt += -fexceptions -DDAS_ENABLE_EXCEPTIONS ;
  if $(Platform) in ps4 ps5 { ExcOpt += -D_HAS_DEBUG_COMPATIBILITY=1 ; } # for ool ~runtime_error impl
}
if $(PlatformSpec) = clang { ExcOpt += -Wno-macro-redefined ; }

# Workaround for `error C2220: the following warning is treated as an error
# warning C4743: 'const std::runtime_error::`vftable'' has different size in ...
if $(Platform)-$(PlatformArch) = windows-arm64 && $(PlatformSpec) != clang { ExcOpt += /GL- ; }

for s in $(Sources) {
  switch $(s) {
    case *_exceptions.cpp : opt on $(s) = $(ExcOpt) ;
    case *_ast_serialize.cpp : opt on $(s) = $(ExcOpt) ;
    case *runtime_string.cpp : opt on $(s) = $(ExcOpt) ;
    case *format.cpp : opt on $(s) = $(ExcOpt) ;
  }
}
if $(PlatformArch) = e2k { opt on src/simulate/simulate_gc.cpp = -Wno-overloaded-virtual ; }

UseProgLibs +=
  3rdPartyLibs/eastl
  3rdPartyLibs/uriparser
  3rdPartyLibs/fmt
;
if $(DAS_AOT_COMPILER) { UseProgLibs += 1stPartyLibs/daScript/daslib ; }

include $(Root)/prog/_jBuild/build.jam ;
