include "writeToTex.dshl"
include "atmosphere.dshl"
float skies_planet_radius = 6360;
include "statistical_clouds_shadow.dshl"

texture skies_transmittance_texture;
texture skies_ms_texture;

macro TRANSMITTANCE(code)
  ATMO(code)
  GET_ATMO(code)
  hlsl(code) {
    DimensionlessSpectrum ComputeTransmittanceToTopAtmosphereBoundaryTexture2(
      IN(AtmosphereParameters) atmosphere, IN(vec2) frag_coord) {
      const vec2 TRANSMITTANCE_TEXTURE_SIZE =
          vec2(TRANSMITTANCE_TEXTURE_WIDTH, TRANSMITTANCE_TEXTURE_HEIGHT);
      Length r;
      Number mu;
      GetRMuFromTransmittanceTextureUv(
          atmosphere, frag_coord / TRANSMITTANCE_TEXTURE_SIZE, r, mu);
      return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu, 2.*atmosphere.top_radius, 196,
      Position(0,0,0), Direction(0,0,0)//custom fog should not affect extinction _COLOR_.
      //also, unfortunately, it won't affect transmittance to sun
      );
    }
  }
endmacro

shader skies_generate_transmittance_ps//very first call
{
  WRITE_TO_TEX2D()
  TRANSMITTANCE(ps)
  hlsl(ps) {
    float4 skies_gen_ps(VsOutput input HW_USE_SCREEN_POS):SV_Target0
    {
      float4 sp = GET_SCREEN_POS(input.pos);
      return float4(saturate(ComputeTransmittanceToTopAtmosphereBoundaryTexture2(theAtmosphere, sp.xy)), 0.0);
    }
  }
  compile("target_ps", "skies_gen_ps")
}

shader skies_generate_transmittance_cs//very first call
{
  ENABLE_ASSERT(cs)
  TRANSMITTANCE(cs)
  hlsl(cs) {
    RWTexture2D<float4> OutputTexture:register(u0);
    [numthreads(8, 8, 1)]
    void skies_gen_cs(uint2 dtId : SV_DispatchThreadID)
    {
      texture2DAt(OutputTexture, dtId) = float4(saturate(ComputeTransmittanceToTopAtmosphereBoundaryTexture2(theAtmosphere, dtId + 0.5)), 0);
    }
  }
  compile("cs_5_0", "skies_gen_cs")
}

macro MS_APPROXIMATE(code)
  (code) {
    skies_transmittance_texture@smp2d = skies_transmittance_texture;
  }
  ATMO(code)
  GET_ATMO(code)
  hlsl(code) {
    #define SQRTSAMPLECOUNT 8
    #define NUM_RAYS (SQRTSAMPLECOUNT*SQRTSAMPLECOUNT)
    void calcRay(IN(AtmosphereParameters) atmosphere_p, float2 uv, uint rayI, uint rayJ, out float3 L, out float3 MultiScatAs1)
    {
      float PLANET_RADIUS_OFFSET = 0.01;
      float viewHeight = atmosphere_p.bottom_radius + saturate(uv.y + PLANET_RADIUS_OFFSET) * (atmosphere_p.top_radius - atmosphere_p.bottom_radius - PLANET_RADIUS_OFFSET);
      uv = float2(GetUnitRangeFromTextureCoord(uv.x, SKIES_MULTIPLE_SCATTERING_APPROX), GetUnitRangeFromTextureCoord(uv.y, SKIES_MULTIPLE_SCATTERING_APPROX));
      const float sqrtSample = float(SQRTSAMPLECOUNT);
      float3 WorldDir = float3(0.0f, 0.0f, 1.0f);

      float cosSunZenithAngle = uv.x * 2.0 - 1.0;
      float3 sunDir = float3(0.0, sqrt(saturate(1.0 - cosSunZenithAngle * cosSunZenithAngle)), cosSunZenithAngle);

      const float SphereSolidAngle = 4.0 * PI;
      const float IsotropicPhase = 1.0 / SphereSolidAngle;

      // Reference.
      float i = 0.5f + float(rayI);
      float j = 0.5f + float(rayJ);
      {
        float randA = i / sqrtSample;
        float randB = j / sqrtSample;
        float theta = 2.0f * PI * randA;
        float phi = PI * randB;
        float cosPhi = cos(phi);
        float sinPhi = sin(phi);
        float cosTheta = cos(theta);
        float sinTheta = sin(theta);
        WorldDir.x = cosTheta * sinPhi;
        WorldDir.y = sinTheta * sinPhi;
        WorldDir.z = cosPhi;

        ComputeMultipleScatteringApprox(
          atmosphere_p,
          SamplerTexture2DFromName(skies_transmittance_texture),
          32,
          viewHeight,WorldDir, sunDir,
          L, MultiScatAs1);
      }
      MultiScatAs1 *= (SphereSolidAngle*IsotropicPhase) / (sqrtSample * sqrtSample);//MultiScatAs1
      L *= (SphereSolidAngle*IsotropicPhase) / (sqrtSample * sqrtSample);
    }
  }
endmacro

shader skies_approximate_ms_lut_cs
{
  ENABLE_ASSERT(cs)
  MS_APPROXIMATE(cs)
  //WRITE_TO_TEX2D_TC()
  hlsl(cs) {
    groupshared float3 MultiScatAs1SharedMem[NUM_RAYS];
    groupshared float3 LSharedMem[NUM_RAYS];
    RWTexture2D<float4> OutputTexture:register(u0);

    [numthreads(1, 1, NUM_RAYS)]
    void skies_gen_cs(uint3 dtId : SV_DispatchThreadID)
    {
      float2 screenpos = float2(dtId.xy) + 0.5f;
      float2 uv = screenpos.xy / SKIES_MULTIPLE_SCATTERING_APPROX;
      // We adjust again viewHeight according to PLANET_RADIUS_OFFSET to be in a valid range.

      float3 L, MultiScatAs1;
      calcRay(theAtmosphere, uv, dtId.z / SQRTSAMPLECOUNT, dtId.z%SQRTSAMPLECOUNT, L, MultiScatAs1);
      MultiScatAs1SharedMem[dtId.z] = MultiScatAs1;//MultiScatAs1
      LSharedMem[dtId.z] = L;

      GroupMemoryBarrierWithGroupSync();
      #if NUMRAYS > 64
        if (dtId.z < 64)
        {
            MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 64];
            LSharedMem[dtId.z] += LSharedMem[dtId.z + 64];
        }
      #endif

      // 64 to 32
      if (dtId.z < 32)
      {
        MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 32];
        LSharedMem[dtId.z] += LSharedMem[dtId.z + 32];
      }
      GroupMemoryBarrierWithGroupSync();

      // 32 to 16
      if (dtId.z < 16)
      {
        MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 16];
        LSharedMem[dtId.z] += LSharedMem[dtId.z + 16];
      }
      GroupMemoryBarrierWithGroupSync();

      // 16 to 8 (16 is thread group min hardware size with intel, no sync required from there)
      if (dtId.z < 8)
      {
        MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 8];
        LSharedMem[dtId.z] += LSharedMem[dtId.z + 8];
      }
      if (dtId.z < 4)
      {
        MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 4];
        LSharedMem[dtId.z] += LSharedMem[dtId.z + 4];
      }
      if (dtId.z < 2)
      {
        MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 2];
        LSharedMem[dtId.z] += LSharedMem[dtId.z + 2];
      }
      if (dtId.z == 0)
      {
        MultiScatAs1SharedMem[dtId.z] += MultiScatAs1SharedMem[dtId.z + 1];
        LSharedMem[dtId.z] += LSharedMem[dtId.z + 1];
      }
      if (dtId.z > 0)
        return;

      float3 summedMultiScatAs1           = MultiScatAs1SharedMem[0];    // Equation 7 f_ms
      float3 summedInScatteredLuminance   = LSharedMem[0];               // Equation 5 L_2ndOrder

      // For a serie, sum_{n=0}^{n=+inf} = 1 + r + r^2 + r^3 + ... + r^n = 1 / (1.0 - r), see https://en.wikipedia.org/wiki/Geometric_series 
      const float3 r = summedMultiScatAs1;
      const float3 SumOfAllMultiScatteringEventsContribution = 1.0f / (1.0 - r);
      float3 MS = summedInScatteredLuminance * SumOfAllMultiScatteringEventsContribution;// Equation 10 Psi_ms

      texture2DAt(OutputTexture, dtId.xy) = float4(theAtmosphere.multiple_scattering_factor * MS, 0);
    }

  }
  compile("cs_5_0", "skies_gen_cs")
}


shader skies_approximate_ms_lut_ps
{
  MS_APPROXIMATE(ps)
  WRITE_TO_TEX2D_TC()
  hlsl(ps) {
    float4 skies_gen_ps(VsOutput input HW_USE_SCREEN_POS): SV_Target0
    {
      float4 sp = GET_SCREEN_POS(input.pos); 
      float2 uv = sp.xy / SKIES_MULTIPLE_SCATTERING_APPROX;
      // We adjust again viewHeight according to PLANET_RADIUS_OFFSET to be in a valid range.
      float3 summedInScatteredLuminance = 0, summedMultiScatAs1 = 0;
      for (int i = 0; i < SQRTSAMPLECOUNT; ++i)
      for (int j = 0; j < SQRTSAMPLECOUNT; ++j)
      {
        float3 L, MultiScatAs1;
        calcRay(theAtmosphere, uv, i, j, L, MultiScatAs1);
        summedInScatteredLuminance += L;
        summedMultiScatAs1 += MultiScatAs1;
      }
      // For a serie, sum_{n=0}^{n=+inf} = 1 + r + r^2 + r^3 + ... + r^n = 1 / (1.0 - r), see https://en.wikipedia.org/wiki/Geometric_series 
      const float3 r = summedMultiScatAs1;
      const float3 SumOfAllMultiScatteringEventsContribution = 1.0f / (1.0 - r);
      float3 MS = summedInScatteredLuminance * SumOfAllMultiScatteringEventsContribution;// Equation 10 Psi_ms

      return float4(theAtmosphere.multiple_scattering_factor * MS, 0.0);
    }

  }
  compile("target_ps", "skies_gen_ps")
}

shader indirect_irradiance_ms
{
  WRITE_TO_TEX2D_TC()
  GET_STATISTICAL_SHADOW(ps)
  ATMO(ps)
  GET_ATMO(ps)
  (ps) {
    skies_transmittance_texture@smp2d = skies_transmittance_texture;
    skies_ms_texture@smp2d = skies_ms_texture;
  }

  hlsl(ps){
    float4 indirect_irradiance_ms(VsOutput input HW_USE_SCREEN_POS): SV_Target0
    {
      float4 sp = GET_SCREEN_POS(input.pos);
      float3 indirect_irradiance = ComputeIndirectIrradianceTextureMS(theAtmosphere, SamplerTexture2DFromName(skies_transmittance_texture),
        SamplerTexture2DFromName(skies_ms_texture), sp.xy);
      return float4(indirect_irradiance, 0.0);
    }
  }
  compile("target_ps", "indirect_irradiance_ms")
}

shader indirect_irradiance_ms_cs
{
  //WRITE_TO_TEX2D_TC()
  ENABLE_ASSERT(cs)
  GET_STATISTICAL_SHADOW(cs)
  ATMO(cs)
  GET_ATMO(cs)
  (cs) {
    skies_transmittance_texture@smp2d = skies_transmittance_texture;
    skies_ms_texture@smp2d = skies_ms_texture;
  }
  hlsl(cs) {
    #define SAMPLE_COUNT 8
    #define NUM_RAYS SAMPLE_COUNT*SAMPLE_COUNT
    groupshared float3 ray[NUM_RAYS];
    RWTexture2D<float4> OutputTexture:register(u0);

    [numthreads(NUM_RAYS, 1, 1)]
    void skies_gen_cs(uint threadId : SV_GroupIndex, uint3 gId:SV_GroupID)
    {
      float2 screenpos = float2(gId.xy) + 0.5f;
      float2 uv = screenpos.xy / SKIES_MULTIPLE_SCATTERING_APPROX;
      Length r;
      Number mu_s;
      GetRMuSFromIrradianceTextureUv(
          theAtmosphere, screenpos / vec2(IRRADIANCE_TEXTURE_WIDTH, IRRADIANCE_TEXTURE_HEIGHT), r, mu_s);

      IrradianceSpectrum result =
          IrradianceSpectrum(0.0 * watt_per_square_meter_per_nm,0.0 * watt_per_square_meter_per_nm,0.0 * watt_per_square_meter_per_nm);
      vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);
      int j = threadId/(2 * SAMPLE_COUNT);
      int i = threadId%(2 * SAMPLE_COUNT);
      const Angle dphi = PI / Number(SAMPLE_COUNT);
      const Angle dtheta = PI / Number(SAMPLE_COUNT);
      Angle theta = (Number(j) + 0.5) * dtheta;
      Angle phi = (Number(i) + 0.5) * dphi;
      vec3 omega =
          vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
      SolidAngle domega = (dtheta / rad) * (dphi / rad) * sin(theta) * sr;

      Number nu = dot(omega, omega_s);
      SingleScatteringResult ss = IntegrateScatteredLuminanceMS(
          theAtmosphere,
          SamplerTexture2DFromName(skies_transmittance_texture),
          SamplerTexture2DFromName(skies_ms_texture),
          0,0,0,//shadows
          32, true, float2(16,16),
          r, omega.z, nu, mu_s,
          false);

      ray[threadId] = ss.L * omega.z * domega * theAtmosphere.solar_irradiance;
      // We adjust again viewHeight according to PLANET_RADIUS_OFFSET to be in a valid range.

      GroupMemoryBarrierWithGroupSync();
      #define SUM_RAY(i) \
        if (NUM_RAYS > i) { if (threadId < i) ray[threadId] += ray[threadId + i]; GroupMemoryBarrierWithGroupSync(); }
      #define SUM_RAY_TAIL(i) \
        if (NUM_RAYS > i) { if (threadId < i) ray[threadId] += ray[threadId + i]; }

      SUM_RAY(128)
      SUM_RAY(64)
      SUM_RAY(32)
      SUM_RAY(16)
      SUM_RAY_TAIL(8)
      SUM_RAY_TAIL(4)
      SUM_RAY_TAIL(2)
      if (threadId == 0)
      {
        texture2DAt(OutputTexture, gId.xy) = float4(ray[0] + ray[1], 0);
      }
    }

  }
  compile("cs_5_0", "skies_gen_cs")
}
