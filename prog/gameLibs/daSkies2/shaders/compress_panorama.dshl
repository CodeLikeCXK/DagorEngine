include "shader_global.dshl"
include "etc2_compression_inc.dshl"
include "bc_compression_inc.dshl"
include "rgbm_inc.dshl"

texture src_tex;
float src_mip = 0;
float dst_mip = 0;

float4 panorama_rect = (1, 1, 0, 0);
int panorama_stride_count = 1;
int panorama_height = 1024;

int src_face = -1;
interval src_face : src_single_face < 0, src_cube;

shader compress_panorama_bc3
{
  supports none;
  supports global_frame;

  cull_mode  = none;
  z_test = false;
  z_write = false;
  no_ablend;

  (ps) {
    src_tex@smp2d = src_tex;
    panorama_rect@f4 = (1/panorama_rect.x, 1/panorama_rect.y, panorama_rect.z, panorama_rect.w);
    stride_count@i1 = (panorama_stride_count, 0, 0, 0);
  }

  channel float4 pos = pos;

  hlsl
  {
    struct VsOutput
    {
      VS_OUT_POSITION( pos )
      float4 tex    : TEXCOORD0;
    };
  }
  DECL_POSTFX_TC_VS_RT()
  hlsl(vs)
  {
    VsOutput bc_compressor_vs( float4 pos : POSITION )
    {
      VsOutput output;
      output.pos = float4( pos.x, pos.y, 0.f, 1.f );
      output.tex.xy = pos.xy * RT_SCALE_HALF + float2( 0.5f, 0.5f );

      float2 size = pos.zw;
      float2 invSize = float2(1,1)/size;
      output.tex.xy = output.tex.xy - min(2*invSize, 0.5);
      output.tex.zw = invSize;
      return output;
    }
  }

  USE_BC3_COMPRESSION(ps)

  USE_DEF_RGBM_SH()

  hlsl(ps)
  {
    #include "get_cubemap_vector.hlsl"
    #include "bc_compression.hlsl"

    uint4 bc_compressor_ps( VsOutput input ) : SV_Target
    {
      float2 tc = float2(input.tex.xy*panorama_rect.xy+panorama_rect.zw);
      float2 src_texel_size  = float2(input.tex.z, input.tex.w/stride_count);

      #define GET_TEXEL(x, y) tex2D(src_tex, tc + float2(x, y) * src_texel_size)

      half4 texels[16] = {
        GET_TEXEL(0,0),GET_TEXEL(1,0),GET_TEXEL(2,0),GET_TEXEL(3,0),
        GET_TEXEL(0,1),GET_TEXEL(1,1),GET_TEXEL(2,1),GET_TEXEL(3,1),
        GET_TEXEL(0,2),GET_TEXEL(1,2),GET_TEXEL(2,2),GET_TEXEL(3,2),
        GET_TEXEL(0,3),GET_TEXEL(1,3),GET_TEXEL(2,3),GET_TEXEL(3,3)
      };

      half4 min_color, max_color;
      find_base_colors( texels, min_color, max_color );
      min_color = encode_rgbm(min_color.rgb, rgbm_conversion_scale);
      max_color = encode_rgbm(max_color.rgb, rgbm_conversion_scale);
      for(int i = 0; i < 16; i++)
        texels[i] = encode_rgbm(texels[i].rgb, rgbm_conversion_scale);

      refine_rgb_base_colors( texels, min_color, max_color );
      return pack_bc3_block( texels, min_color, max_color );
    }
  }
  compile( "target_vs", "bc_compressor_vs" );
  compile( "target_ps", "bc_compressor_ps" );
}

shader compress_panorama_etc2
{
  supports none;

  (cs) {
    src_dst_mip@f2 = (src_mip, dst_mip, 0, 0);
    src_tex@smp2d = src_tex;
    panorama_rect@f4 = (1/panorama_rect.x, 1/panorama_rect.y, panorama_rect.z, panorama_rect.w);
    panorama_height@i1 = (panorama_height, 0, 0, 0);
  }

  ENABLE_ASSERT(cs)
  USE_RGBM_SH(cs)

  INIT_ETC2_COMPRESSION()

  hlsl(cs)
  {
    [numthreads( 4, 4, 1 )]
    void bc_compressor_cs(uint3 dtId : SV_DispatchThreadID)
    {
      #define GET_TEXEL(xx, yy) encode_rgbm(texelFetch(src_tex, (uv + uint2(xx, yy) \
              + uint2(0, panorama_rect.w*panorama_height)), src_dst_mip.x).rgb, rgbm_conversion_scale)

      uint2 uv = dtId.xy*4;
      const float4 texels[16] = {
        GET_TEXEL(0, 0), GET_TEXEL(1, 0), GET_TEXEL(2, 0), GET_TEXEL(3, 0),
        GET_TEXEL(0, 1), GET_TEXEL(1, 1), GET_TEXEL(2, 1), GET_TEXEL(3, 1),
        GET_TEXEL(0, 2), GET_TEXEL(1, 2), GET_TEXEL(2, 2), GET_TEXEL(3, 2),
        GET_TEXEL(0, 3), GET_TEXEL(1, 3), GET_TEXEL(2, 3), GET_TEXEL(3, 3)
      };
      #undef GET_TEXEL
      texture2DAt(compressedTexture, dtId.xy) = CompressBlock_ETC2_RGBA(texels);
    }
  }

  compile( "target_cs", "bc_compressor_cs" );
}
