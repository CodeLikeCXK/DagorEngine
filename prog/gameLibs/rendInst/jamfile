Root    ?= ../../.. ;
StrictCompile = yes ;
include $(Root)/prog/_jBuild/defaults.jam ;

Location = prog/gameLibs/rendInst ;

TargetType  = lib ;
Target      = gameLibs/rendInst.lib ;

HaveRenderer ?= yes ;

AddIncludes =
  $(Root)/prog/gameLibs/publicInclude
  $(Root)/$(Location)
;

Sources =
  dumpCollisions.cpp
  rendInstAccess.cpp
  rendInstExtraAccess.cpp
  rendInstCommon.cpp
  rendInstGen.cpp
  rendInstGenLand.cpp
  rendInstGenCollision.cpp
  rendInstGenExtra.cpp
  rendInstGenExtraMaxHeight.cpp
  rendInstGenDebris.cpp
  rendInstGenGlobals.cpp
  rendInstRotationPalette.cpp
  rendInstGenRtTools.cpp
  rendInstUtil.cpp
  rendInstStubRes.cpp
  rendInstDesc.cpp
  riGrid.cpp
  riGridDebug.cpp
  treeDestr.cpp

  render/clipmapShadow.cpp
  render/gpuObjects.cpp
  render/genRender.cpp
  render/impostor.cpp
  render/extraRender.cpp
  render/clipShadows.cpp
  render/depthShadows.cpp
  render/riShaderConstBuffers.cpp
  render/extra/consoleHandler.cpp
  render/riGenRenderer.cpp

  visibility/genVisibility.cpp
  visibility/extraVisibility.cpp

  debug/collisionVisualization.cpp
  debug/rendinstRulerDebug.cpp
;

if $(HaveRenderer) = yes {
  Sources += impostorTextureMgr.cpp ;
} else {
  Sources += stub/impostorTextureMgr.cpp ;
  Target = $(Target:S=~nrdr.lib) ;
}

# Workaround buggy msvc 32-bit compiler
if $(PlatformSpec) in vc15 vc16 vc17 && $(PlatformArch) in x86 {
  opt on riGrid.cpp = /GS- ;
}

CPPopt = -DUSE_GRID_FOR_RI=true ;
if $(BuildingTools) = yes { Target = $(Target:S=~t.lib) ; CPPopt += -D_TARGET_PC_TOOLS_BUILD ; }

UseProgLibs =
  gameLibs/render/texcompressors
  gameLibs/render/primitiveObjects
  gameLibs/render/debug3dSolid
  gameLibs/render/pointLod
  engine/lib3d
  engine/libFx
  engine/consoleProc
  3rdPartyLibs/regExp
  gameLibs/gpuObjects
  gameLibs/gameMath # for read_interpolate_tab_float_p2() in treeDestr.cpp
;

if $(Config) != rel
{
  UseProgLibs += gameLibs/render/debugMesh ;
}
else
{
  UseProgLibs += gameLibs/render/debugMesh/stub ;
}

include $(Root)/prog/_jBuild/build.jam ;
