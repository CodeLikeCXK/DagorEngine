include "skyLight.dshl"
int4 dagi_irrad_grid_clipmap_sizei;
int4 dagi_irrad_grid_clipmap_sizei_np2;
int4 dagi_irrad_grid_clipmap_lt_coord_0;
int4 dagi_irrad_grid_clipmap_lt_coord_1;
int4 dagi_irrad_grid_clipmap_lt_coord_2;
int4 dagi_irrad_grid_clipmap_lt_coord_3;
int4 dagi_irrad_grid_clipmap_lt_coord_4;
int4 dagi_irrad_grid_clipmap_lt_coord_5;
int4 dagi_irrad_grid_clipmap_lt_coord_6;
int4 dagi_irrad_grid_clipmap_lt_coord_7;
int4 dagi_irrad_grid_clipmap_lt_invalid = (-100000, 100000, 100000, 1315859240);
float4 dagi_irrad_grid_atlas_decode;
float4 dagi_irrad_grid_inv_size;

texture dagi_irradiance_grid_sph0;
texture dagi_irradiance_grid_sph1;
hlsl {
  #define DAGI_IRRADIANCE_GRID_TYPE_AUTO 0
  #define DAGI_IRRADIANCE_GRID_TYPE_SKYVIS 1
  #define DAGI_IRRADIANCE_GRID_TYPE_IRRADIANCE 2
}

macro DAGI_IRRAD_GRID_CLIPMAP_MATH_INIT(code)
  (code) {
    dagi_irrad_grid_clipmap_sizei@i4 = dagi_irrad_grid_clipmap_sizei;
    dagi_irrad_grid_clipmap_sizei_np2@i4 = dagi_irrad_grid_clipmap_sizei_np2;
    dagi_irrad_grid_clipmap_lt_coord@i4[] = {dagi_irrad_grid_clipmap_lt_coord_0, dagi_irrad_grid_clipmap_lt_coord_1, dagi_irrad_grid_clipmap_lt_coord_2, dagi_irrad_grid_clipmap_lt_coord_3, dagi_irrad_grid_clipmap_lt_coord_4, dagi_irrad_grid_clipmap_lt_coord_5, dagi_irrad_grid_clipmap_lt_coord_6, dagi_irrad_grid_clipmap_lt_coord_7, dagi_irrad_grid_clipmap_lt_invalid};
  }
endmacro

macro DAGI_IRRAD_GRID_CLIPMAP_MATH_USE(code)
  hlsl (code) {
    #include "dagi_irrad_grid.hlsli"
    uint2 dagi_irrad_grid_get_clip_size() {return uint2(dagi_irrad_grid_clipmap_sizei.xy);}
    uint dagi_irrad_grid_get_clip_count() {return dagi_irrad_grid_clipmap_sizei.z;}
    uint dagi_irrad_grid_get_clip_size_with_border() {return dagi_irrad_grid_clipmap_sizei.w;}

    #define sample_dagi_irrad_grid_clipmap_lt_coord(clip) _sample_dagi_irrad_grid_clipmap_lt_coord(clip, _FILE_, __LINE__)
    int4 _sample_dagi_irrad_grid_clipmap_lt_coord(uint clip, int file, int ln)
    {
      // 9 is hardcoded currently. TODO: support array size in preshader for such checks.
      ##assert(clip < 9, "[%s:%.f] Out of bounds: Buffer 'dagi_irrad_grid_clipmap_lt_coord' has size 9, but access to (%.f)", file, ln, clip);
      return dagi_irrad_grid_clipmap_lt_coord[clip];
    }
    int3 dagi_irrad_grid_abs_coord_lt(uint clip) {return sample_dagi_irrad_grid_clipmap_lt_coord(clip).xyz;}
    float dagi_irrad_grid_probe_size(uint clip) {return asfloat(sample_dagi_irrad_grid_clipmap_lt_coord(clip).w);}

    float3 dagi_irrad_grid_abs_coordi_to_world_pos(int3 coord, uint clip)
    {
      return (coord.xzy+0.5)*dagi_irrad_grid_probe_size(clip);
    }

    float3 dagi_irrad_grid_world_pos_to_abs_coord(float3 worldPos, uint clip)
    {
      return worldPos.xzy/dagi_irrad_grid_probe_size(clip);
    }

    uint3 dagi_irrad_grid_wrapped_coord_from_abs_coord(int3 abs_coord)
    {
      #if DAGI_IRRAD_GRID_ALLOW_NON_POW2
      //non-pow2
      return uint3(dagi_irrad_grid_clipmap_sizei_np2.zzw + abs_coord)%uint3(dagi_irrad_grid_clipmap_sizei_np2.xxy);
      #endif
      //pow2
      return uint3(abs_coord)%dagi_irrad_grid_get_clip_size().xxy;
    }

    int3 dagi_irrad_grid_abs_coord_from_wrapped_coord(uint3 wrapped, int3 clip_lt)
    {
      #if DAGI_IRRAD_GRID_ALLOW_NON_POW2
      //non-pow2
      return clip_lt + int3(uint3(int3(wrapped) - clip_lt.xyz + dagi_irrad_grid_clipmap_sizei_np2.zzw)%uint3(dagi_irrad_grid_clipmap_sizei_np2.xxy));
      #endif
      //pow2
      return clip_lt + int3(uint3(int3(wrapped) - clip_lt.xyz)%dagi_irrad_grid_get_clip_size().xxy);
    }

    int3 dagi_irrad_grid_abs_coord_from_wrapped_coord(uint3 wrapped, uint clip)
    {
      return dagi_irrad_grid_abs_coord_from_wrapped_coord(wrapped, sample_dagi_irrad_grid_clipmap_lt_coord(clip).xyz);
    }

    uint dagi_irrad_grid_get_best_enclosing_clip(float3 worldPos, out float3 coordF, out int4 lt, uint start, float border)
    {
      uint i = start;
      LOOP
      do {
        lt = sample_dagi_irrad_grid_clipmap_lt_coord(i);
        coordF = worldPos.xzy/asfloat(lt.w);
        float3 coordLt = coordF - lt.xyz;
        if (all(and(coordLt > border, coordLt < float3(dagi_irrad_grid_get_clip_size().xxy) - border)))
          return i;
        ++i;// moving that to while () causes invalid shader compilation on dx11
      } while (i < dagi_irrad_grid_get_clip_count());
      return DAGI_MAX_IRRAD_GRID_CLIPS;
    }
    uint dagi_irrad_grid_get_best_enclosing_clip(float3 worldPos, out float3 coordF, uint start)
    {
      int4 lt;
      return dagi_irrad_grid_get_best_enclosing_clip(worldPos, coordF, lt, start, 0.5);
    }
  }
endmacro

macro DAGI_IRRAD_GRID_CLIPMAP_MATH(code)
  DAGI_IRRAD_GRID_CLIPMAP_MATH_INIT(code)
  DAGI_IRRAD_GRID_CLIPMAP_MATH_USE(code)
endmacro

macro DAGI_IRRAD_GRID_ATLAS_INIT(code)
  (code) {
    dagi_irrad_grid_atlas_decode@f4 = dagi_irrad_grid_atlas_decode;
    dagi_irrad_grid_inv_size@f2 = dagi_irrad_grid_inv_size;
    skyVis_enviSPH0 @f4 = enviSPH0;
    skyVis_enviSPH1 @f4 = enviSPH1;
    skyVis_enviSPH2 @f4 = enviSPH2;
  }
endmacro

macro DAGI_IRRAD_GRID_ATLAS_USE(code)
  hlsl(code) {
    bool dagi_irrad_is_sky_vis() {return dagi_irrad_grid_atlas_decode.w == 2;}
    float3 dagi_irrad_grid_clip_tc_to_atlas_tc(uint cascade, float3 tc)
    {
      return float3(tc.xy, frac(tc.z)*dagi_irrad_grid_atlas_decode.x + cascade*dagi_irrad_grid_atlas_decode.y + dagi_irrad_grid_atlas_decode.z);
    }

    float3 dagi_irrad_grid_abs_coord_to_atlas_tc(uint cascade, float3 abs_coordf)
    {
      float3 clipTC = abs_coordf * dagi_irrad_grid_inv_size.xxy;
      return dagi_irrad_grid_clip_tc_to_atlas_tc(cascade, clipTC);
    }
  }
endmacro
macro DAGI_IRRAD_GRID_ATLAS(code)
  DAGI_IRRAD_GRID_ATLAS_INIT(code)
  DAGI_IRRAD_GRID_ATLAS_USE(code)
endmacro

macro DAGI_IRRAD_GRID_SRV(code)
  (code) {
    dagi_irradiance_grid_sph1@smp3d = dagi_irradiance_grid_sph1;
    dagi_irradiance_grid_sph0@tex = dagi_irradiance_grid_sph0  hlsl {
      Texture3D<float3> dagi_irradiance_grid_sph0@tex;
    };
  }
endmacro

macro DAGI_IRRADIANCE_GRID_SAMPLE_INIT(code)
  DAGI_IRRAD_GRID_SRV(code)
  DAGI_IRRAD_GRID_CLIPMAP_MATH_INIT(code)
  DAGI_IRRAD_GRID_ATLAS_INIT(code)
endmacro

macro DAGI_IRRADIANCE_GRID_SAMPLE_USE(code)
  DAGI_IRRAD_GRID_CLIPMAP_MATH_USE(code)
  DAGI_IRRAD_GRID_ATLAS_USE(code)
  hlsl(code) {
    #define dagi_irradiance_grid_sph0_samplerstate dagi_irradiance_grid_sph1_samplerstate
    #ifndef DAGI_IRRADIANCE_GRID_TYPE_AUTO
      #define DAGI_IRRADIANCE_GRID_TYPE DAGI_IRRADIANCE_GRID_TYPE_AUTO
    #endif

    #include "sh3_function.hlsl"
    #include "sh1.hlsl"
    SH1Encoded dagi_irrad_grid_get_irradiance_sh1_encoded(float3 uvw)
    {
      SH1Encoded sh1;
      sh1.ambient = tex3Dlod(dagi_irradiance_grid_sph0, float4(uvw, 0)).xyz;
      sh1.directional = tex3Dlod(dagi_irradiance_grid_sph1, float4(uvw, 0));
      return sh1;
    }

    float3 dagi_irrad_grid_get_diffuse_uvw(float3 uvw, float3 worldDir)
    {
      SH1Encoded sh1E = dagi_irrad_grid_get_irradiance_sh1_encoded(uvw);
      #if DAGI_IRRADIANCE_GRID_TYPE != DAGI_IRRADIANCE_GRID_TYPE_IRRADIANCE
        #if DAGI_IRRADIANCE_GRID_TYPE != DAGI_IRRADIANCE_GRID_TYPE_SKYVIS
          BRANCH
          if (dagi_irrad_is_sky_vis())
        #endif
          return GetSHFunctionValueSimple(worldDir, skyVis_enviSPH0*sh1E.directional.wyzx, skyVis_enviSPH1*sh1E.directional.wyzx, skyVis_enviSPH2*sh1E.directional.wyzx);
      #endif
      return sh1_premul_exp1_irradiance(decode_sh1_luminance(sh1E), worldDir);
    }
    float3 dagi_irrad_grid_get_diffuse_undirectional_uvw(float3 uvw)
    {
      SH1Encoded sh1E = dagi_irrad_grid_get_irradiance_sh1_encoded(uvw);
      #if DAGI_IRRADIANCE_GRID_TYPE != DAGI_IRRADIANCE_GRID_TYPE_IRRADIANCE
        #if DAGI_IRRADIANCE_GRID_TYPE != DAGI_IRRADIANCE_GRID_TYPE_SKYVIS
          BRANCH
          if (dagi_irrad_is_sky_vis())
        #endif
            return float3(skyVis_enviSPH0.w, skyVis_enviSPH1.w, skyVis_enviSPH2.w)*sh1E.directional.x;
      #endif
      return sh1_premul_exp1_ambient(decode_sh1_luminance(sh1E));
    }

    void dagi_irrad_grid_get_diffuse_uvw_both(float3 uvw, float3 worldDir, out float3 pos_amb, out float3 neg_amb)
    {
      SH1Encoded sh1E = dagi_irrad_grid_get_irradiance_sh1_encoded(uvw);
      #if DAGI_IRRADIANCE_GRID_TYPE != DAGI_IRRADIANCE_GRID_TYPE_IRRADIANCE
        #if DAGI_IRRADIANCE_GRID_TYPE != DAGI_IRRADIANCE_GRID_TYPE_SKYVIS
          BRANCH
          if (dagi_irrad_is_sky_vis())
        #endif
      {
        pos_amb = GetSHFunctionValueSimple(worldDir, skyVis_enviSPH0*sh1E.directional.wyzx, skyVis_enviSPH1*sh1E.directional.wyzx, skyVis_enviSPH2*sh1E.directional.wyzx);
        neg_amb = GetSHFunctionValueSimple(-worldDir, skyVis_enviSPH0*sh1E.directional.wyzx, skyVis_enviSPH1*sh1E.directional.wyzx, skyVis_enviSPH2*sh1E.directional.wyzx);
        return;
      }
      #endif
      SH1 s = decode_sh1_luminance(sh1E);
      pos_amb = sh1_premul_exp1_irradiance(s, worldDir);
      neg_amb = sh1_premul_exp1_irradiance(s, -worldDir);
    }

    void dagi_irrad_grid_diffuse_cascade_unsafe_both(uint cascade, float3 abs_coordf, float3 worldDir, out float3 pos_amb, out float3 neg_amb)
    {
      dagi_irrad_grid_get_diffuse_uvw_both(dagi_irrad_grid_abs_coord_to_atlas_tc(cascade, abs_coordf), worldDir, pos_amb, neg_amb);
    }
    float3 dagi_irrad_grid_diffuse_cascade_unsafe(uint cascade, float3 abs_coordf, float3 worldDir)
    {
      return dagi_irrad_grid_get_diffuse_uvw(dagi_irrad_grid_abs_coord_to_atlas_tc(cascade, abs_coordf), worldDir);
    }
    float3 dagi_irrad_grid_diffuse_undirectional_cascade_unsafe(uint cascade, float3 abs_coordf)
    {
      return dagi_irrad_grid_get_diffuse_undirectional_uvw(dagi_irrad_grid_abs_coord_to_atlas_tc(cascade, abs_coordf));
    }
    SH1Encoded dagi_irrad_grid_get_sh1_encoded_cascade_unsafe(uint cascade, float3 abs_coordf)
    {
      return dagi_irrad_grid_get_irradiance_sh1_encoded(dagi_irrad_grid_abs_coord_to_atlas_tc(cascade, abs_coordf));
    }
    bool dagi_irrad_grid_diffuse(float3 worldPos, float3 worldDir, inout float3 ambient)
    {
      float3 coordF;
      uint cascade = dagi_irrad_grid_get_best_enclosing_clip(worldPos, coordF, 0);
      if (cascade == DAGI_MAX_IRRAD_GRID_CLIPS)
        return false;
      ambient = dagi_irrad_grid_diffuse_cascade_unsafe(cascade, coordF, worldDir);
      return true;
    }
    bool dagi_irrad_grid_diffuse_undirectional(float3 worldPos, float3 worldDir, inout float3 ambient)
    {
      float3 coordF;
      uint cascade = dagi_irrad_grid_get_best_enclosing_clip(worldPos, coordF, 0);
      if (cascade == DAGI_MAX_IRRAD_GRID_CLIPS)
        return false;
      ambient = dagi_irrad_grid_diffuse_undirectional_cascade_unsafe(cascade, coordF);
      return true;
    }
    bool dagi_irrad_grid_diffuse_both_dir(float3 worldPos, float3 worldDir, inout float3 ambient, inout float3 back_ambient)
    {
      float3 coordF;
      uint cascade = dagi_irrad_grid_get_best_enclosing_clip(worldPos, coordF, 0);
      if (cascade == DAGI_MAX_IRRAD_GRID_CLIPS)
        return false;
      dagi_irrad_grid_diffuse_cascade_unsafe_both(cascade, coordF, worldDir, ambient, back_ambient);
      return true;
    }
    bool dagi_irrad_grid_bias(float3 worldPos, float3 toCameraDir, float maxCameraDist, float3 bias_normal, inout float3 coordF, inout uint cascade)
    {
      int4 lt;
      cascade = dagi_irrad_grid_get_best_enclosing_clip(worldPos, coordF, lt, 0, 0.5);
      float probeSize = asfloat(lt.w);
      coordF += bias_normal.xzy*((sqrt(3)*0.5));
      coordF += toCameraDir.xzy*min(maxCameraDist/probeSize, (sqrt(3)*0.5));
      coordF = clamp(coordF, lt.xyz+0.5, (lt.xyz + int3(dagi_irrad_grid_get_clip_size().xxy)) - 0.5);
      return cascade != DAGI_MAX_IRRAD_GRID_CLIPS;
    }
    bool dagi_irrad_grid_diffuse_biased(float3 worldPos, float3 worldDir, float3 toCameraDir, float maxCameraDist, float3 bias_normal, inout float3 ambient)
    {
      float3 coordF;
      uint cascade;
      if (!dagi_irrad_grid_bias(worldPos, toCameraDir, maxCameraDist, bias_normal, coordF, cascade))
        return false;
      ambient = dagi_irrad_grid_diffuse_cascade_unsafe(cascade, coordF, worldDir);
      return true;
    }
    bool dagi_irrad_grid_diffuse_biased_both_dir(float3 worldPos, float3 worldDir, float3 toCameraDir, float maxCameraDist, float3 bias_normal, inout float3 ambient, inout float3 back_ambient)
    {
      float3 coordF;
      uint cascade;
      if (!dagi_irrad_grid_bias(worldPos, toCameraDir, maxCameraDist, bias_normal, coordF, cascade))
        return false;
      dagi_irrad_grid_diffuse_cascade_unsafe_both(cascade, coordF, worldDir, ambient, back_ambient);
      return true;
    }
    bool dagi_irrad_grid_diffuse_biased_smooth_cascade(float3 worldViewPos, float3 worldPos, float3 toCameraDir, float maxCameraDist, float3 bias_normal, float dither, inout uint cascade, inout float3 coordF, inout float vignette)
    {
      int4 lt;
      // absolutely safe border would be 0.5 + sqrt(3) (0.5 for trilinear filtering) + normal offsetting = sqrt(3)
      // as normal offsetting can move up to 0.5*sqrt(3) * offsetProbeSize which is probeSize*(1+vignette), vignette < 1,
      // so, altogether no more than 0.5*sqrt(3)*2 = sqrt(3)
      // second offsetting, moving towards camera, CAN NOT move out of cascade in normal circumstances
      // now, normal offsetting will typically move INSIDE of cascade (towards camera), as usually normals are not facing in the opposite direction!
      // ofc, we can be delayed with updating cascade, and so causing some of discrepancies (which is safe due to clamping ofc)
      float border = 0.5;
      cascade = dagi_irrad_grid_get_best_enclosing_clip(worldPos, coordF, lt, 0, border);
      if (cascade == DAGI_MAX_IRRAD_GRID_CLIPS)
        return false;
      float probeSize = asfloat(lt.w);
      //float3 fromC = abs((worldPos.xzy-worldViewPos.xzy)*rcp(0.5*dagi_irrad_grid_get_clip_size().xxy*probeSize));
      float3 fromC = abs((coordF - worldViewPos.xzy/probeSize)*rcp(0.5*dagi_irrad_grid_get_clip_size().xxy - (DAGI_IRRAD_GRID_MOVE_THRESHOLD + 1 + border)));
      bool lastCascade = cascade + 1 == dagi_irrad_grid_get_clip_count();
      FLATTEN
      if (lastCascade)
        dither = 0;
      float3 ditherMul = float3(3, 0.125, 2 + 0.125);
      float3 sz = saturate(fromC*(ditherMul.x + ditherMul.y*dither) - ditherMul.z);
      vignette = saturate(dot(sz,sz));
      if (vignette == 1 && lastCascade)
        return false;
      FLATTEN
      if (vignette == 1)
      {
        cascade = cascade + 1;
        lt = sample_dagi_irrad_grid_clipmap_lt_coord(cascade);
        probeSize = asfloat(lt.w);
        fromC *= 0.5;
        sz = saturate(fromC*(ditherMul.x + ditherMul.y*dither) - ditherMul.z);
        vignette = saturate(dot(sz,sz));
      }

      float offsetProbeSize = probeSize + probeSize*vignette;

      worldPos += bias_normal*((sqrt(3)*0.5)*offsetProbeSize);
      worldPos += toCameraDir*min(maxCameraDist, ((sqrt(3)*0.5)*offsetProbeSize));
      coordF = worldPos.xzy/probeSize;
      //clamp to cascade, for safety
      coordF = clamp(coordF, lt.xyz+0.5, (lt.xyz + int3(dagi_irrad_grid_get_clip_size().xxy)) - 0.5);
      return true;
    }

    bool dagi_irrad_grid_diffuse_biased_smooth(float3 worldViewPos, float3 worldPos, float3 worldDir, float3 toCameraDir, float maxCameraDist, float3 bias_normal, float dither, inout float3 ambient)
    {
      uint cascade; float3 coordF; float vignette;
      if (!dagi_irrad_grid_diffuse_biased_smooth_cascade(worldViewPos, worldPos, toCameraDir, maxCameraDist, bias_normal, dither, cascade, coordF, vignette))
        return false;
      //optimize me
      half3 ambientBase = dagi_irrad_grid_diffuse_cascade_unsafe(cascade, coordF, worldDir);

      float3 nextLt = dagi_irrad_grid_abs_coord_lt(cascade + 1u);
      FLATTEN
      if (cascade + 1u < dagi_irrad_grid_get_clip_count())
        ambient = ambientBase;
      coordF = coordF*0.5 - nextLt;
      BRANCH
      if (all(and(coordF > 0, coordF < float3(dagi_irrad_grid_get_clip_size().xxy))) && vignette > 0)
        ambient = dagi_irrad_grid_diffuse_cascade_unsafe(cascade+1, nextLt + clamp(coordF, 0.5, dagi_irrad_grid_get_clip_size().xxy - 0.5), worldDir);
      ambient = lerp(ambientBase, ambient, vignette);
      return true;
    }

    bool dagi_irrad_grid_diffuse_undirectional_biased_smooth(float3 worldViewPos, float3 worldPos, float3 toCameraDir, float maxCameraDist, float3 bias_normal, float dither, inout float3 ambient)
    {
      uint cascade; float3 coordF; float vignette;
      if (!dagi_irrad_grid_diffuse_biased_smooth_cascade(worldViewPos, worldPos, toCameraDir, maxCameraDist, bias_normal, dither, cascade, coordF, vignette))
        return false;
      half3 ambientBase = dagi_irrad_grid_diffuse_undirectional_cascade_unsafe(cascade, coordF);
      float3 nextLt = dagi_irrad_grid_abs_coord_lt(cascade + 1u);
      FLATTEN
      if (cascade + 1u < dagi_irrad_grid_get_clip_count())
        ambient = ambientBase;
      coordF = coordF*0.5 - nextLt;
      BRANCH
      if (all(and(coordF > 0, coordF < float3(dagi_irrad_grid_get_clip_size().xxy))) && vignette > 0)
        ambient = dagi_irrad_grid_diffuse_undirectional_cascade_unsafe(cascade+1, nextLt + clamp(coordF, 0.5, dagi_irrad_grid_get_clip_size().xxy - 0.5));
      ambient = lerp(ambientBase, ambient, vignette);
      return true;
    }
  }
endmacro

macro DAGI_IRRADIANCE_GRID_SAMPLE(code)
  DAGI_IRRADIANCE_GRID_SAMPLE_INIT(code)
  DAGI_IRRADIANCE_GRID_SAMPLE_USE(code)
endmacro
