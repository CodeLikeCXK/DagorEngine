include "sky_shader_global.dshl"
include "sq_clouds_shadow.dshl"
include "dagi_rad_grid_common.dshl"
include "dagi_lit_scene_helper.dshl"
include "dagi_media_scene_common.dshl"
include "project_base_hmap.dshl"
include "world_sdf.dshl"
include "gbuffer.dshl"
include "dagi_project_trace_common.dshl"

hlsl {
  #define DAGI_LIT_SCENE_TYPED_UAV_LOAD 1//fixme
}

macro NOISE(code)
  hlsl(code) {
    #include <pcg_hash.hlsl>
    #include <hammersley.hlsl>
    #define TOTAL_JITTER_FRAMES 32//pow-of-2
    //[-0.5 0.5] texel (/w)
    float2 rand3D_radiance_grid_probe(uint3 v, uint2 oct_coord, uint w, uint frame = 0)
    {
      uint3 rand;
      frame &= (TOTAL_JITTER_FRAMES-1);
      //rand = pcg3d_hash_16bit((v<<3) + uint3(oct_coord, frame));
      //return float2(rand.xy*(1./65535)/w - 0.5/w);
      rand = pcg3d_hash_16bit((v<<3) + uint3(oct_coord, 0));
      return hammersley_rand16( frame, TOTAL_JITTER_FRAMES, rand.xy )/w - 0.5/w;
    }
  }
endmacro

macro RADIANCE_GRID_STEP_OUT(code)
  WORLD_SDF_STEP_OUT(code)
  hlsl(code) {
    bool world_sdf_trace_stepOut(inout float3 worldPos, float stepOutSize, float voxelStepOutSize, out int clip)
    {
      //world_sdf_collide_probe(worldPos, stepOutSize);
      //clip = world_sdf_find_clip(worldPos);
      //return clip < MAX_WORLD_SDF_CLIPS;
      return world_sdf_step_out(worldPos, clip, stepOutSize, voxelStepOutSize) && world_sdf_step_out(worldPos, clip, stepOutSize, voxelStepOutSize);
    }
  }
endmacro

macro RADIANCE_GRID_TRACE_PROBE(code)
  hlsl(code) {
    #define DAGI_IRRADIANCE_GRID_TYPE DAGI_IRRADIANCE_GRID_TYPE_IRRADIANCE
  }
  PROJECT_BASE_HEIGHTMAP(code)// before PROJECT_GET_SKY_RADIANCE_AT, so hmap sampling for over darkening
  READ_WORLD_SDF(code)
  RADIANCE_GRID_STEP_OUT(code)
  NOISE(code)
  PROJECT_GET_WORLD_RADIANCE_AT(code)
  DAGI_RAD_GRID_LOAD(code)
  DAGI_MEDIA_SCENE_SAMPLE(code)
  PROJECT_TRACE(code)
  hlsl(code) {
    #include <dagi_rad_grid_math.hlsl>
    float3 radiance_grid_trace_probe(uint startSDF, int3 probeWorldCoordClip, uint radiance_grid_clip, uint2 octCoord, uint frameId, uint radiance_res, out float encoded_dist, float maxT, float biasK)
    {
      float probeSize = dagi_rad_grid_probe_size(radiance_grid_clip);
      float3 worldPos = (probeWorldCoordClip.xzy+0.5)*probeSize;
      #if PROJECT_DAGI_USE_HMAP
        float world_height;
        if (dagi_project_get_base_heightmap(worldPos, world_height, probeSize))
        {
          FLATTEN
          if (worldPos.y > world_height - probeSize)
            worldPos.y = max(worldPos.y, world_height + probeSize*0.1);
        }
      #endif

      float2 octTC = (octCoord + 0.5)/radiance_res;
      #if DAGI_LIT_SCENE_TYPED_UAV_LOAD
        //sample higher grid if we are inside it
        //this allows optimize a
        const float featureToCaptureSize = 4.f; // solid angle of feature (both dark and bright) that we can miss is 1./4 (0.25)
        //compared to 128 it is still ~16meters, i.e. 8 times less traces, plus additional blurring
        uint nextClip = dagi_rad_grid_get_best_enclosing_clip_border(worldPos, radiance_grid_clip+1, featureToCaptureSize + .5f);
        float nextProbeSize = nextClip < dagi_rad_grid_get_clip_count() ? dagi_rad_grid_probe_size(nextClip) : 0;
        maxT = nextClip < dagi_rad_grid_get_clip_count() ? nextProbeSize*featureToCaptureSize : maxT;
      #endif
      float3 radiance;
      float t = 0;
      float2 jitteredOctTC = octTC;
      //todo:we probably need some spatial-temporal-coherent blue noise
      jitteredOctTC += rand3D_radiance_grid_probe(probeWorldCoordClip.xyz, octCoord, radiance_res, frameId);
      float3 rayDir = radiance_grid_dir_decode(jitteredOctTC*2-1);
      //rayDir.y = abs(rayDir.y);
      //world_sdf_trace_stepOut(worldPos, max(0.125*voxelSize, 0.01), 0.5, startClip);
      uint sdfStartClip = startSDF, sdfClip;
      //sdfStartClip = world_sdf_find_clip(worldPos);//to reduce divirgence between threads
      #if DAGI_HAS_PROJECT_TRACE
      DaGiProjectHitRes hit;
      if (dagi_project_trace_surface(worldPos, 0, rayDir, maxT, hit))
      {
        radiance = dagi_get_radiance_at_with_albedo(hit.hitCamPos, hit.hitNormal, hit.hitAlbedo);
        //radiance = project_get_lit_color_at_trace_hit(hit.hitPos, hit.hitNormal, hit.hitAlbedo);
        t = hit.hitAt;
        encoded_dist = saturate(t / (probeSize*sqrt(3)));
      }
      #else
      if (//startClip < MAX_WORLD_SDF_CLIPS &&
        //world_sdf_step_out(worldPos, sdfStartClip, 0.05, 0.5) &&
        world_sdf_trace_stepOut(worldPos, max(0.125*probeSize, 0.01), 0.5, sdfStartClip) &&
        world_sdf_trace_start(sdfStartClip, worldPos, rayDir, maxT, t, sdfClip, biasK))
      {
        float3 worldPosAt = worldPos + rayDir*t;
        float3 gradient = world_sdf_sample_gradient(sdfClip, worldPosAt);
        float gradLen = length(gradient);
        float3 worldNormal = gradLen > 0 ? -gradient.xzy/gradLen : -rayDir;
        FLATTEN
        if (dot(worldNormal, rayDir) > 0)
          worldNormal = -rayDir;
        //radiance = dagi_get_radiance_at(worldPosAt - rayDir*min(t, world_sdf_voxel_size(sdfClip)*0.5), worldNormal);
        radiance = dagi_get_radiance_at(worldPosAt, worldNormal);
        encoded_dist = saturate(t / (probeSize*sqrt(3)));
      }
      #endif
      else
      {
        t = maxT;
        #if DAGI_LIT_SCENE_TYPED_UAV_LOAD
          float3 worldPosAt = worldPos + rayDir*max(t - sqrt(3)*nextProbeSize, 0);
          //nextClip = dagi_rad_grid_get_best_enclosing_clip_border(worldPosAt, radiance_grid_clip+1, .5f);
          if (nextClip < dagi_rad_grid_get_clip_count())
            radiance = trilinear_load_radiance_grid_cascade_unsafe(nextClip, octCoord, worldPosAt);
          else
            radiance = dagi_get_sky_radiance_at(worldPosAt, rayDir);
        #else
          radiance = dagi_get_sky_radiance_at(worldPos + rayDir*t, rayDir);
        #endif
        encoded_dist = 1;
      }
      half4 light = dagi_trace_media_scene(worldPos, rayDir, t);
      radiance.xyz = light.w*radiance.xyz + light.xyz;
      //radiance.xyz = rayDir*0.5+0.5;
      return radiance;
    }
  }
endmacro

