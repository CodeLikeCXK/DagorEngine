Root    ?= ../../.. ;
Location = prog/gameLibs/spirv ;


TargetType  = lib ;
Target      = gameLibs/spirv.lib ;

include $(Root)/prog/_jBuild/defaults.jam ;

DontUseVulkanGlslang ?= no ;

Sources +=
  traits_table.cpp
  module_writer.cpp
  module_reader.cpp
  module_builder.cpp
  atomic_counter_resolve_pass.cpp
  compile_header_pass.cpp
  buffer_unique_pointer_pass.cpp
  dxc_bugfix_pass.cpp
  rename_entry_points_pass.cpp
  semantic_resolve_pass.cpp
  structure_layout_validation_pass.cpp
  reflection_cleanup_pass.cpp
  compiler_dxc.cpp
;

AddIncludes +=
  $(Root)/prog/3rdPartyLibs/vulkan/glslang
  $(Root)/prog/3rdPartyLibs/vulkan/include
  $(Root)/prog/3rdPartyLibs/vulkan/hlslcc/include
  $(Root)/prog/3rdPartyLibs/vulkan/spirv-tools/include
  $(Root)/prog/gameLibs/publicInclude
;

include $(Root)/$(Location)/jamfile-dxc-ver ;

if ! [ GLOB $(_DEVTOOL)/DXC-$(DXC_VERSION)/include : * ] { exit FATAL\: \"DXC-$(DXC_VERSION)/include\" not found! Please, update DEVTOOLS ; }

AddIncludes += $(_DEVTOOL)/DXC-$(DXC_VERSION)/include
;

UseProgLibs +=
  3rdPartyLibs/vulkan/spirv-tools
;

if $(Platform) = windows {
  AddLibs += Ole32.lib ;
}

if $(DontUseVulkanGlslang) = no {
  Sources +=
    compiler.cpp
  ;

  UseProgLibs +=
    3rdPartyLibs/vulkan/glslang
  ;
} else {
  Sources +=
    glslangStub.cpp
  ;
  Target = $(Target:S=~n.lib) ;
}

CPPopt = -D_CROSS_TARGET_SPIRV ;
if $(Platform) = macOS {
  CPPopt += -Wno-switch -Wno-ambiguous-reversed-operator -Wno-deprecated-declarations
;
}
if $(Platform) = linux && $(PlatformSpec) = clang {
  CPPopt += -Wno-sometimes-uninitialized -Wno-switch -Wno-ambiguous-reversed-operator -Wno-deprecated-declarations -D__EMULATE_UUID ;
}

include $(Root)/prog/_jBuild/build.jam ;
