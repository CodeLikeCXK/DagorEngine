include "shader_global.dshl"

int bvh_hwinstance_copy_start_instance;
int bvh_hwinstance_copy_instance_slots;

int bvh_hwinstance_copy_mode;
interval bvh_hwinstance_copy_mode: copy < 1, clear;

shader bvh_hwinstance_copy
{
  if (compatibility_mode == compatibility_mode_on)
  {
    dont_render;
  }
  ENABLE_ASSERT(cs)

  (cs) {
    start_instance@i1 = bvh_hwinstance_copy_start_instance;
    instance_slots@i1 = bvh_hwinstance_copy_instance_slots;
    world_view_pos@f3 = world_view_pos;
  }

  hlsl (cs) {
    #include <RTHWInstance.hlsli>

    ##if bvh_hwinstance_copy_mode == copy
      StructuredBuffer<RTHWInstance> source : register(t0);
      ByteAddressBuffer instance_count : register(t1);
    ##endif
    RWStructuredBuffer<RTHWInstance> output : register(u0);

    [numthreads(64, 1, 1)]
    void bvh_hwinstance_copy_cs(uint3 dtId : SV_DispatchThreadID)
    {
      if (dtId.x >= instance_slots)
        return;

      ##if bvh_hwinstance_copy_mode == copy
        RTHWInstance instance = structuredBufferAt(source, dtId.x);
        if (dtId.x < loadBuffer(instance_count, 0))
        {
          instance.transform0.w -= world_view_pos.x;
          instance.transform1.w -= world_view_pos.y;
          instance.transform2.w -= world_view_pos.z;
        }
      ##else
        RTHWInstance instance;
        instance.transform0 = 0;
        instance.transform1 = 0;
        instance.transform2 = 0;
        instance.instanceId_mask = 0;
        instance.instanceOffset_flags = 0;
        instance.blas = 0;
      ##endif
      structuredBufferAt(output, start_instance + dtId.x) = instance;
    }
  }

  compile("target_cs", "bvh_hwinstance_copy_cs");
}
