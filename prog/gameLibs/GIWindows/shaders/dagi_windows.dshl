int current_windows_count;
float4 windowsGridLT = (-10000,-10000,-10000,1);
float4 windowsGridInv = (-10000,-10000,-10000,0);
buffer windows;
buffer windowsGrid;

macro SKIP_RAY_WINDOWS(code)
  (code) {
    windowsGridInv@f4 = windowsGridInv;
    windows@buf = windows hlsl {
        #include <gi_windows.hlsli>
        StructuredBuffer<Window> windows@buf;
      }
    windowsGrid@buf = windowsGrid hlsl {StructuredBuffer<uint> windowsGrid@buf;}
    current_windows_count@f1 = (current_windows_count);
  }
  hlsl(code) {
    #include <gi_windows.hlsli>
    bool inWindow(float3 worldPos)
    {
      if (!current_windows_count)
        return false;
      int3 gridPos = worldPos*windowsGridInv.w + windowsGridInv.xyz;
      if (any(gridPos < 0 || gridPos >= int3(WINDOW_GRID_XZ, WINDOW_GRID_Y, WINDOW_GRID_XZ)))
        return false;
      uint3 gridPosI = uint3(gridPos);
      uint grid = structuredBufferAt(windowsGrid, gridPosI.x + gridPosI.y*WINDOW_GRID_XZ + gridPosI.z*WINDOW_GRID_XZ*WINDOW_GRID_Y);
      BRANCH
      if (grid == 0)
        return false;
      uint gridCount = grid>>24, gridOffset = grid&((1U<<24)-1);
      const uint gridSize = WINDOW_GRID_XZ*WINDOW_GRID_XZ*WINDOW_GRID_Y;

      for (uint i = gridOffset+gridSize, ei = min(gridOffset + gridCount+gridSize, gridSize * 2u); i < ei; ++i)
      {
        uint sampleIndex = structuredBufferAt(windowsGrid, i);
        // windowsGrid can be filled with garbage while windows buffer is zero-length
        if (sampleIndex >= current_windows_count)
          continue;

        Window w = structuredBufferAt(windows, sampleIndex);
        float3 windowC = worldPos - float3(w.row0.w,w.row1.w,w.row2.w);
        windowC = mul(float3x3(w.row0.xyz,w.row1.xyz,w.row2.xyz), windowC);
        if (all(abs(windowC) < WINDOW_HALF_LOCAL_BOX))//just center
        {
          return true;
        }
      }
      return false;
    }
  }
endmacro

macro SKIP_RAW_WINDOWS(code)
  (code) {
    current_windows_count@f1 = (current_windows_count);
  }
  hlsl(code) {
    #include <gi_windows.hlsli>
    bool inWindowRaw(float3 worldPos)
    {
      for (uint i = 0, ei = current_windows_count; i < ei; ++i)
      {
        Window w = structuredBufferAt(windows, i);
        float3 windowC = worldPos - float3(w.row0.w,w.row1.w,w.row2.w);
        BRANCH
        if (all(abs(windowC)>2))
          continue;
        //windowC = mul(float3x3(w.row0.xyz,w.row1.xyz,w.row2.xyz), windowC);
        windowC = mul(float3x3(w.row0.xyz,w.row1.xyz,w.row2.xyz), windowC);
        //if (all(windowC + voxel_size > -float3(0.5,1,0.3) && windowC - voxel_size < float3(0.5,1,0.3)))// completely within
        if (all(abs(windowC) < WINDOW_HALF_LOCAL_BOX))//just center
        {
          return true;
        }
        //checkWindow
      }
      return false;
    }
  }
endmacro
