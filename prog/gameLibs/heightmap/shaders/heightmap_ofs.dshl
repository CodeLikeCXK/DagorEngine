include "hmap_ofs_inc.dshl"
include "land_block_inc.dshl"

texture hmap_patches_tex;
float4 hmap_patches_min_max_z;
float4 world_to_hmap_tex_ofs;
float4 world_to_hmap_patches_ofs = (1,1,0,0);
float4 world_to_hmap_patches_tex_ofs;

texture grass_mask_tex;
float4 world_to_grass_ofs;

// dummies
macro INIT_HEIGHTMAP_OFS_SQ(stage)
endmacro
macro USE_HEIGHTMAP_OFS_SQ(stage)
  hlsl(stage) {
    float get_hmap_ofs(float2 worldPosXZ, float lod, out float displacementEffect)
    {
      displacementEffect = 0;
      return 0;
    }

    void apply_height_patches(float2 worldPosXZ, inout float height)
    {
    }

    float get_hmap_ofs_no_vignette(float2 worldPosXZ)
    {
      return 0.0;
    }

    float get_hmap_ofs_no_grass_vignette(float2 worldPosXZ)
    {
      return 0;
    }
  }
endmacro



macro INIT_HEIGHTMAP_OFS(stage)
  (stage) {
    hmap_ofs_tex@smp2d = hmap_ofs_tex;
    hmap_patches_tex@smp2d = hmap_patches_tex;
    hmap_patches_min_max_z@f4 = hmap_patches_min_max_z;
    world_to_hmap_ofs@f4 = world_to_hmap_ofs;
    world_to_hmap_tex_ofs@f4 = (world_to_hmap_tex_ofs.x, world_to_hmap_tex_ofs.y, hmap_displacement_up-hmap_displacement_down, hmap_displacement_down);
    world_to_hmap_patches_ofs@f4 = world_to_hmap_patches_ofs;
    world_to_hmap_patches_tex_ofs@f2 = (world_to_hmap_patches_tex_ofs.x, world_to_hmap_patches_tex_ofs.y, 0, 0);

    grass_mask_tex@smp2d = grass_mask_tex;
    world_to_grass@f4 = world_to_grass;
    world_to_grass_ofs@f4 = world_to_grass_ofs;
  }
endmacro

macro USE_HEIGHTMAP_OFS(stage)
  hlsl(stage) {
    float get_hmap_ofs_height_vignette(float2 worldPosXZ, float lod, out float vignetteEffect)
    {
      float2 tc = saturate(worldPosXZ * world_to_hmap_ofs.x + world_to_hmap_ofs.zw);
      float2 vignette = saturate(abs(tc*2-1) * 10 - 9);
      vignetteEffect = saturate( 1.0 - dot( vignette, vignette ) );
      float height = 0;

    ##if hmap_ofs_tex != NULL
      if (vignetteEffect>0)
        height = tex2Dlod(hmap_ofs_tex, float4(tc - world_to_hmap_tex_ofs.xy, 0, lod)).x;
    ##endif
      return height;
    }

    float get_hmap_ofs(float2 worldPosXZ, float lod, out float displacementEffect)
    {
      float vignetteEffect;
      float height = get_hmap_ofs_height_vignette(worldPosXZ, lod, vignetteEffect);

      displacementEffect = vignetteEffect;
      ##if grass_mask_tex != NULL
        float2 grassTcOfs = worldPosXZ*world_to_grass_ofs.x + world_to_grass_ofs.zw;
        float2 grassVignette = saturate( abs(grassTcOfs*2-1) * 10 - 9 );
        displacementEffect = saturate( 1.0 - dot( grassVignette, grassVignette ) );
        if (vignetteEffect<1 && displacementEffect>0)
        {
          float2 grass_mask_tc = worldPosXZ*world_to_grass.x + world_to_grass.zw;
          float4 grassMaskColor = tex2Dlod(grass_mask_tex, float4(grass_mask_tc,0,0));
          float grassHeight = grassMaskColor.z;//*world_to_hmap_tex_ofs.z + world_to_hmap_tex_ofs.w
          height = lerp(grassHeight, height, vignetteEffect);
          //height = grassHeight;
        }
      ##endif
      //we should actually have additional vignette for grass heightmap as well. However, it is so far away, we currently don't care if it is wrapping

      return (height*world_to_hmap_tex_ofs.z + world_to_hmap_tex_ofs.w)*displacementEffect;
    }

    void apply_height_patches(float2 worldPosXZ, inout float height)
    {
      float2 tc = worldPosXZ*world_to_hmap_patches_ofs.xy + world_to_hmap_patches_ofs.zw;
      float2 edge = abs(tc*2-1);
      tc = saturate(tc);
      float h = 0.0;
      const float eps = 0.01;
      BRANCH
      if (all(edge < 1.0 - eps))
        h = tex2Dlod(hmap_patches_tex, float4(tc - world_to_hmap_patches_tex_ofs.xy,0,0)).x;
      BRANCH
      if (h != 0.0)
        height = max(height, lerp(hmap_patches_min_max_z.x, hmap_patches_min_max_z.y, h));
    }

    float get_hmap_ofs_no_vignette(float2 worldPosXZ)
    {
    ##if hmap_ofs_tex != NULL
      float2 tc = saturate(worldPosXZ * world_to_hmap_ofs.x + world_to_hmap_ofs.zw);
      float height = tex2Dlod(hmap_ofs_tex, float4(tc - world_to_hmap_tex_ofs.xy,0,0)).x;
      return height * world_to_hmap_tex_ofs.z + world_to_hmap_tex_ofs.w;
    ##else
      return 0.0;
    ##endif
    }

    float get_hmap_ofs_with_vignette_no_extras(float2 worldPosXZ)
    {
      float vignetteEffect;
      float height = get_hmap_ofs_height_vignette(worldPosXZ, 0, vignetteEffect) * vignetteEffect;

      return height * world_to_hmap_tex_ofs.z + world_to_hmap_tex_ofs.w;
    }

    float get_hmap_ofs_no_grass_vignette(float2 worldPosXZ)
    {
      float vignetteEffect;
      float height = get_hmap_ofs_height_vignette(worldPosXZ, 0, vignetteEffect);

      ##if grass_mask_tex != NULL
        BRANCH
        if (vignetteEffect > 0 && vignetteEffect < 1)
        {
          float2 grass_mask_tc = worldPosXZ * world_to_grass.x + world_to_grass.zw;
          float grassHeight = tex2Dlod(grass_mask_tex, float4(grass_mask_tc,0,0)).z;
          height = lerp(grassHeight, height, vignetteEffect);
        }
      ##endif

      return height * world_to_hmap_tex_ofs.z + world_to_hmap_tex_ofs.w;
    }
  }
endmacro