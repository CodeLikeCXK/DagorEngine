include "dagi_volmap_gi.dshl"

float4 ssgi_copy_y_indices0;
float4 ssgi_copy_y_indices1;

buffer frustum_visible_ambient_voxels;

shader move_y_from_cs, move_y_to_cs
{
  ENABLE_ASSERT(cs)
  GI_USE_AMBIENT_VOLMAP(cs)
  (cs) {
    ssgi_copy_y_indices0@f4 = ssgi_copy_y_indices0;
    ssgi_copy_y_indices1@f4 = ssgi_copy_y_indices1;
  }
  if (shader == move_y_from_cs)
  {
    (cs) {
      gi_ambient_volmap@smp3d = gi_ambient_volmap;
      ssgi_ambient_volmap_temporal@smp3d = ssgi_ambient_volmap_temporal;
    }
  }
  else
  {
    (cs) {
      voxelColors@buf = frustum_visible_ambient_voxels hlsl{
        StructuredBuffer<uint> voxelColors@buf;
      };
    }
  }

  hlsl(cs) {
    #include <pixelPacking/PixelPacking_R11G11B10.hlsl>
    ##if (shader == move_y_to_cs)
      RWTexture3D<float3>  gi_ambient_volmap : register(u6);
      RWTexture3D<float>   ssgi_ambient_volmap_temporal : register(u7);
    ##else
      RWStructuredBuffer<uint> voxelColors: register(u6);
    ##endif

    [numthreads(8, 8, 1)]
    void ssgi_copy_volmap_cs( uint3 gId : SV_GroupID, uint3 dtId : SV_DispatchThreadID )//uint3 gId : SV_GroupId,
    {
      int4 ind0=int4(ssgi_copy_y_indices0);
      int dimX = ind0.x;
      int dimZ = ind0.y;
      int z_ofs = ind0.z;
      int step = ind0.w;
      int4 ind1=int4(ssgi_copy_y_indices1);
      int texel = dtId.x + (dtId.y + gId.z*dimX)*dimX;

      ##if (shader == move_y_from_cs)
        int from = ind1.x + step*gId.z;
        int temporalZFrom = from+z_ofs;
        int colorZFrom = from+z_ofs*6;
        float3 col[6];
        col[0] = FETCH_AMBIENT_VOLMAP(int3(dtId.xy, colorZFrom)); colorZFrom += dimZ;
        col[1] = FETCH_AMBIENT_VOLMAP(int3(dtId.xy, colorZFrom)); colorZFrom += dimZ;
        col[2] = FETCH_AMBIENT_VOLMAP(int3(dtId.xy, colorZFrom)); colorZFrom += dimZ;
        col[3] = FETCH_AMBIENT_VOLMAP(int3(dtId.xy, colorZFrom)); colorZFrom += dimZ;
        col[4] = FETCH_AMBIENT_VOLMAP(int3(dtId.xy, colorZFrom)); colorZFrom += dimZ;
        col[5] = FETCH_AMBIENT_VOLMAP(int3(dtId.xy, colorZFrom));
        UNROLL
        for (uint i = 0; i < 6; ++i)
          structuredBufferAt(voxelColors, texel*7+i) = Pack_R11G11B10_FLOAT_LOG(col[i]);
        structuredBufferAt(voxelColors, texel*7+6) = asint(texture3DAt(ssgi_ambient_volmap_temporal, int3(dtId.xy, temporalZFrom)).x);
      ##elif (shader == move_y_to_cs)
        int to = ind1.y + step*gId.z;
        int temporalZTo = to + z_ofs;
        int colorZTo = to + z_ofs*6;

        float3 col[6];
        UNROLL
        for (uint i = 0; i < 6; ++i)
          col[i] = Unpack_R11G11B10_FLOAT_LOG(structuredBufferAt(voxelColors, texel*7+i));
        texture3DAt(gi_ambient_volmap, int3(dtId.xy, colorZTo)) = col[0]; colorZTo+=dimZ;
        texture3DAt(gi_ambient_volmap, int3(dtId.xy, colorZTo)) = col[1]; colorZTo+=dimZ;
        texture3DAt(gi_ambient_volmap, int3(dtId.xy, colorZTo)) = col[2]; colorZTo+=dimZ;
        texture3DAt(gi_ambient_volmap, int3(dtId.xy, colorZTo)) = col[3]; colorZTo+=dimZ;
        texture3DAt(gi_ambient_volmap, int3(dtId.xy, colorZTo)) = col[4]; colorZTo+=dimZ;
        texture3DAt(gi_ambient_volmap, int3(dtId.xy, colorZTo)) = col[5];
        texture3DAt(ssgi_ambient_volmap_temporal, int3(dtId.xy, temporalZTo)) = asfloat(structuredBufferAt(voxelColors, texel*7+6));
     ##endif
    }
  }
  compile("cs_5_0", "ssgi_copy_volmap_cs");
}

/*float4 ambient_voxels_move_ofs;
shader ssgi_clear_volmap_cs
{
  SSGI_USE_VOLMAP_GI_COORD(cs)
  (cs) { ambient_voxels_move_ofs@f4 = ambient_voxels_move_ofs; }

  hlsl(cs) {
    RWTexture3D<float3>  color_x : register(u4);
    RWTexture3D<float3>  color_y : register(u5);
    RWTexture3D<float3>  color_z : register(u6);
    RWTexture3D<float>   ssgi_ambient_volmap_temporal : register(u7);

    //StructuredBuffer<AmbientCube> ambient_cube: register(t15);

    [numthreads(4, 4, 4)]
    void ssgi_clear_volmap_cs( uint3 dtId : SV_DispatchThreadID )//uint3 gId : SV_GroupId,
    {
      uint cascadeId = ambient_voxels_move_ofs.w;
      uint3 z_ofs = uint3(0,0,volmap_y_dim(cascadeId));
      int3 coord = dtId;
      int3 dim = uint3(volmap_xz_dim(cascadeId).xx, volmap_y_dim(cascadeId));
      int3 oldCoord = (dim+(coord + ssgi_ambient_volmap_crd_ofs(cascadeId))%dim)%dim;
      int3 move = int3(ambient_voxels_move_ofs.xz, ambient_voxels_move_ofs.y);
      int3 coordOfs = (dim+(coord + (ssgi_ambient_volmap_crd_ofs(cascadeId)+move)%dim)%dim)%dim;
      coordOfs -= move;
      coordOfs.z = coord.z - move.z;
      if (all(oldCoord.xy - coordOfs.xy==0) && (coordOfs.z < dim.z && coordOfs.z >= 0))
        return;

      float3 col[6]
      ;// = {ambient_cube[0].col[0], ambient_cube[0].col[1], ambient_cube[0].col[2], ambient_cube[0].col[3], ambient_cube[0].col[4], ambient_cube[0].col[5]};
      ssgi_ambient_volmap_temporal[uint3(coord.xy, coord.z + ssgi_cascade_z_crd_ofs(cascadeId))] = 0;

      float3 worldPos = ambientOffsettedCoordToWorldPos(coordOfs, cascadeId);
      float3 extent = volmap[cascadeId].voxelSize.xyx;
      //ssgi_init_volmap(worldPos, extent, col[0], col[1], col[2], col[3], col[4], col[5]);
      col[0] = col[1] = col[2] = col[3] = col[4] = col[5] = float3(1,0,0);
      coord.z += ssgi_cascade_z_crd_ofs(cascadeId)+ssgi_cascade_z_crd_ofs(cascadeId);
      color_x[coord] = col[0];
      color_x[coord+z_ofs] = col[1];
      color_y[coord] = col[2];
      color_y[coord+z_ofs] = col[3];
      color_z[coord] = col[4];
      color_z[coord+z_ofs] = col[5];
    }
  }
  compile("cs_5_0", "ssgi_clear_volmap_cs");
}
*/