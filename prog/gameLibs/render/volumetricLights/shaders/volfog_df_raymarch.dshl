
include "shader_global.dshl"
include "use_volfog.dshl"
include "viewVecVS.dshl"
include "prev_screen_tc.dshl"
include "camera_in_camera.dshl"

include "heightmap_common.dshl"
include "static_shadow.dshl"

include "volfog_df_common.dshl"

include "volfog_hardcoded_media.dshl"





texture clouds_shadows_2d;
float4 nbs_world_pos_to_clouds_alt__inv_clouds_weather_size__neg_clouds_thickness_m;
float4 clouds_origin_offset;
float4 clouds_hole_pos;

// statistical cloud shadows, without relying on preshader
macro USE_FOG_SHADOWS(code)
  (code){
    nbs_world_pos_to_clouds_alt__inv_clouds_weather_size__neg_clouds_thickness_m@f4 =
      nbs_world_pos_to_clouds_alt__inv_clouds_weather_size__neg_clouds_thickness_m;
    skies_primary_sun_light_dir@f3 = skies_primary_sun_light_dir;
    clouds_origin_offset@f3 = clouds_origin_offset;
    clouds_hole_pos@f4 = clouds_hole_pos;
    clouds_shadows_2d@smp2d = clouds_shadows_2d;
  }
  hlsl(code) {
    #include <atmosphere/statistical_clouds_shadow.hlsli>
  }
endmacro



texture prev_distant_fog_raymarch_start_weights;

int distant_fog_use_smart_raymarching_pattern = 1;
interval distant_fog_use_smart_raymarching_pattern: off<1, on;

macro USE_RAYMARCH_JITTERED_TC(code, frame_id)
  hlsl(code){
    uint calc_raymarch_noise_index(uint2 dtId)
    {
      return calc_raymarch_noise_index(dtId, (uint)frame_id);
    }
  }
endmacro

macro USE_BASE_AMBIENT_COLOR(code)
  INIT_SIMPLE_AMBIENT(code)
  hlsl(code){
    float3 get_base_ambient_color()
    {
      return amb_color;
    }
  }
endmacro



float4 distant_fog_local_view_z;
float4 distant_fog_raymarch_resolution;
float4 distant_fog_reconstruction_resolution;

float4 distant_fog_raymarch_params_0;
float4 distant_fog_raymarch_params_1;
float4 distant_fog_raymarch_params_2;


float distant_fog_raymarch_step_size = 32;
float distant_fog_smart_raymarching_pattern_depth_bias = 2.0;

// must use the same register as NBS!
int volfog_df_raymarch_inscatter_const_no = 6 always_referenced;
int volfog_df_raymarch_extinction_const_no = 5 always_referenced;
int volfog_df_raymarch_dist_const_no = 4 always_referenced;
int volfog_df_raymarch_start_weights_const_no = 3 always_referenced;
int volfog_df_raymarch_debug_tex_const_no = 2 always_referenced;

int distant_fog_use_static_shadows = 1 always_referenced;

shader distant_fog_raymarch_cs
{
  INIT_AND_USE_ON_TOP_CAMERA_IN_CAMERA(cs)

  supports global_const_block;
  (cs) {
    inv_volfog_froxel_volume_res@f3 = (inv_volfog_froxel_volume_res.x,inv_volfog_froxel_volume_res.y,inv_volfog_froxel_volume_res.z,0)
    distant_fog_local_view_z@f3 = distant_fog_local_view_z;
    distant_fog_raymarch_resolution@f4 = distant_fog_raymarch_resolution;
    distant_fog_reconstruction_resolution@f4 = distant_fog_reconstruction_resolution;
    world_view_pos@f4 = (world_view_pos.x, world_view_pos.y, world_view_pos.z, time_phase(0, 0));
    distant_fog_raymarch_step_size@f1 = (distant_fog_raymarch_step_size);
    prev_distant_fog_raymarch_start_weights@smp2d = prev_distant_fog_raymarch_start_weights;
    distant_fog_smart_raymarching_pattern_depth_bias@f1 = (distant_fog_smart_raymarching_pattern_depth_bias);
    distant_fog_raymarch_params_0@f4 = distant_fog_raymarch_params_0;
    distant_fog_raymarch_params_1@f4 = distant_fog_raymarch_params_1;
    distant_fog_raymarch_params_2@f4 = distant_fog_raymarch_params_2;
    volfog_blended_slice_start_depth@f1 = (volfog_blended_slice_start_depth);
    distant_fog_use_static_shadows@i1 = distant_fog_use_static_shadows;
  }
  VIEW_VEC_OPTIMIZED(cs)
  INIT_TRANSFORMED_ZNZFAR_STAGE(cs)
  INIT_HALF_RES_DEPTH(cs)
  USE_RAYMARCH_FRAME_INDEX(cs)
  INIT_JITTER_PARAMS(cs)
  VOLUME_DEPTH_CONVERSION(cs)
  USE_PREV_TC(cs)
  USE_RAYMARCH_JITTERED_TC(cs, jitter_ray_offset.w)
  INIT_AND_USE_VOLFOG_MODIFIERS(cs)
  GET_MEDIA_HARDCODED(cs)
  USE_BASE_AMBIENT_COLOR(cs)
  ENABLE_ASSERT(cs)

  USE_FOG_SHADOWS(cs)

  hlsl(cs) {
    #define HAS_STATIC_SHADOW 1
    #define FASTEST_STATIC_SHADOW_PCF 1
  }

  INIT_STATIC_SHADOW_BASE_ONE_CASCADE(cs)
  INIT_STATIC_SHADOW_BASE_SECOND_CASCADE_STCODE(cs)
  USE_STATIC_SHADOW_BASE_NUM(cs, 2)

  if (distant_fog_use_smart_raymarching_pattern == off)
  {
    hlsl(cs) {
      #define DISTANT_FOG_DISABLE_SMART_RAYMARCHING_PATTERN 1
    }
  }

  (cs) {
    OutputRaymarchStartWeights@uav : register(volfog_df_raymarch_start_weights_const_no) hlsl {
      RWTexture2D<float2> OutputRaymarchStartWeights@uav;
    }
    OutputDist@uav : register(volfog_df_raymarch_dist_const_no) hlsl {
      RWTexture2D<float> OutputDist@uav;
    }
    OutputExtinction@uav : register(volfog_df_raymarch_extinction_const_no) hlsl {
      RWTexture2D<float> OutputExtinction@uav;
    }
    OutputInscatter@uav : register(volfog_df_raymarch_inscatter_const_no) hlsl {
      RWTexture2D<float4> OutputInscatter@uav;// .a is 2 bits == raymarching pattern offset
    }
    OutputDebug@uav : register(volfog_df_raymarch_debug_tex_const_no) hlsl {
      #define DECLARE_OUTPUT_DEBUG RWTexture2D<float4> OutputDebug@uav;
    }
  }

  hlsl(cs) {
#if DEBUG_DISTANT_FOG_RAYMARCH
    DECLARE_OUTPUT_DEBUG;
#endif

    float3 calcViewVec(float2 screen_tc)
    {
      return getViewVecOptimized(screen_tc);
    }

    #include "volfog_df_raymarch.hlsl"

    groupshared uint camera_view_lds;

    [numthreads( RAYMARCH_WARP_SIZE, RAYMARCH_WARP_SIZE, 1 )]
    void RayMarchDistantFog( uint2 dtId : SV_DispatchThreadID, uint2 tid : SV_GroupThreadID, uint gidx : SV_GroupIndex )
    {
      if (gidx == 0)
        camera_view_lds = 0;

      FogAccumulationStartParams startParams = construct_fog_accumulation_start_params(dtId, tid);

      CameraView currentViewType;
      DISCARD_GROUP_IN_INVALID_VIEW_AREA(camera_view_lds, startParams.screenTc, currentViewType);

      DistantFogRaymarchResult distantFogRaymarchResult = accumulateFog(dtId, tid, startParams, currentViewType);

      if (any(dtId >= (uint2)distant_fog_raymarch_resolution.xy))
        return;

      OutputInscatter[dtId] = distantFogRaymarchResult.inscatter;
      OutputExtinction[dtId] = distantFogRaymarchResult.extinction;
      OutputDist[dtId] = distantFogRaymarchResult.weightedEndDist;
      OutputRaymarchStartWeights[dtId] = float2(distantFogRaymarchResult.fogStart, distantFogRaymarchResult.raymarchStepWeight);

#if DEBUG_DISTANT_FOG_RAYMARCH
      OutputDebug[dtId] = distantFogRaymarchResult.debug;
#endif
    }
  }
  compile("target_cs", "RayMarchDistantFog");
}
