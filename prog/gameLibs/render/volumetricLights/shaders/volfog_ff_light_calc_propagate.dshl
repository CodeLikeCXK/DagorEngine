include "sky_shader_global.dshl"
include "viewVecVS.dshl"
include "globtm.dshl"
include "prev_screen_tc.dshl"
include "csm.dshl"
include "static_shadow.dshl"
include "fom_shadows.dshl"
include "skies_shadows.dshl"
include "depth_above.dshl"
include "clustered/lights_cb.dshl"
include "use_gi.dshl"//project dependent file
//include "gi_demo.dshl"
include "light_mask_helpers.dshl"

include "volfog_common.dshl"

include "gpu_occlusion.dshl"


hlsl {
  #define MAX_VOLUME_DEPTH_RANGE volume_resolution.w

  #include <phase_functions.hlsl>

  bool is_voxel_occluded(half extinction)
  {
    return !isfinite(extinction);
  }
  bool is_voxel_occluded(half4 packedData)
  {
    // technically only .w can be NaN, but this way we can safely avoid corrupted results
    return !isfinite(dot(packedData,1));
  }

  // to filter the final result too, justincase
  float4 nanfilter(float4 val)
  {
    return isfinite(dot(val, 1)) ? val : float4(0,0,0,1);
  }
  #if SHADER_COMPILER_FP16_ENABLED
    half4 nanfilter(half4 val)
    {
      return isfinite(dot(val, 1)) ? val : half4(0,0,0,1);
    }
  #endif

  float3 get_swizzled_color(float3 color, uint frame_id)
  {
    return frame_id == 1 ? color.brg : (frame_id == 2 ? color.gbr : color.rgb);
  }
  float3 get_swizzled_color_inv(float3 color, uint frame_id)
  {
    return frame_id == 1 ? color.gbr : (frame_id == 2 ? color.brg : color.rgb);
  }

}


int froxel_fog_dispatch_mode = 0;
interval froxel_fog_dispatch_mode: merged_parallel<1, merged_linear;


texture volfog_occlusion;
texture prev_volfog_occlusion;

texture skies_ms_texture;
texture skies_transmittance_texture;

float volfog_multi_scatter_ao_weight = 1.0;

float skies_scattering_effect = 1.; // it's only purpose is cuisine royale eclipse.

int4 channel_swizzle_indices = (1, 0, 0, 0);

float volfog_gi_amount_weight = 0.9;


texture prev_initial_inscatter;
texture prev_initial_extinction;
texture initial_media;
texture prev_volfog_weight;
texture volfog_shadow;

int volfog_ff_weight_const_no = 0 always_referenced;
int volfog_ff_accumulated_inscatter_const_no = 1 always_referenced;
int volfog_ff_initial_inscatter_const_no = 2 always_referenced;
int volfog_ff_initial_extinction_const_no = 3 always_referenced;

float volfog_self_shadow_blend_slice_cnt = 4;
float volfog_prev_range_ratio;

int froxel_fog_use_experimental_offscreen_reprojection = 0 always_referenced;
interval froxel_fog_use_experimental_offscreen_reprojection: no<1, yes;

int froxel_fog_use_self_shadowing = 1;
interval froxel_fog_use_self_shadowing: no<1, yes;
assume froxel_fog_use_self_shadowing = yes; // remove it for testing

int shadows_quality = 1;
interval shadows_quality: low<1, high;

float4 volumelight_reprojection_factors = (0.97, 0.9, 0, 0);

// TODO: remove these after the offscreen reprojection is no longer experimental
float volfog_test_frame_step = 1.5;
float volfog_test_sample_cnt = 12;
float volfog_test_step_start = 2;
float volfog_test_range_media = 1.5;
float volfog_test_range_shadow = 1;


float volfog_light_leak_depth_bias_scale = 2.0; // 1.0 would be fine with direct bias offset apply, but we only offset it along the sun dir to avoid silhouette artefacts
float volfog_light_leak_sun_bias_scale = 1.0;

int volfog_gi_sampling_mode = 0; // base, disable, use_filter

macro VOLFOG_USE_DYNAMIC_LIGHTS(stage)
  if (dynamic_lights_count != lights_off)
  {
    hlsl(stage)
    {
      #define LAMBERT_LIGHT 1
      #define DYNAMIC_LIGHTS_EARLY_EXIT 1
      #define DYNAMIC_LIGHTS_SPECULAR 0
    }
    INIT_AND_USE_PHOTOMETRY_TEXTURES(stage)
    INIT_AND_USE_CLUSTERED_LIGHTS(stage)
    INIT_AND_USE_OMNI_LIGHTS_CB(stage)
    INIT_SPOT_LIGHTS_CB(stage)
    INIT_AND_USE_LIGHT_SHADOWS(stage)
    INIT_AND_USE_COMMON_LIGHTS_SHADOWS_CB(stage)
    INIT_AND_USE_LIGHTS_CLUSTERED_CB(stage)
    USE_OMNI_LIGHT_MASK(stage)
    USE_SPOT_LIGHT_MASK(stage)
    hlsl(stage)
    {
      #include "clustered/punctualLightsMath.hlsl"

      #define SPOT_SHADOWS 1
      #define OMNI_SHADOWS 1

      bool calc_spot_light(uint spot_light_index,
        float3 jitteredWorldPos, half3 jitteredView, half lightsEffect, half mieG0, half mieG1, inout half3 dynamicLighting)
      {
        #if defined(ENABLE_SPOT_LIGHT_MASK)
          if ( !check_spot_light(spot_light_index, SPOT_LIGHT_MASK_VOLFOG))
            return false;
        #endif
        RenderSpotLight sl = spot_lights_cb[spot_light_index];
        float4 lightPosRadius = sl.lightPosRadius;
        half4 lightColor = half4(sl.lightColorAngleScale);
        half4 lightDirection = half4(sl.lightDirectionAngleOffset);
        half2 texId_scale = half2(sl.texId_scale_illuminatingplane_shadow_contactshadow.xy);

        half lightAngleScale = lightColor.a;
        half lightAngleOffset = lightDirection.a;
        half geomAttenuation; half3 dirFromLight, point2light; //point2light - not normalized
        spot_light_params(jitteredWorldPos.xyz, lightPosRadius, lightDirection.xyz, lightAngleScale, lightAngleOffset, geomAttenuation, dirFromLight, point2light);
        half attenuation = geomAttenuation;

        BRANCH
        if (attenuation <= 0)
          return false;

        half spotShadow = 1;
        #if SPOT_SHADOWS
          float4 lightShadowTC = mul(getSpotLightTm(spot_light_index), float4(jitteredWorldPos.xyz, 1));
          if (lightShadowTC.w > 1e-6)
          {
            lightShadowTC.xyz /= lightShadowTC.w;
            spotShadow = 1-dynamic_shadow_sample(lightShadowTC.xy, lightShadowTC.z);
          }
          attenuation *= spotShadow;
        #endif

        //shlick phase can result in temporal changes, but overall looking better
        half phase = half(phaseSchlickTwoLobe(dot(dirFromLight, jitteredView), mieG0*1.5h, mieG1*1.5h));
        half intensity = applyPhotometryIntensity(-dirFromLight, lightDirection.xyz, texId_scale.x,
                                                  texId_scale.y, phase *attenuation *lightsEffect);
        dynamicLighting += intensity * lightColor.xyz;

        return true;
      }

      bool calc_omni_light(uint omni_light_index, float3 worldPos, half ambPhase, half lightsEffect, inout half3 dynamicLighting)
      {
        #if defined(ENABLE_OMNI_LIGHT_MASK)
          if ( !check_omni_light(omni_light_index, OMNI_LIGHT_MASK_VOLFOG))
            return false;
        #endif
        RenderOmniLight ol = omni_lights_cb[omni_light_index];
        float4 pos_and_radius = ol.posRadius;
        half4 color_and_specular = getFinalColor(ol, worldPos);
        half3 point2light = half3(pos_and_radius.xyz-worldPos.xyz);
        half distSqFromLight = dot(point2light,point2light);
        half radius2 = pow2(half(pos_and_radius.w));
        #if DYNAMIC_LIGHTS_EARLY_EXIT
          BRANCH
          if (distSqFromLight >= radius2)
            return false;
        #endif
        half invSqrRad = rcp(radius2);
        half attenuation = getDistanceAtt( distSqFromLight, invSqrRad );

        #if OMNI_SHADOWS
          attenuation *= getOmniShadow(getOmniLightShadowData(omni_light_index), pos_and_radius, worldPos, 1, half2(0, 0));
        #endif

        //ambient phase. shlick phase is heavier and will cause to much temporal difference
        dynamicLighting += (ambPhase*attenuation*lightsEffect)*color_and_specular.xyz; //

        return true;
      }
    }
  }

  hlsl(stage)
  {
    half3 calc_dynamic_lighting(float2 screenTcJittered, float nextDepth, float3 worldPos,
      float3 jitteredWorldPos, half3 jitteredView, half mieG0, half mieG1, half ambPhase)
    {
      half3 dynamicLighting = 0;
      ##if (dynamic_lights_count != lights_off)
        #define SPOT_SHADOWS 1
        #define OMNI_SHADOWS 1

        half lightsEffect = 1;
        uint sliceId = min(getSliceAtDepth(nextDepth, depthSliceScale, depthSliceBias), CLUSTERS_D);
        uint clusterIndex = getClusterIndex(half2(screenTcJittered.xy), sliceId);
        uint wordsPerOmni = omniLightsWordCount;
        uint wordsPerSpot = spotLightsWordCount;
        uint omniAddress = clusterIndex*wordsPerOmni;

        ##if dynamic_lights_count == lights_omnispot_1
          wordsPerOmni = 1;
          wordsPerSpot = 1;
        ##endif
        ##if dynamic_lights_count == lights_omni_1
          wordsPerOmni = 1;
          wordsPerSpot = 0;
        ##endif
        ##if dynamic_lights_count == lights_spot_1
          wordsPerOmni = 0;
          wordsPerSpot = 1;
        ##endif

        ##if (dynamic_lights_count == lights_omnispot_1 || dynamic_lights_count == lights_omni_1 || dynamic_lights_count == lights_spot_1)
          UNROLL
        ##endif
        for ( uint omniWordIndex = 0; omniWordIndex < wordsPerOmni; omniWordIndex++ )
        {
          // Load bit mask data per lane
          uint mask = flatBitArray[omniAddress + omniWordIndex];
          uint mergedMask = MERGE_MASK(mask);
          while ( mergedMask != 0 ) // processed per lane
          {
            uint bitIndex = firstbitlow( mergedMask );
            mergedMask ^= ( 1U << bitIndex );
            uint omni_light_index = ((omniWordIndex<<5) + bitIndex);

            if (!calc_omni_light(omni_light_index, worldPos, ambPhase, lightsEffect, dynamicLighting))
              continue;
          }
        }

        uint spotAddress = clusterIndex*wordsPerSpot + ((CLUSTERS_D+1)*CLUSTERS_H*CLUSTERS_W*wordsPerOmni);

        ##if (dynamic_lights_count == lights_omnispot_1 || dynamic_lights_count == lights_omni_1 || dynamic_lights_count == lights_spot_1)
          UNROLL
        ##endif
        for ( uint spotWordIndex = 0; spotWordIndex < wordsPerSpot; spotWordIndex++ )
        {
          // Load bit mask data per lane
          uint mask = flatBitArray[spotAddress + spotWordIndex];
          uint mergedMask = MERGE_MASK(mask);
          while ( mergedMask != 0 ) // processed per lane
          {
            uint bitIndex = firstbitlow( mergedMask );
            mergedMask ^= ( 1U << bitIndex );
            uint spot_light_index = ((spotWordIndex<<5) + bitIndex);

            if (!calc_spot_light(spot_light_index, jitteredWorldPos, jitteredView, lightsEffect, mieG0, mieG1, dynamicLighting))
              continue;
          }
        }
      ##endif
      return dynamicLighting;
    }
  }
endmacro


macro VOLFOG_INITIAL_COMMON(stage, warp_size_z)
  bool use_improved_light_leak_offset = true; // only disable for testing

  supports global_const_block;

  VIEW_VEC_OPTIMIZED(stage)
  INIT_ESM_SHADOW(stage)
  hlsl(stage)
  {
    #define FASTEST_STATIC_SHADOW_PCF 1
    #define DO_NOT_FILTER_GI_AMBIENT_BY_NORMAL_WEIGHT 1
  }

  INIT_BLURRED_DEPTH_ABOVE(stage)
  USE_BLURRED_DEPTH_ABOVE(stage)
  //SSGI_USE_VOLMAP_GI_AUTO(stage)

  INIT_VOLUMETRIC_GI(stage)
  USE_VOLUMETRIC_GI(stage)

  USE_ESM_SHADOW(stage)

  INIT_FOM_SHADOWS(stage)
  USE_FOM_SHADOWS(stage)

  //GI_DEMO(stage)

  USE_PREV_TC(stage)


  //we can use csm shadows, but performance is worser. downsample and blur is 0.32, additional csm cost is 0.7msec.
  //however, we can use csm with min filter (more shadowing) and save ESM blur
  //we can use static cascade for other cascades than first 2 as well (will probably be sufficient as well)
  //all in all we can get up to ~ -0.15msec on blur as optimization here (and less memory)

  (stage)
  {
    inv_resolution@f3 = (inv_volfog_froxel_volume_res.x, inv_volfog_froxel_volume_res.y, inv_volfog_froxel_volume_res.z, 0);
    jitter_ray_offset@f4 = jitter_ray_offset;
    local_view_z@f3 = local_view_z;
    prev_initial_inscatter@smp3d = prev_initial_inscatter;
    prev_initial_extinction@smp3d = prev_initial_extinction;
    initial_media@smp3d = initial_media;
    volfog_occlusion@tex2d = volfog_occlusion;
    prev_volfog_weight@smp3d = prev_volfog_weight;
    volfog_gi_amount_weight@f1 = volfog_gi_amount_weight;

    volfog_froxel_range@f1 = volfog_froxel_range_params.x;
    channel_swizzle_indices@i2 = (channel_swizzle_indices.x, channel_swizzle_indices.y, 0, 0);
    volfog_blended_slice_cnt@i1 = volfog_blended_slice_cnt;
    volumelight_reprojection_factors@f2 = (volumelight_reprojection_factors.x, volumelight_reprojection_factors.y, 0, 0);
    volfog_froxel_volume_res_z@f1 = volfog_froxel_volume_res.z;
    volfog_multi_scatter_ao_weight@f1 = (max(min(volfog_multi_scatter_ao_weight, 1), 0), 0, 0, 0);
    skies_primary_sun_light_dir@f3 = (skies_primary_sun_light_dir.x, skies_primary_sun_light_dir.y, skies_primary_sun_light_dir.z, 0);
    volfog_prev_range_ratio@f1 = volfog_prev_range_ratio;

    prev_volfog_occlusion@tex2d = prev_volfog_occlusion;

    volfog_light_leak_depth_bias_scale@f1 = volfog_light_leak_depth_bias_scale;
    volfog_light_leak_sun_bias_scale@f1 = volfog_light_leak_sun_bias_scale;

    volfog_gi_sampling_mode@i1 = volfog_gi_sampling_mode;
  }

  bool enable_self_shadowing = froxel_fog_use_self_shadowing == yes && volfog_shadow != NULL;

  if (enable_self_shadowing)
  {
    local float self_shadow_blend_start = volfog_self_shadow_blend_slice_cnt / volfog_froxel_volume_res.z;
    INIT_AND_USE_GLOBTM(stage)
    (stage)
    {
      volfog_shadow@tex3d = volfog_shadow;
      self_shadow_blend_mul_add@f2 = (1.0/(1.0-self_shadow_blend_start),-self_shadow_blend_start/(1.0-self_shadow_blend_start),0,0);
    }
    hlsl(stage)
    {
      #define volfog_shadow_samplerstate initial_media_samplerstate
    }
  }

  if (froxel_fog_use_experimental_offscreen_reprojection == yes)
  {
    (stage)
    {
      volfog_test_frame_step@f1 = volfog_test_frame_step;
      volfog_test_sample_cnt@f1 = volfog_test_sample_cnt;
      volfog_test_step_start@f1 = volfog_test_step_start;
      volfog_test_range_media@f1 = volfog_test_range_media;
      volfog_test_range_shadow@f1 = volfog_test_range_shadow;
    }
  }

  INIT_ZNZFAR_STAGE(stage)
  INIT_SKYLIGHT_PARAMS(stage)
  USE_SKYLIGHT_PARAMS(stage)
  INIT_SIMPLE_AMBIENT(stage)
  USE_FROXEL_JITTERED_TC(stage, jitter_ray_offset.w, inv_resolution.xyz)

  SKY_CLOUDS_SHADOWS(stage, skies_world_view_pos, skies_primary_sun_light_dir.x, skies_primary_sun_light_dir.z, skies_primary_sun_light_dir.y)

  // for scattering sample:
  (stage)
  {
    skies_primary_sun_color@f3 = (skies_primary_sun_color.x * skies_scattering_effect,
                                  skies_primary_sun_color.y * skies_scattering_effect,
                                  skies_primary_sun_color.z * skies_scattering_effect, 0);
    skies_transmittance_texture@smp2d = skies_transmittance_texture;
    skies_ms_texture@smp2d = skies_ms_texture;
  }

  ATMO(stage)
  GET_ATMO(stage)

  hlsl(stage) {
    #define NUM_CASCADES 3
  }

  INIT_CSM_SHADOW_STCODE(stage)
  VOLUME_DEPTH_CONVERSION(stage)
  VOLFOG_USE_DYNAMIC_LIGHTS(stage)

  if (use_improved_light_leak_offset)
  {
    BASE_GPU_OCCLUSION(stage)

    // we increase +-1 froxel to prevent filtering/blending with jittered occluded
    local float4 froxel_offset = (-0.5*inv_volfog_froxel_volume_res.x, -0.5*inv_volfog_froxel_volume_res.y, 0.5*inv_volfog_froxel_volume_res.x, 0.5*inv_volfog_froxel_volume_res.y);
    (stage)
    {
      bbox_offset@f4 = (froxel_offset.x, froxel_offset.y, froxel_offset.z + inv_volfog_froxel_volume_res.x, froxel_offset.w + inv_volfog_froxel_volume_res.y);
    }
    hlsl(stage)
    {
      float calcHZBDepth(uint2 dtId)
      {
        float4 sbox = saturate(dtId.xyxy*inv_resolution.xyxy + bbox_offset);
        sbox.zw = min(sbox.zw, 0.99999);// to avoid sampling outside of screen
        float closestRawDepth = check_box_occl_visible_tc_base(sbox);
        return linearize_z(closestRawDepth, zn_zfar.zw);
      }
    }
  }

  (stage) {
    volfog_ff_weight_rw@uav : register(volfog_ff_weight_const_no) hlsl {
      RWTexture3D<float> volfog_ff_weight_rw@uav;
    }
    volfog_ff_accumulated_inscatter_rw@uav : register(volfog_ff_accumulated_inscatter_const_no) hlsl {
      RWTexture3D<float4> volfog_ff_accumulated_inscatter_rw@uav;
    }
    volfog_ff_initial_inscatter_rw@uav : register(volfog_ff_initial_inscatter_const_no) hlsl {
      RWTexture3D<float3> volfog_ff_initial_inscatter_rw@uav;
    }
    volfog_ff_initial_extinction_rw@uav : register(volfog_ff_initial_extinction_const_no) hlsl {
      RWTexture3D<float3> volfog_ff_initial_extinction_rw@uav;
    }
  }

  hlsl(stage)
  {
    #include <hammersley.hlsl>

    #define MIN_SHADOW_SIZE 128
    #include "csm_shadow_tc.hlsl"
    half get_depth_above_ao(float3 worldPos)
    {
      half vignetteEffect;
      float depthHt = get_depth_above_fast(worldPos, vignetteEffect);
      const float height_bias = 0.05;
      const float height_scale = 0.5f;
      half occlusion = half(rcp((max(0.01, (depthHt - height_bias - worldPos.y)*(height_scale)+1))));
      half ao = saturate(occlusion)*0.85h + 0.15h;
      return lerp(ao, 1, vignetteEffect);
    }

    bool samplePrevValue(float3 tc, out half4 out_prev_inscatter, out half2 prev_atmo_scattering_shadows)
    {
      out_prev_inscatter = 0;
      half3 packedExtinction = half3(tex3Dlod(prev_initial_extinction, float4(tc,0)).xyz);
      half extinction = packedExtinction.x;
      prev_atmo_scattering_shadows = packedExtinction.yz;
      if (is_voxel_occluded(extinction))
        return false;
      BRANCH
      if (extinction > 0.0001) // improves perf assuming mostly empty spaces
        out_prev_inscatter = half4(get_swizzled_color(tex3Dlod(prev_initial_inscatter, float4(tc,0)).rgb, channel_swizzle_indices.y), extinction);
      return true;
    }

    half sampleStaticShadowForVolfogImpl(float3 world_pos)
    {
      float3 staticShadowPointToEye = world_view_pos.xyz - world_pos;

      float shadowEffect = 0;
      uint cascade_id;
      float3 shadowTc = get_csm_shadow_tc(staticShadowPointToEye, cascade_id, shadowEffect);

      half shadow = 1;
      ##if shadows_quality == high
        shadow = get_downsampled_shadows(shadowTc);
        BRANCH
        if (cascade_id > 2)
          shadow *= getStaticShadow(world_pos);
      ##else
        shadow = getStaticShadow(world_pos);
        #if HAS_DOWNSAMPLED_SHADOWS
        FLATTEN
        if (shadowTc.z < 1)
          shadow = shadow*get_downsampled_shadows(shadowTc);
        #endif
      ##endif
      return shadow;
    }

    half sampleStaticShadowForVolfog(float2 screen_tc_2d_jittered, float jittered_w, float3 shadowBiasOffset)
    {
      float3 jitteredViewVect = getViewVecOptimized(screen_tc_2d_jittered);
      float3 jitteredPointToEye = -jitteredViewVect*jittered_w;
      float3 jitteredWorldPos = world_view_pos.xyz - jitteredPointToEye.xyz;
      float3 staticShadowWorldPos = jitteredWorldPos + shadowBiasOffset;
      return sampleStaticShadowForVolfogImpl(staticShadowWorldPos);
    }

    void applyAdditionalShadows(float3 jittered_world_pos, inout half shadow, out half shadow_for_scattering)
    {
      shadow *= getFOMShadow(jittered_world_pos);
      half cloudExtinction = base_clouds_transmittance(jittered_world_pos);
      shadow_for_scattering = shadow * cloudExtinction;
      shadow *= clouds_shadow_from_extinction(cloudExtinction);
    }

##if enable_self_shadowing
      float2 get_cur_tc(float3 world_pos, out float3 clipSpace)
      {
        float4 clipSpacePos = mulPointTm(world_pos, globtm);
        clipSpace = clipSpacePos.w < 0.0001 ? float3(2,2,2) : clipSpacePos.xyz/clipSpacePos.w;
        return clipSpace.xy*float2(0.5,-0.5) + float2(0.5,0.5);
      }
      float3 get_froxel_fog_tc(float3 world_pos)
      {
        float3 clipSpace;
        float2 tc = get_cur_tc(world_pos, clipSpace);
        return float3(tc, depth_to_volume_pos(linearize_z(clipSpace.z, zn_zfar.zw)));
      }
##endif

    #define __XBOX_REGALLOC_VGPR_LIMIT 48
    #define __XBOX_ENABLE_LIFETIME_SHORTENING 1


    void calc_impl(uint3 dtId, uint3 tid, uint baseFlatId)
    {
      float2 screenTc2d = (dtId.xy+0.5f)*inv_resolution.xy;
      float3 viewVect = getViewVecOptimized(screenTc2d.xy);
      float3 view = normalize(viewVect);

##if use_improved_light_leak_offset
      float linearHZBDepth = calcHZBDepth(dtId.xy); // accurate depth for light leak correction (NOT optimization)
##endif

      Length r = world_view_pos.y/1000 + theAtmosphere.bottom_radius;
      Number mu = view.y;
      Number primaryNu = dot(view.xzy, skies_primary_sun_light_dir);
      Number primaryMu_s = skies_primary_sun_light_dir.z;
      Number primaryRayleighPhaseValue = RayleighPhaseFunction(primaryNu);
      Number primaryMiePhaseValue = primaryRayleighPhaseValue*MiePhaseFunctionDivideByRayleighOptimized(theAtmosphere.mie_phase_consts, primaryNu);
      MultipleScatteringTexture multiple_scattering_approx = SamplerTexture2DFromName(skies_ms_texture);
      TransmittanceTexture transmittance_texture = SamplerTexture2DFromName(skies_transmittance_texture);
      float3 scatteringMul = skies_primary_sun_color.rgb * theAtmosphere.solar_irradiance / 1000;


      uint sliceCnt = (uint)volfog_froxel_volume_res_z;

      uint flatId = baseFlatId + tid.z;

      uint blendingStartSliceId = sliceCnt - volfog_blended_slice_cnt - 1;

      uint curActiveLayerEnd = calc_last_active_froxel_layer(volfog_occlusion, dtId.xy);
      uint curActiveBlockEnd = (min(curActiveLayerEnd + 1, sliceCnt) + warp_size_z - 1) / warp_size_z;


      // {volfog only, atmo scattering only}
      half2x3 accumulatedInscatter = 0;
      half2 accumulatedExtinction = 1;

      half4 accumulatedCombinedFog = half4(0,0,0,1);
      float4 accumulatedVolfogAtBlending = float4(0,0,0,1);

      float normalizedFactor = rcp(dot(local_view_z, view));

      // semi-parallel accumulation
      LOOP
      for (uint zblock = 0; zblock < curActiveBlockEnd; ++zblock)
      {
      dtId.z = zblock*warp_size_z + tid.z; // dispatch group Z count is fixed 1, group index is fixed 0, we only care about thread index
      bool isOccluded = is_voxel_id_occluded_cached(curActiveLayerEnd, dtId); // otherwise it can clear last blocks as empty, no occluded

      float3 screenTc = float3(screenTc2d, (dtId.z+0.5f)*inv_resolution.z);
      float3 screenTcJittered = calc_jittered_tc(dtId);

      // technically, this is not consistent with the jittered froxel media sample,
      // but it is with daskies atmo scattering, and that interpolation is much more sensitive to errors than distant fog (where there is practically no visible change)
      // TODO: maybe change daskies atmo scattering sampling, or separate froxel media and atmo scattering sample, or even DF
      float startDepth = dtId.z == 0 ? 0 : volume_pos_to_depth(max(float(dtId.z) - 1, 0.5)*inv_resolution.z);
      float nextDepth = volume_pos_to_depth(max(float(dtId.z), 0.5)*inv_resolution.z);

      float cdepth = volume_pos_to_depth(screenTc.z);
      float3 viewToPoint = cdepth*viewVect;
      float3 worldPos = viewToPoint + world_view_pos.xyz;

      float nextLen = nextDepth * normalizedFactor;
      float stepLen = nextLen - startDepth * normalizedFactor;

      float3 jitteredViewVect = getViewVecOptimized(screenTcJittered.xy);
      half3 jitteredView = half3(normalize(jitteredViewVect));
      float jitteredW = max(volume_pos_to_depth(screenTcJittered.z), 0.05);
      float3 jitteredPointToEye = -jitteredViewVect*jitteredW;
      float3 jitteredWorldPos = world_view_pos.xyz - jitteredPointToEye.xyz;

      float shadowBiasTowardsSun = (nextDepth - startDepth) * volfog_light_leak_sun_bias_scale;

##if use_improved_light_leak_offset
      float depthAtPrevEdge = volume_pos_to_depth((dtId.z - 0.5)*inv_resolution.z);
      // bias towards the camera, so we don't sample shadows beyond depth
      float shadowDepthBias = min(0, max(depthAtPrevEdge, linearHZBDepth) - cdepth) * volfog_light_leak_depth_bias_scale;
      // we can apply offset directly to shadow sampling, but it can create silhouette artefacts if the view dir is not parallel to the sun dir
      // it is a compromise, as this way it cannot fix light leaking artefacts perpendicular to the sun dir
      shadowBiasTowardsSun += dot(shadowDepthBias*viewVect, from_sun_direction);

      // TODO: apply depth bias to shadow history (or even to prev media) sampling
##endif

      float3 shadowBiasOffset = from_sun_direction * (shadowBiasTowardsSun * normalizedFactor);
      half shadow = sampleStaticShadowForVolfog(screenTcJittered.xy, jitteredW, shadowBiasOffset);

##if froxel_fog_use_experimental_offscreen_reprojection == no
      half shadowForScattering;
      applyAdditionalShadows(jitteredWorldPos, shadow, shadowForScattering);
##endif

      //==

      //for high mie we need self shadow from media. Instead we change mie extrincity
      half mieG0 = volfog_get_mieG0(), mieG1 = volfog_get_mieG1();
      half ambPhase = phaseFunctionConst();
      half sunPhase = calc_sun_phase(jitteredView, half3(from_sun_direction));

      half blurredAO = get_depth_above_ao(jitteredWorldPos);
      half3 inScatterAmbLight = get_phased_volumetric_ambient(world_view_pos.xyz, screenTc.xy, cdepth, worldPos, -jitteredView, 0.66, normalize(viewToPoint), length(viewToPoint));
      inScatterAmbLight *= half(skylight_gi_weight_atten);
      if (volfog_gi_sampling_mode == 1)
        inScatterAmbLight = 0;
      else if (volfog_gi_sampling_mode == 2)
        inScatterAmbLight = all(isfinite(inScatterAmbLight)) ? saturate(inScatterAmbLight) : 0;

      half3 sunLightingNoShadow = half3(sun_color_0);

      half3 ambientLighting = inScatterAmbLight;
      sunLightingNoShadow *= sunPhase;
      ambientLighting *= ambPhase;

      half3 dynamicLighting = calc_dynamic_lighting(screenTcJittered.xy, nextDepth, worldPos, jitteredWorldPos, jitteredView, mieG0, mieG1, ambPhase);

      float3 prev_clipSpace;
      float2 prev_tc_2d = getPrevTc(worldPos, prev_clipSpace);
      float4 prev_zn_zfar = zn_zfar;//fixme:check if it is correct assumption
      float prevDepth = volfog_prev_range_ratio*linearize_z(prev_clipSpace.z, prev_zn_zfar.zw);
      float3 prev_tc = float3(prev_tc_2d, depth_to_volume_pos(prevDepth));

##if froxel_fog_use_experimental_offscreen_reprojection == yes
      bool isPrevFrameOffscreen = checkOffscreenTc3d(prev_tc);

      #define VOLFOG_USE_BLURRED_OFFSCREEN_SHADOWS 1 // this makes offscreen shadow look more natural, less blocky (but it costs half of the offscreen improvement overhead)
      const float convergenceSampleCnt = volfog_test_sample_cnt;
      const float frameStep = volfog_test_frame_step/255;
      const half finalFrameWeight = half(volumelight_reprojection_factors.x);

      float prevWeightN = tex3Dlod(prev_volfog_weight, float4(prev_tc,0)).x * 255;
      float prevFrameOffscreenWeight = saturate(1 - prevWeightN / convergenceSampleCnt);

      bool resetTemporalWeights = isPrevFrameOffscreen;
      half4 prevValue;
      half2 prevTemporalShadows;
      if (!samplePrevValue(prev_tc, prevValue, prevTemporalShadows))
      {
        resetTemporalWeights = true;
        prevValue = 0;
        prevTemporalShadows = 0;
      }

      // accumulate first X samples linearly, then the rest exponentially (using fixed weight)
      float clampEventFrame = prevWeightN > convergenceSampleCnt ? 255.0 : ceil(prevWeightN);

      if (resetTemporalWeights)
      {
        prevFrameOffscreenWeight = 1;
        clampEventFrame = 0;
      }

      texture3DAt(volfog_ff_weight_rw, dtId) = resetTemporalWeights ? 0.0 : saturate(clampEventFrame*(1./255) + frameStep);

      half weight = resetTemporalWeights ? 0.0h : min(finalFrameWeight, 1 - half(rcp(volfog_test_step_start + clampEventFrame)));
      if (!resetTemporalWeights)
      {
        //try reject history of fast moving froxels
        float dt = saturate(abs(prev_tc.z - screenTcJittered.z)-inv_resolution.z);
        half velocityFactor = half(exp2(-dt*64.0));
        half velWeight = half(volumelight_reprojection_factors.y);
        weight *= lerp(1.0, velocityFactor, velWeight);
      }
##else

      half weight = half(volumelight_reprojection_factors.x);
      FLATTEN if (checkOffscreenTc3d(prev_tc))
        weight = 0;

      half4 prevValue;

      half2 prevTemporalShadows;
      if (!samplePrevValue(prev_tc, prevValue, prevTemporalShadows))
      {
        weight = 0;
        prevValue = 0;
        prevTemporalShadows = 0;
      }
      else
      {
        //try reject history of fast moving froxels
        float dt = saturate(abs(prev_tc.z - screenTcJittered.z)-inv_resolution.z);
        half velocityFactor = half(exp2(-dt*64.0f));
        half velWeight = half(volumelight_reprojection_factors.y);
        weight *= lerp(1.0h, velocityFactor, velWeight);
      }
##endif

      float4 media = initial_media[dtId];

##if froxel_fog_use_experimental_offscreen_reprojection == yes
      BRANCH
      if (prevFrameOffscreenWeight > 0.0001) // supersampling of current frame data if prev frames were offscreen
      {
        // the offset of the extra samples from center is getting smaller over the frames (when they are not offscreen)
        float rangeOffsetMul = prevFrameOffscreenWeight * saturate(1 - screenTc.z);

        // media is blurred in 2d plane from generated samples (in NBS), from 5 samples
        const float mediaRangeOffsetFroxelSize = volfog_test_range_media;
        float mediaRangeOffset = rangeOffsetMul * mediaRangeOffsetFroxelSize;
        media += tex3Dlod(initial_media, float4(screenTc + inv_resolution.xyz*float3(-1,-1,0)*mediaRangeOffset,0));
        media += tex3Dlod(initial_media, float4(screenTc + inv_resolution.xyz*float3(+1,-1,0)*mediaRangeOffset,0));
        media += tex3Dlod(initial_media, float4(screenTc + inv_resolution.xyz*float3(-1,+1,0)*mediaRangeOffset,0));
        media += tex3Dlod(initial_media, float4(screenTc + inv_resolution.xyz*float3(+1,+1,0)*mediaRangeOffset,0));
        media /= 5;

        // blurred shadow (downsampled and static) from the 4 corners of the 2d froxel plane, TODO: very inefficient and not even accurate
        const float shadowRangeOffsetFroxelSize = volfog_test_range_shadow;
        float shadowRangeOffset = rangeOffsetMul * shadowRangeOffsetFroxelSize;
        #if VOLFOG_USE_BLURRED_OFFSCREEN_SHADOWS
          half avgCenterShadow = 0;
          avgCenterShadow += sampleStaticShadowForVolfog(screenTc.xy + inv_resolution.xy*float2(-1,-1)*shadowRangeOffset, cdepth, shadowBiasOffset);
          avgCenterShadow += sampleStaticShadowForVolfog(screenTc.xy + inv_resolution.xy*float2(+1,-1)*shadowRangeOffset, cdepth, shadowBiasOffset);
          avgCenterShadow += sampleStaticShadowForVolfog(screenTc.xy + inv_resolution.xy*float2(-1,+1)*shadowRangeOffset, cdepth, shadowBiasOffset);
          avgCenterShadow += sampleStaticShadowForVolfog(screenTc.xy + inv_resolution.xy*float2(+1,+1)*shadowRangeOffset, cdepth, shadowBiasOffset);
          avgCenterShadow /= 4;
        #else
          half avgCenterShadow = avgCenterShadow = sampleStaticShadowForVolfog(screenTc.xy, cdepth, shadowBiasOffset);
        #endif
        // over the frames, we use less from the blurred (and unjittered) shadows
        shadow = lerp(shadow, avgCenterShadow, half(prevFrameOffscreenWeight));
      }

      half shadowForScattering;
      applyAdditionalShadows(jitteredWorldPos, shadow, shadowForScattering);
##endif

##if enable_self_shadowing
      float3 selfShadowWorldPos = jitteredWorldPos - shadowBiasOffset; // negative offset with a size of a voxel, so it does not include itself
      float3 selfShadowTc = get_froxel_fog_tc(selfShadowWorldPos);
      half selfShadow = half(tex3Dlod(volfog_shadow, float4(selfShadowTc, 0)).x);

      // fade out at frustum end
      half selfShadowBlendWeight = half(saturate(screenTc.z*self_shadow_blend_mul_add.x + self_shadow_blend_mul_add.y));
      selfShadow = lerp(selfShadow, 1, selfShadowBlendWeight);

      shadow *= selfShadow;
##endif

      #define VOLFOG_NIGHT_SUN_COS 0.046f // at this magic value it seems to be consistent with surface shadows // TODO: make it make sense!
      const half shadowMul = from_sun_direction.y > -VOLFOG_NIGHT_SUN_COS ? 0 : 1;
      shadow *= shadowMul;
      shadowForScattering *= shadowMul;


      half2 temporalShadows = lerp(half2(shadowForScattering, blurredAO), prevTemporalShadows, weight);

      half4 atmoScatteringResult = 0;
      {
        Length d = nextLen/1000;
        Length r_d = ClampRadius(theAtmosphere, SafeSqrt(d * d + 2.0 * r * mu * d + r * r));
        Number primaryMu_s_d = ClampCosine((r * primaryMu_s + d * primaryNu) / r_d);

        MediumSampleRGB medium = SampleMediumFull(theAtmosphere, r_d-theAtmosphere.bottom_radius, worldPos);
        half3 primaryTransmittanceToSun = half3(GetTransmittanceToSun( theAtmosphere, transmittance_texture, r_d, primaryMu_s_d));

        half primaryScatterShadow = temporalShadows.x;
        half temporalBlurredAO = temporalShadows.y;
        primaryTransmittanceToSun *= finalShadowFromShadowTerm(primaryScatterShadow);

        half3 primaryPhaseTimesScattering = half3(medium.scatteringMie * primaryMiePhaseValue + medium.scatteringRay * primaryRayleighPhaseValue);
        half3 primaryMultiScatteredLuminance = half3(GetMultipleScattering(theAtmosphere, multiple_scattering_approx, r_d, primaryMu_s_d) * medium.scattering);

        primaryMultiScatteredLuminance *= lerp(1, temporalBlurredAO, half(volfog_multi_scatter_ao_weight));

        atmoScatteringResult = half4((
          primaryTransmittanceToSun * primaryPhaseTimesScattering + primaryMultiScatteredLuminance) * scatteringMul,
          dot(medium.extinction.rgb, 1.0/3 / 1000));
      }

      half3 inScatterLight = sunLightingNoShadow*shadow + ambientLighting + dynamicLighting;
      half4 result = half4(media.rgb*inScatterLight, media.a);

      half4 result_inscatter = lerp(result, prevValue, weight);

      FLATTEN if (is_voxel_occluded(result_inscatter)) // justincase to avoid any NaNs
        result_inscatter = 0;

      texture3DAt(volfog_ff_initial_inscatter_rw, dtId) = get_swizzled_color_inv(result_inscatter.rgb, channel_swizzle_indices.x);
      texture3DAt(volfog_ff_initial_extinction_rw, dtId) = isOccluded ? NaN : float3(result_inscatter.a, temporalShadows);


        // integrate NBS volfog + atmo scattering separately
        half2x3 combinedInscatter = half2x3(result_inscatter.rgb, atmoScatteringResult.rgb);
        float2 combinedMuE = float2(result_inscatter.a, atmoScatteringResult.a);

        half2 volfogTransmittance = half2(exp(-combinedMuE * stepLen));
        float2 combinedInvMuE = rcp(max(VOLFOG_MEDIA_DENSITY_EPS, combinedMuE));

        half phaseFunction = 1; // premultiplied by phase
        half3 S0 = combinedInscatter[0] * phaseFunction;
        half3 S1 = combinedInscatter[1] * phaseFunction;
        // integrate along the current step segment
        half3 Sint0 = half3((S0 - S0 * volfogTransmittance[0]) * combinedInvMuE[0]);
        half3 Sint1 = half3((S1 - S1 * volfogTransmittance[1]) * combinedInvMuE[1]);

  #if warp_size_z == 1 // special case: linear accumulation along Z slices
        // accumulate and also take into account the transmittance from previous steps
        accumulatedInscatter += half2x3(accumulatedExtinction[0] * Sint0, accumulatedExtinction[1] * Sint1);
        // Evaluate transmittance to view independentely
        accumulatedExtinction *= volfogTransmittance;

        // apply volfog-only on atmo scattering to keep consistency with daskies apply
        accumulatedCombinedFog = nanfilter(half4(
          accumulatedInscatter[1] * accumulatedExtinction[0] + accumulatedInscatter[0],
          accumulatedExtinction[1] * accumulatedExtinction[0]));

        // volfog-only at blending slice
        FLATTEN if (dtId.z == blendingStartSliceId)
          accumulatedVolfogAtBlending = float4(accumulatedInscatter[0], accumulatedExtinction[0]);

  #else // semi-parallel accumulation, both volfog and atmo scattering separately

        // no need for a sync point as we are processing Z first

        // evaluate transmittance first
        {
          half2 baseTransmittance = volfogTransmittance;

          if (tid.z == 0)
            baseTransmittance *= accumulatedExtinction; // apply the result of parallel blocks
          sharedTmpAccumulatedExtinction[flatId] = baseTransmittance;

          GroupMemoryBarrier();

          UNROLL
          for (uint offset = 1; offset < warp_size_z; offset = offset << 1)
          {
            if (tid.z >= offset)
              sharedTmpAccumulatedExtinction[flatId] *= sharedTmpAccumulatedExtinction[flatId - offset];
            GroupMemoryBarrier();
          }
        }

        half2 prevExtinction = tid.z == 0 ? accumulatedExtinction : sharedTmpAccumulatedExtinction[flatId - 1];
        half2 finalExtinction = prevExtinction * volfogTransmittance;

        // then evaluate transmittance-dependent inscatter
        {
          half2x3 baseInscatter = half2x3(prevExtinction[0] * Sint0, prevExtinction[1] * Sint1); // not inclusive transmittance (N-1 is applied to inscatter)

          if (tid.z == 0)
            baseInscatter += accumulatedInscatter; // apply the result of parallel blocks
          sharedTmpAccumulatedInscatter[flatId] = inscatter_to_struct(baseInscatter);

          GroupMemoryBarrier();

          UNROLL
          for (uint offset = 1; offset < warp_size_z; offset = offset << 1)
          {
            if (tid.z >= offset)
              sharedTmpAccumulatedInscatter[flatId] = inscatter_to_struct(
                inscatter_from_struct(sharedTmpAccumulatedInscatter[flatId]) +
                inscatter_from_struct(sharedTmpAccumulatedInscatter[flatId - offset])
              );
            GroupMemoryBarrier();
          }
        }

        half2x3 finalInscatter = inscatter_from_struct(sharedTmpAccumulatedInscatter[flatId]);

        // store the result of parallel blocks
        accumulatedInscatter = inscatter_from_struct(sharedTmpAccumulatedInscatter[baseFlatId + warp_size_z - 1]);
        accumulatedExtinction = sharedTmpAccumulatedExtinction[baseFlatId + warp_size_z - 1];

        // apply volfog-only on atmo scattering to keep consistency with daskies apply
        accumulatedCombinedFog = nanfilter(half4(
          finalInscatter[1] * finalExtinction[0] + finalInscatter[0],
          finalExtinction[1] * finalExtinction[0]));

        FLATTEN if (dtId.z == blendingStartSliceId)
          accumulatedVolfogAtBlending = float4(finalInscatter[0], finalExtinction[0]);
  #endif
        texture3DAt(volfog_ff_accumulated_inscatter_rw, dtId) = accumulatedCombinedFog;
      }

      uint blendingStartThreadId = blendingStartSliceId % warp_size_z;
      uint prevActiveLayerEnd = calc_last_active_froxel_layer(prev_volfog_occlusion, dtId.xy);
      uint prevActiveBlockEnd = (min(prevActiveLayerEnd + 1, sliceCnt) + warp_size_z - 1) / warp_size_z;
      uint maxActiveBlockEnd = max(curActiveBlockEnd, prevActiveBlockEnd);
      uint sliceBlockCnt = (sliceCnt + warp_size_z - 1) / warp_size_z;

  #if warp_size_z != 1
      if (curActiveBlockEnd > 0 && curActiveBlockEnd < maxActiveBlockEnd)
      {
        // the very last accumulated data must be used for all parallel threads along Z
        accumulatedInscatter = inscatter_from_struct(sharedTmpAccumulatedInscatter[baseFlatId + warp_size_z - 1]);
        accumulatedExtinction = sharedTmpAccumulatedExtinction[baseFlatId + warp_size_z - 1];
        accumulatedCombinedFog = nanfilter(half4(
          accumulatedInscatter[1] * accumulatedExtinction[0] + accumulatedInscatter[0],
          accumulatedExtinction[1] * accumulatedExtinction[0]));
      }
  #endif

      // clear layers which became occluded since last frame
      {
        for (uint z = curActiveBlockEnd; z < maxActiveBlockEnd; ++z)
        {
          dtId.z = z*warp_size_z + tid.z;
          texture3DAt(volfog_ff_initial_extinction_rw, dtId) = NaN;
          texture3DAt(volfog_ff_accumulated_inscatter_rw, dtId) = accumulatedCombinedFog; // clearing occluded froxels with last valid value in a ray (this hides some weird HW dependent bugs)
        }
      }

      // also mark the rest of temporal froxels occluded, so reprojection can detect them next frame
      // this can differ from prev-current frame diff, as reprojection uses (3d) jittering on prev samples
      {
        // TODO: instead of fully cleaning it, transform the frustum edges, find furthest point, clean it until that froxel
        for (uint z = maxActiveBlockEnd; z < sliceBlockCnt; ++z)
        {
          dtId.z = z*warp_size_z + tid.z;
          texture3DAt(volfog_ff_initial_extinction_rw, dtId) = NaN; // occluded
        }
      }

      if (tid.z == blendingStartThreadId)
        texture3DAt(volfog_ff_accumulated_inscatter_rw, int3(dtId.xy, sliceCnt)) = nanfilter(accumulatedVolfogAtBlending);

    }
  }
endmacro



shader froxel_fog_light_calc_propagate_cs
{
  hlsl(cs)
  {
    ##if froxel_fog_dispatch_mode == merged_linear
        #define WARP_SIZE_X 8
        #define WARP_SIZE_Y 8
        #define WARP_SIZE_Z 1
    ##else
        #define WARP_SIZE_X 4
        #define WARP_SIZE_Y 4
        #define WARP_SIZE_Z 4

##if hardware.metal // metal can't handle matrix types in groupshared memory
        struct InscatterAcc
        {
          half3 v0, v1;
        };
        InscatterAcc inscatter_to_struct(half2x3 v)
        {
          InscatterAcc insc;
          insc.v0 = v[0];
          insc.v1 = v[1];
          return insc;
        }
        half2x3 inscatter_from_struct(InscatterAcc v)
        {
          return half2x3(v.v0, v.v1);
        }

        groupshared InscatterAcc sharedTmpAccumulatedInscatter[WARP_SIZE_X*WARP_SIZE_Y*WARP_SIZE_Z];
##else
        #define inscatter_to_struct(v) v
        #define inscatter_from_struct(v) v

        groupshared half2x3 sharedTmpAccumulatedInscatter[WARP_SIZE_X*WARP_SIZE_Y*WARP_SIZE_Z];
##endif

        groupshared half2 sharedTmpAccumulatedExtinction[WARP_SIZE_X*WARP_SIZE_Y*WARP_SIZE_Z];
    ##endif
  }

  ENABLE_ASSERT(cs)
  if (froxel_fog_dispatch_mode == merged_parallel)
  {
    VOLFOG_INITIAL_COMMON(cs, 4)
  }
  else
  {
    VOLFOG_INITIAL_COMMON(cs, 1)
  }

  (cs)
  {
    world_view_pos@f4 = (world_view_pos.x, world_view_pos.y, world_view_pos.z, time_phase(0, 0));
  }

  hlsl(cs) {

    [numthreads( WARP_SIZE_Z, WARP_SIZE_X, WARP_SIZE_Y)]
    void initial_cs( uint3 tid : SV_GroupThreadID, uint3 gId : SV_GroupID )
    {

      tid.zxy = tid.xyz;
      gId.zxy = gId.xyz;

      uint3 threadGroupNum = uint3(WARP_SIZE_X, WARP_SIZE_Y, WARP_SIZE_Z);
      uint3 dtId = gId * threadGroupNum + tid;
      uint baseFlatId = WARP_SIZE_Z * (tid.y * WARP_SIZE_X + tid.x);
      calc_impl(dtId, tid, baseFlatId);
    }
  }

  // FIXME: not enough precision for dense fog scenes with bright lightning, creates color banding
  //if (can_use_half_precision == yes)
  //{
  //  compile("cs_6_6_half", "initial_cs");
  //}
  //else
  compile("target_cs", "initial_cs");
}



// merged pass with linear accumulation, for compatiblity mode only, optimized for integrated GPUs
shader froxel_fog_light_calc_propagate_ps
{
  z_test = false;
  z_write = false;
  cull_mode = none;

  assume froxel_fog_dispatch_mode = merged_linear;

  supports global_frame; // needed for world_view_pos

  ENABLE_ASSERT(ps)
  VOLFOG_INITIAL_COMMON(ps, 1)

  hlsl
  {
    #define USE_TEXCOORD tc
  }
  POSTFX_VS(0)

  (ps)
  {
    volfog_froxel_volume_res@f3 = (volfog_froxel_volume_res);
  }

  hlsl(ps) {
    void render_ps(VsOutput input HW_USE_SCREEN_POS)
    {
      uint3 dtId = uint3(volfog_froxel_volume_res.xy * input.tc, 0);
      calc_impl(dtId, 0, 0);
    }
  }

  compile("target_ps", "render_ps");
}
