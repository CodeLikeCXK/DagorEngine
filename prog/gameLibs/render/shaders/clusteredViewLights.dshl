include "tile_lighting.dshl"
include "punctualLights.dshl"
include "clustered/lights_cb.dshl"
include "dynamic_lights_count.dshl"

macro INIT_CLUSTERED_VIEW_LIGHTS(code)
  INIT_PHOTOMETRY_TEXTURES(code)
  INIT_CLUSTERED_LIGHTS(code)
  INIT_OMNI_LIGHTS_CB(code)
  INIT_SPOT_LIGHTS_CB(code)
  INIT_LIGHT_SHADOWS(code)
  INIT_COMMON_LIGHTS_SHADOWS_CB(code)
  INIT_LIGHTS_CLUSTERED_CB(code)
  INIT_POINT_LIGHTS_AO(code)
endmacro

macro USE_CLUSTERED_VIEW_LIGHTS(code)
  hlsl(code) {
    #ifndef DYNAMIC_LIGHTS_SPECULAR
      #define DYNAMIC_LIGHTS_SPECULAR 1
    #endif
  }
  if (dynamic_lights_count != lights_off)
  {
    hlsl(code) {
      #define LAMBERT_LIGHT 1
      #define DYNAMIC_LIGHTS_EARLY_EXIT 1
      #ifndef OMNI_SHADOWS
      #define OMNI_SHADOWS 1
      #endif
    }
    USE_PHOTOMETRY_TEXTURES(code)
    USE_CLUSTERED_LIGHTS(code)
    USE_OMNI_LIGHTS_CB(code)
    USE_LIGHT_SHADOWS(code)
    USE_COMMON_LIGHTS_SHADOWS_CB(code)
    USE_LIGHTS_CLUSTERED_CB(code)
  }
  hlsl(code) {
    #include "pbr/pbr.hlsl"
    #include "clustered/punctualLights.hlsl"
    #include "spot_light_shadow_flags.hlsli"
    ##if (dynamic_lights_count != lights_off)
      #define applyDynamicAoEffect(gbufferAO) ((gbufferAO)*dynamic_lights_ao_effect.x + dynamic_lights_ao_effect.y)
    ##else
      #define applyDynamicAoEffect(gbufferAO) (gbufferAO)
    ##endif
    half3 get_dynamic_lighting(ProcessedGbuffer gbuffer, float3 worldPos, float3 view, float w, float2 screenpos, float NoV, float3 specularColor, float2 tc, half enviAO)
    {
      half3 result = 0;
      ##if (dynamic_lights_count != lights_off)
        half dynamicAO = applyDynamicAoEffect(gbuffer.ao);
        #if DYNAMIC_LIGHTS_SPECULAR
        half dynamicLightsSpecularStrength = gbuffer.extracted_albedo_ao;
        #else
        half dynamicLightsSpecularStrength = 0;
        #endif
        //BRANCH
        //if (all( abs(lights_box_center_count.xyz-worldPos.xyz) < lights_box_extent))
        {
          #if OMNI_CONTACT_SHADOWS || SPOT_CONTACT_SHADOWS
          float3 contactStartCameraToPoint = -w*view;
          float dither = interleavedGradientNoiseFramed(screenpos, shadow_frame);//if we have temporal aa
          #endif
          #if OMNI_CONTACT_SHADOWS
          #define OMNI_CONTACT_SHADOWS_CALC \
            BRANCH\
            if (color_and_specular.w > 0 && max(omniLight.r, omniLight.g)/(max3(color_and_specular.r, color_and_specular.g, 1e-6))>0.001)\
            {\
              float2 hitUV;\
              float contactShadow = contactShadowRayCast(downsampled_far_depth_tex, downsampled_far_depth_tex_samplerstate,\
                contactStartCameraToPoint, normalize(pos_and_radius.xyz-worldPos.xyz),\
                clamp(w*0.2, 0.1, length(pos_and_radius.xyz-worldPos.xyz)), 8, dither-0.5, projectionMatrix, w, viewProjectionMatrixNoOfs, hitUV);\
              omniLight *= pow2(contactShadow);\
            }
          #else
            #define OMNI_CONTACT_SHADOWS_CALC
          #endif
          #if SPOT_CONTACT_SHADOWS
            #define SPOT_CONTACT_SHADOWS_CALC \
              BRANCH\
              if (needsContactShadows)\
              {\
                float2 hitUV;\
                float contactShadow = contactShadowRayCast(downsampled_far_depth_tex, downsampled_far_depth_tex_samplerstate, contactStartCameraToPoint, normalize(lightPosRadius.xyz-worldPos.xyz),\
                  clamp(w*0.2, 0.1, length(lightPosRadius.xyz-worldPos.xyz)), 8, dither-0.5, projectionMatrix, w, viewProjectionMatrixNoOfs, hitUV);\
                spotShadow *= pow2(contactShadow);\
              }
          #else
            #define SPOT_CONTACT_SHADOWS_CALC
          #endif
          half3 dynamicLighting = 0;
          uint sliceId = min(getSliceAtDepth(w, depthSliceScale, depthSliceBias), CLUSTERS_D);
          uint clusterIndex = getClusterIndex(tc.xy, sliceId);
          uint wordsPerOmni = omniLightsWordCount;
          uint wordsPerSpot = spotLightsWordCount;
          ##if dynamic_lights_count == lights_omnispot_1
            wordsPerSpot = 1;
            wordsPerOmni = 1;
          ##endif
          ##if dynamic_lights_count == lights_omni_1
            wordsPerOmni = 1;
            wordsPerSpot = 0;
          ##endif
          ##if dynamic_lights_count == lights_spot_1
            wordsPerOmni = 0;
            wordsPerSpot = 1;
          ##endif
          // Read range of words of visibility bits
          uint omniAddress = clusterIndex*wordsPerOmni;
          for ( uint omniWordIndex = 0; omniWordIndex < wordsPerOmni; omniWordIndex++ )
          {
            // Load bit mask data per lane
            uint mask = flatBitArray[omniAddress + omniWordIndex];
            uint mergedMask = MERGE_MASK( mask );
            while ( mergedMask != 0 ) // processed per lane
            {
              uint bitIndex = firstbitlow( mergedMask );
              mergedMask ^= ( 1U << bitIndex );
              uint omni_light_index = ((omniWordIndex<<5) + bitIndex);
              #if defined(ENABLE_OMNI_LIGHT_MASK)
              if ( !check_omni_light(omni_light_index, OMNI_LIGHT_MASK_GI)) // TODO: make mask a parameter
                continue;
              #endif
              RenderOmniLight ol = omni_lights_cb[omni_light_index];
              float4 pos_and_radius = ol.posRadius;
              float4 color_and_specular = getFinalColor(ol, worldPos);
              #if OMNI_SHADOWS
                float4 shadowTcToAtlas = getOmniLightShadowData(omni_light_index);
              #else
                float4 shadowTcToAtlas = float4(0, 0, 0, 0);
              #endif
              half3 omniLight = perform_point_light(worldPos.xyz, view, NoV, gbuffer, specularColor, dynamicLightsSpecularStrength, dynamicAO, pos_and_radius, color_and_specular, shadowTcToAtlas, screenpos);//use gbuffer.specularColor for equality with point_lights.dshl

              OMNI_CONTACT_SHADOWS_CALC

              dynamicLighting += omniLight;
            }
          }
          uint spotAddress = clusterIndex*wordsPerSpot + ((CLUSTERS_D+1)*CLUSTERS_H*CLUSTERS_W*wordsPerOmni);
          for ( uint spotWordIndex = 0; spotWordIndex < wordsPerSpot; spotWordIndex++ )
          {
            // Load bit mask data per lane
            uint mask = flatBitArray[spotAddress + spotWordIndex];
            uint mergedMask = MERGE_MASK( mask );
            while ( mergedMask != 0 ) // processed per lane
            {
              uint bitIndex = firstbitlow( mergedMask );
              mergedMask ^= ( 1U << bitIndex );
              uint spot_light_index = ((spotWordIndex<<5) + bitIndex);
              #if defined(ENABLE_SPOT_LIGHT_MASK)
              if ( !check_spot_light(spot_light_index, SPOT_LIGHT_MASK_GI)) // TODO: make mask a parameter
                continue;
              #endif

              RenderSpotLight sl = spot_lights_cb[spot_light_index];
              float4 lightPosRadius = sl.lightPosRadius;
              float4 lightColor = sl.lightColorAngleScale;
              float4 lightDirection = sl.lightDirectionAngleOffset;
              float2 texId_scale = sl.texId_scale_illuminatingplane_shadow_contactshadow.xy;
              float ao = dynamicAO;
              float illuminatingPlaneOffset = sl.texId_scale_illuminatingplane_shadow_contactshadow.z;
              uint shadowContactShadowsBits = asuint(sl.texId_scale_illuminatingplane_shadow_contactshadow.w);
              bool needsContactShadows = shadowContactShadowsBits & SPOT_LIGHT_NEEDS_CONTACT_SHADOWS_MASK;

              #define EXIT_STATEMENT continue
              #ifndef SPOT_SHADOWS
              #define SPOT_SHADOWS 1
              #endif
              #include "clustered/oneSpotLight.hlsl"
              dynamicLighting += lightBRDF;
            }
          }
          //dynamicLighting += ((clusterGrid[clusterIndex].counts>>8)&0xFF)/8.0;
          half pointLightsFinalAO = (enviAO*dynamic_lights_ao_effect.x + dynamic_lights_ao_effect.y);//we use ssao, since we use it in point_lights.dshl (works slow, but not much lights are there)
          result += dynamicLighting*pointLightsFinalAO;
        }
      ##endif
      return result;
    }
  }
endmacro

macro INIT_AND_USE_CLUSTERED_VIEW_LIGHTS(code)
  INIT_CLUSTERED_VIEW_LIGHTS(code)
  USE_CLUSTERED_VIEW_LIGHTS(code)
endmacro
