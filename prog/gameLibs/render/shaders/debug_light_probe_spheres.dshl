include "shader_global.dshl"
include "gbuffer.dshl"
include "viewVecVS.dshl"
include "indoor_light_probes.dshl"
include "fake_static_shadow.dshl"

shader debug_mirror_sphere
{
  supports global_frame;

  z_test = true;
  z_write = true;

  (vs) {
    globtm@f44 = globtm;
  }

  hlsl
  {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 normal : NORMAL;
      float3 worldPos : TEXCOORD0;
    };
  }
  ENABLE_ASSERT(ps)
  USE_AND_INIT_VIEW_VEC_VS()
  USE_INDOOR_LIGHT_PROBES(ps, false)

  hlsl(vs)
  {
    #include "spheres_vertices.hlsl"
    VsOutput debug_light_probe_spheres_vs(uint vertexId : SV_VertexID)
    {
      const int QUAD_INDICES = 6;

      VsOutput output;
      const float sphereSize = 0.5f;
      float3 pos = get_sphere_vertex_pos(vertexId);

      const float3 viewVec = normalize(view_vecLT + view_vecRT + view_vecLB + view_vecRB);
      const float3 offset = world_view_pos + 1.0 * viewVec;
      output.normal = pos;
      output.worldPos = pos * sphereSize + offset;
      output.pos = mul(float4(output.worldPos, 1), globtm);
      return output;
    }
  }
  compile("target_vs", "debug_light_probe_spheres_vs");

  hlsl(ps)
  {
    float3 debug_light_probe_spheres_ps(VsOutput input):SV_Target0
    {
      float3 normal = normalize(input.normal);
      float4 indoorRefl__localWeight = use_indoor_probes(input.worldPos.xyz, normal, reflect(normalize(input.worldPos.xyz - world_view_pos.xyz), normal), 0 /* roughMip */, 0 /* viewDist */);
      return indoorRefl__localWeight.rgb;
    }
  }
  compile("target_ps", "debug_light_probe_spheres_ps");
}
