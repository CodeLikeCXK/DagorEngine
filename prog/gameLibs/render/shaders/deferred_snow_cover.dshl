include "envi_cover_inc.dshl"

interval envi_cover : envi_cover_off < 1, envi_cover_on;

macro USE_DEFERRED_SNOW_COVER(code)
  USE_ENVI_COVER_COMMON(code)
  hlsl(code) {
    float apply_snow_cover(float3 worldPos, float3 normal, float skylight_progress_value, inout half3 diffuse_color, inout half3 specular_color,
      inout half3 translucency_color, inout half translucency, inout half linear_roughness, inout half ggx_alpha)
    {
      float2 depthNormalFactor;
      if (getDepthNormalFactor(worldPos, fillEnviSnowParams(), normal, depthNormalFactor))
      {
        float snowInfluence = depthNormalFactor.x * depthNormalFactor.y;
        snowInfluence = sqrt(snowInfluence);
        snowInfluence *= saturate(worldPos.y * envi_cover_water_level_fade_factor + envi_cover_water_level_fade_factor * (-envi_water_level));

        translucency_color = diffuse_color;
        diffuse_color = lerp(diffuse_color, envi_cover_albedo, snowInfluence);
        specular_color = lerp(specular_color, envi_cover_specular_color, snowInfluence);
        float smoothness = 1 - linear_roughness;
        smoothness = lerp(smoothness, envi_cover_smoothness, snowInfluence);
        translucency = envi_cover_translucency;
#if !IS_SNOW_COVER_COMPATIBILITY
        computeSnowSparkle(worldPos.xyz, world_view_pos.xyz, min(0.99, 1 - skylight_progress_value), normal, smoothness);
#endif
        linear_roughness = linearSmoothnessToLinearRoughness(smoothness);
        ggx_alpha = max(1e-4, linear_roughness*linear_roughness);

        return snowInfluence;
      }
      return 0;
    }
  }
endmacro