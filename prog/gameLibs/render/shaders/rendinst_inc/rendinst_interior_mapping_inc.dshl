include "shader_global.dshl"
include "rendinst_opaque_inc.dshl"
include "static_shadow.dshl"
include "rtr_use.dshl"

macro INIT_RENDINST_INTERIOR_MAPPING()
  texture tex = material.texture.diffuse;
  texture envi_reflection = material.texture[2];

  static float room_depth = 1;
  static float4 room_size = (1, 1, 0, 0);
  static float4 tile = (1, 1, 0, 0);
  static float4 tile_space = (1, 1, 0, 0);
  static float4 tile_space_color = (0, 0, 0, 0);
  static float4 smoothness_metalness_reflection = (0.9, 0.9, 0.4, 0);
  static float4 fadeout = (5, 50, 5, 50);
  static float4 fade_color = (0.3, 0.3, 0.3, 0);
  static float4 convexity_slope = (0.0, 0.0, 0.0, 0.0);
  static float4 contortion_tiling = (1, 1, 1, 1);

  static float room_selfillum = 0;
  static int illum_random = 0;
  static float4 illum_fadeout = (-1, 0, 0, 0);

  interval room_selfillum: room_selfillum_off < 0.01, room_selfillum_on;
  interval illum_random: illum_random_off < 1, illum_random_on;

  if (room_selfillum == room_selfillum_on)
  {
    static int illum_only_at_night = 0;
    interval illum_only_at_night : no<1, yes;
  }
endmacro

define_macro_if_not_defined INIT_NUCLEAR_DESTRUCTION(camera_offset)
endmacro

define_macro_if_not_defined USE_NUCLEAR_DESTRUCTION(camera_offset)
endmacro

macro USE_RENDINST_INTERIOR_MAPPING(offset)
  RENDINST_BLOCK()

  INIT_NUCLEAR_DESTRUCTION(offset)

  CHECKING_RTR(ps)

  channel float3 pos = pos;
  channel color8 norm = norm unsigned_pack;
  channel float2 tc[0] = tc[0];

  (ps) { diffuse_tex@staticCube = tex; }
  if (envi_reflection != NULL)
  {
    (ps) { envi_reflection@staticCube = envi_reflection; }
  }
  else
  {
    if (in_editor_assume == yes && local_light_probe_tex != NULL)
    {
      (ps) { envi_reflection@smpCube = local_light_probe_tex; }
    }
    else
    {
      (ps) { envi_reflection@smpCube = envi_probe_specular; }
    }
  }

  if (room_selfillum == room_selfillum_on)
  {
    hlsl{
      #define FADE_SCALE 0.25f
    }
  }
  else
  {
    hlsl{
      #define FADE_SCALE 1.0f
    }
  }

  (ps) {
    room_ratio_depth@f2 = (room_size.x/room_size.y, 1/room_depth, 0, 0);
    room_selfillum_params@f3 = (room_selfillum, illum_random, 1.0/max(illum_random, 1.0), 0);
    illum_fadeout@f2 = (illum_fadeout.x, 1.0 / max(0.001, illum_fadeout.y - illum_fadeout.x), 0, 0);
    smoothness_metalness_reflection@f3 = (smoothness_metalness_reflection);
    tile@f3 = (tile);
    tile_space@f4 = (tile_space);
    tile_space_color@f4 = (tile_space_color);
    fadeout@f4 = (fadeout.x, 1.0 / max(0.001, fadeout.y - fadeout.x), fadeout.z, 1.0 / max(0.001, fadeout.w - fadeout.z));
    fade_color@f3 = (fade_color);
    sun_color@f3 = (sun_color_0.r / max(max(sun_color_0.r, sun_color_0.g), max(sun_color_0.b, 1.0)),
                    sun_color_0.g / max(max(sun_color_0.r, sun_color_0.g), max(sun_color_0.b, 1.0)),
                    sun_color_0.b / max(max(sun_color_0.r, sun_color_0.g), max(sun_color_0.b, 1.0)), 0);
    from_sun_dir@f3 = from_sun_direction;
    convexity_slope@f4 = (convexity_slope.r,
                          convexity_slope.g,
                          sin(convexity_slope.b * (PI / 180.0)) / cos(convexity_slope.b * (PI / 180.0)),
                          sin(convexity_slope.a * (PI / 180.0)) / cos(convexity_slope.a * (PI / 180.0)));
    // coeficients for convert localPos.xy (from -1 to 1) into glass cell integer coord (from (1, 1) to (contortion_tiling.xy - 1))
    contortion_coef@f4 = ((contortion_tiling.x - 1) / (2.001 - 2 * contortion_tiling.z),
                          (contortion_tiling.y - 1) / (2.001 - 2 * contortion_tiling.w),
                          1 - (2 * contortion_tiling.z - 1) * (contortion_tiling.x - 1) / (2.001 - 2 * contortion_tiling.z),
                          1 - (2 * contortion_tiling.w - 1) * (contortion_tiling.y - 1) / (2.001 - 2 * contortion_tiling.w));
    contortion_tiling@f4 = (contortion_tiling.x,
                            contortion_tiling.y,
                            2 * contortion_tiling.z - 1,
                            2 * contortion_tiling.w - 1);
    // used to convert (0,1) inside the poly to [-1, 1] inside each separate glass
    contortion_convexity_coef@f4 = (contortion_tiling.z, contortion_tiling.w,
                          (contortion_tiling.x - 1.0) / (1.001 - contortion_tiling.z),
                          (contortion_tiling.y - 1.0) / (1.001 - contortion_tiling.w));
    thermal_vision@f1 = (special_vision, 0, 0, 0);
  }


  hlsl{
    #ifndef VS_OUT_QUALIFIER
      #define VS_OUT_QUALIFIER
    #endif

    struct VsOutput
    {
      VS_OUT_QUALIFIER VS_OUT_POSITION(pos)

      float3 normal : TEXCOORD0;
      float3 pointToEye : TEXCOORD1;
      float3 cubePos : TEXCOORD2;

      float3 localNormal : TEXCOORD3;
      float3 worldPos : TEXCOORD4;

      nointerpolation float4 worldLocalX_hash :  TEXCOORD5;
      nointerpolation float3 worldLocalY : TEXCOORD6;
      nointerpolation float3 worldLocalZ : TEXCOORD7;
    #if NUKEDESTR_ACTIVE
      NUKEDESTR_VS_OUTPUT
    #endif
    #if defined(VSOUT_DRAW_ID)
      VSOUT_DRAW_ID
    #endif
    };
  }

  RENDINST_INSTANCING()
  if (rendinst_render_pass != rendinst_render_pass_to_shadow)
  {
    WRITE_GBUFFER()
  }

  hlsl(vs) {
    INSTANCING_BUFFERS

    struct VsInput
    {
      float3 pos : POSITION;
#if RENDINST_FULL_VDECL
      float4 normal : NORMAL;
      float2 texCoord : TEXCOORD0;
#endif
    };

    VsOutput simple_vs(VsInput input  HW_USE_INSTANCE_ID
      #if NUKEDESTR_ACTIVE
        NUKEDESTR_VERTEXID
      #endif
      )
    {
      VsOutput output;

      #if SET_UP_MULTIDRAW
        INIT_MULTIDRAW(output);
        DRAW_CALL_ID = GET_MATERIAL_OFFSET;
      #endif

      float3 localNormal = float3(0, 1, 0);
#if RENDINST_FULL_VDECL
      localNormal = normalize(BGR_SWIZZLE(input.normal.xyz)*2.f-1.f);
#endif
      float3 localPos = input.pos;
      VB_PERFORM_INSTANCING

      output.pos = mulPointTm(worldPos + offset, globtm);
    #if NUKEDESTR_ACTIVE
      NUKEDESTR_CALC_VS_OUTPUT
    #endif
      output.normal = worldNormal;

      output.worldLocalX_hash = float4(worldLocalX, 0);
      output.worldLocalY = worldLocalY;
      output.worldLocalZ = worldLocalZ;

      output.localNormal = localNormal;
      output.worldPos = worldPos;

#if RENDINST_FULL_VDECL
      output.cubePos = float3(-input.texCoord, 1);
      output.worldLocalX_hash.w = length(worldLocalPos);
#else
      output.cubePos = 0;
#endif
      output.pointToEye = world_view_pos - worldPos;

      return output;
    }
  }
  compile("target_vs", "simple_vs");

  if (rendinst_render_pass == rendinst_render_pass_to_shadow)
  {
    hlsl(ps) {
      float4 rendinst_render_depth_black_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target
      {
        #if SET_UP_MULTIDRAW
          DRAW_CALL_ID = GET_MATERIAL_OFFSET(input);
        #endif

        float4 screenpos = GET_SCREEN_POS(input.pos);
        #if NUKEDESTR_ACTIVE
          float2 checkerTC = 0;
          NUKEDESTR_CHECKER(checkerTC);
        #endif
        return screenpos.z * 2.0 - 1;
      }
    }
    compile("target_ps", "rendinst_render_depth_black_ps");
  }
  else
  {
    hlsl(ps) {

      #include <noise/uint_noise1D.hlsl>

      void apply_reflection(float3 normalGlobal, float3 pointToEye, float fresnelterm, inout half3 diffuseColor)
      {
        // With RTR, reflections will be calculated in the raytracer
        if (isRTREnabled())
          return;

        float4 reflectedNormal = float4(reflect(-pointToEye, normalGlobal), 0);

        // fade static cubemap for correct brightness of fake reflection
        ##if envi_reflection != NULL
          half3 environment = texCUBELodBindless(get_envi_reflection(), reflectedNormal).xyz;
          environment *= sun_color;
        ##else
          half3 environment = texCUBElod(envi_reflection, reflectedNormal).xyz;
          environment *= FADE_SCALE;
        ##endif

        float viewDist = length(pointToEye);

        float enviDistFade = saturate((viewDist - get_fadeout().z) * get_fadeout().w);
        environment = lerp(environment, get_fade_color(), enviDistFade);

        diffuseColor = lerp(diffuseColor, environment, fresnelterm);
      }

      GBUFFER_OUTPUT simple_ps(VsOutput input HW_USE_SCREEN_POS
      #if NUKEDESTR_ACTIVE
        INPUT_VFACE
      #endif
      )
      {
        #if SET_UP_MULTIDRAW
          DRAW_CALL_ID = GET_MATERIAL_OFFSET(input);
        #endif

        UnpackedGbuffer gbuffer;
        init_gbuffer(gbuffer);
        init_smoothness(gbuffer, get_smoothness_metalness_reflection().x);
        init_metalness(gbuffer, get_smoothness_metalness_reflection().y);
        #if NUKEDESTR_ACTIVE
          input.normal.xyz = MUL_VFACE(input.normal.xyz);
          input.localNormal = MUL_VFACE(input.localNormal.xyz);
        #endif

        float3 obj_view_pos = input.worldPos - world_view_pos.xyz;
        float3 viewVec = normalize( float3(
          dot(normalize(input.worldLocalX_hash.xyz), obj_view_pos),
          dot(normalize(input.worldLocalY), obj_view_pos),
          dot(normalize(input.worldLocalZ), obj_view_pos)
        ));
        float3 simpleCubeUp = half3(0, 1, 0);
        float3 simpleCubeRight = normalize(cross(simpleCubeUp, input.localNormal));
        viewVec = float3(
          dot(viewVec, simpleCubeRight),
          dot(viewVec, simpleCubeUp),
          dot(viewVec, input.localNormal)
        );

        half3 localPos = input.cubePos + 1e-4 * viewVec;
        int randomRotate = get_tile().z;
        localPos.xy = localPos.xy * get_tile().xy + get_tile_space().zw;
        int2 roomCoords = floor(-localPos.xy) * randomRotate;
        float hash = input.worldLocalX_hash.w;
        uint randVal = uint_noise2D(roomCoords.x + hash * randomRotate, roomCoords.y, 42);
        int faceIdx = randVal * randomRotate % 4;
        localPos.xy = (frac(localPos.xy) * 2 - 1) * get_tile_space().xy;
        // space between windows

        #if NUKEDESTR_ACTIVE
          float2 checkerTC = (input.cubePos.xy);
          NUKEDESTR_CHECKER(checkerTC);
        #endif

        BRANCH
        if (any(localPos.xy < -1) || any(localPos.xy > 1))
        {
          init_material(gbuffer, SHADING_NORMAL);
          init_normal(gbuffer, input.normal);
          half3 diffuseColor = get_tile_space_color().rgb;

          BRANCH
          if (get_tile_space_color().a > 0)
          {
            float R0 = pow2(get_tile_space_color().a / (get_tile_space_color().a + 2));
            float fresnelterm = R0 + (1 - R0) * pow5(1 - dot(normalize(input.pointToEye), input.normal));
            apply_reflection(input.normal, input.pointToEye, fresnelterm, diffuseColor);
          }
          init_albedo(gbuffer, diffuseColor);
          #if NUKEDESTR_ACTIVE
            NUKEDESTR_CHARRING(gbuffer, checkerTC)
          #endif

        }
        else
        {
          // Usually get_tile().xy >= 1 and we render one or several windows in one poly.
          // But sometimes it is usefull get_tile().x < 1 for render part of texture
          // In this cases we should restore right insidePos to find right contortion get_tile() (window part with unique contortion).
          float2 insidePos = (get_tile().xy < 1) ? ((localPos.xy + 1) / get_tile().xy - 1) : localPos.xy;
          insidePos.x *= -1; // invert horizontal direction, should be left to right
          // convexCoord should be in [-1,1] range inside each window for convexity correct behaviour
          float2 convexCoord = insidePos * 0.5 + 0.5;
          convexCoord = (convexCoord < get_contortion_convexity_coef().xy) ?
              convexCoord / get_contortion_convexity_coef().xy :
              (convexCoord - get_contortion_convexity_coef().xy) * get_contortion_convexity_coef().zw;
          convexCoord = (frac(convexCoord) * 2 - 1) * get_tile_space().xy;
          // Add random for get_convexity_slope() by window parts, defined by get_contortion_tiling()
          int2 partCoord = insidePos.xy > get_contortion_tiling().zw ?
            int2(get_contortion_coef().xy * insidePos.xy + get_contortion_coef().zw) : 0;
          randVal = uint_noise2D(roomCoords.x + hash * randomRotate, roomCoords.y + partCoord.y + partCoord.x*17, 42);

          viewVec.xy *= get_tile().xy * get_tile_space().xy;
          viewVec.yz *= get_room_ratio_depth().xy;

          half nearestT = 1e6;
          half3 t = (-localPos * sign(viewVec) + 1) / abs(viewVec);
          if (t.x > 0)
            nearestT = min(nearestT, t.x);
          if (t.y > 0)
            nearestT = min(nearestT, t.y);
          if (t.z > 0)
            nearestT = min(nearestT, t.z);
          half3 texCoord = localPos + viewVec * nearestT;
          texCoord.xz *= float2(1 - faceIdx / 2 * 2, (faceIdx % 3 == 0) * 2 - 1);
          texCoord.xz = float2(
            texCoord.x * (1 - faceIdx % 2) + texCoord.z * (faceIdx % 2),
            texCoord.x * (faceIdx % 2) + texCoord.z * (1 - faceIdx % 2)
          );
          float4 tc = float4(texCoord, 0);
          half3 diffuseColor = texCUBELodBindless(get_diffuse_tex(), tc).xyz;

          float viewDist = length(input.pointToEye);
          float distFade = saturate((viewDist - get_fadeout().x) * get_fadeout().y);
          diffuseColor = lerp(diffuseColor, get_fade_color()*FADE_SCALE, saturate(0.5f*thermal_vision + distFade));

          float2 rightUpCoef = float2((uint2(randVal, randVal) >> uint2(0, 6)) & uint2(63, 63)) * (1.0 / 31.5) - 1.0;
          float convexIntensity = lerp(get_convexity_slope().x, get_convexity_slope().y, float((randVal >> 12) & 255) / 255.0);
          float2 randCenter = float2((uint2(randVal, randVal) >> uint2(20, 26)) & uint2(63, 63)) * (1.0 / 63.0) - 0.5;
          float2 pointToConvexCenter = convexCoord - randCenter;
          float2 rightUpMultiplier = rightUpCoef*get_convexity_slope().zw + sign(pointToConvexCenter)*pow2_vec2(pointToConvexCenter)*convexIntensity;
          float3 normalGlobal = normalize(input.normal + simpleCubeRight*rightUpMultiplier.x + simpleCubeUp*rightUpMultiplier.y);

          float R0 = pow2(get_smoothness_metalness_reflection().z / (get_smoothness_metalness_reflection().z + 2));
          float fresnelterm = R0 + (1 - R0) * pow5(1 - dot(normalize(input.pointToEye), normalGlobal));
          apply_reflection(normalGlobal, input.pointToEye, fresnelterm,   diffuseColor);

          ##if room_selfillum == room_selfillum_on
            ##if (illum_only_at_night == yes)
              BRANCH
              if (from_sun_dir.y < -0.1 && sun_color.r > 0.1)
              {
                init_material(gbuffer, SHADING_NORMAL);
              }
              else
            ##endif
            {
              if (thermal_vision<=0)
                init_material(gbuffer, SHADING_SELFILLUM);
              int illum = 1;
              ##if illum_random == illum_random_on
                illum = int(abs(2*roomCoords.x) + abs(3*roomCoords.y) + abs(int(9*hash)))%int(get_room_selfillum_params().y);
              ##endif
              float illumDistFade = get_illum_fadeout().x < 0.0f ? 0.0f : saturate((viewDist - get_illum_fadeout().x) * get_illum_fadeout().y);
              init_emission(gbuffer, (1 - illumDistFade) * get_room_selfillum_params().z * illum * get_room_selfillum_params().x * pow3(1 - fresnelterm));
              init_emission_color(gbuffer, 1);
            }
          ##else
            init_material(gbuffer, SHADING_NORMAL);
          ##endif
          init_normal(gbuffer, normalGlobal);
          init_albedo(gbuffer, diffuseColor);

          if (isRTREnabled())
            init_glass(gbuffer);

          handle_if_two_sided(gbuffer);

          #if NUKEDESTR_ACTIVE
            NUKEDESTR_CHARRING(gbuffer, checkerTC)
          #endif
        }
        return encode_gbuffer(gbuffer, input.pointToEye, GET_SCREEN_POS(input.pos));
      }
    }
    compile("target_ps", "simple_ps");
  }

  USE_NUCLEAR_DESTRUCTION(offset)
endmacro