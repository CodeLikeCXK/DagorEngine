include "shader_global.dshl"

int text_color_mode;
interval text_color_mode: modeRGB < 1, modeA < 2, modeRGBA < 3, modeTooDark < 4, modeTooBright;
int tex_a_test_value;
int tex_sRGB_mode;
interval tex_sRGB_mode: linear < 1, sRGB;

texture tex;
float4 viewportRect;

int transparent = 0;
int hasTexture = 0;

int fontFxType = 0;
float fontFxScale = 0;
float4 fontFxOfs;
float4 fontFxColor;

texture fontTex2;
float4 fontTex2ofs;
shader tex_view
{
  // setup constants
  cull_mode = none;
  z_write = false;
  z_test = false;
  (ps) { atest_value_ref@f1 = (tex_a_test_value/255.0); }
  hlsl(ps) {
    #define clip_alpha_atest(a) {if (a < get_atest_value_ref()) discard;}
  }

  blend_src = sa; blend_dst = isa;

  (vs) { viewport@f4 = viewportRect; }
  (ps) { texsmp@smp2d = tex; }

  // init channels
  channel short2 pos = pos mul_16k;
  channel color8 vcol = vcol;
  channel short2 tc = tc mul_4k;
  channel short2 tc[1] = tc[1];

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float4 col: COLOR0;
      float2 tc:  TEXCOORD0;
    };
  }

  hlsl(vs) {
    struct VsInput
    {
      int2 pos: POSITION;
      float4 col: COLOR0;
      int2 tc0: TEXCOORD0;
    };

    VsOutput gui_main_vs(VsInput v)
    {
      VsOutput o;

      o.pos = float4(v.pos*viewport.xy+viewport.zw, 1, 1);
      o.col = BGRA_SWIZZLE(v.col);
      o.tc = v.tc0/4096.0;

      return o;
    }
  }
  compile("target_vs", "gui_main_vs");

  hlsl(ps) {
    float4 tex_main_ps(VsOutput v): SV_Target
    {
      ##if text_color_mode == modeRGBA
        float4 res = tex2D(texsmp, v.tc) * v.col;
        if (0 < get_atest_value_ref())
        {
          clip_alpha_atest(res.a);
          res.a = 1.0f;
        }
        return res;
      ##elif text_color_mode == modeA
        return float4((tex2D(texsmp, v.tc)).aaa, 1);
      ##elif text_color_mode == modeRGB
        return float4((tex2D(texsmp, v.tc)).rgb * v.col, 1);
      ##elif text_color_mode == modeTooDark || text_color_mode == modeTooBright
        float4 col = tex2D(texsmp, v.tc);
        float lum = col.r*0.212655 + col.g*0.715158 + col.b*0.072187;
        ##if text_color_mode == modeTooDark
          return float4(saturate(lum/0.04)*v.col.rgb, 1);
        ##elif text_color_mode == modeTooBright
          return float4((saturate((lum-0.85)/0.15)*0.5+ (lum>=0.85 ? 0.5 : 0.0))*v.col.rgb, 1);
        ##endif
        return col;
      ##endif
    }
    #include <pixelPacking/ColorSpaceUtility.hlsl>
    float4 tex_main_degamma_ps(VsOutput v): SV_Target
    {
      float4 value = tex_main_ps(v);
      ##if text_color_mode == modeA || text_color_mode == modeTooDark || text_color_mode == modeTooBright
      return value;
      ##else
      return float4(ApplySRGBCurve(value.rgb), value.a);
      ##endif
    }
  }
  if (tex_sRGB_mode == linear)
  {
    compile("target_ps", "tex_main_ps");
  }
  else
  {
    compile("target_ps", "tex_main_degamma_ps");
  }
}
