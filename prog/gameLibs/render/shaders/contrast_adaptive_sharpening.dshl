include "shader_global.dshl"

// this is an implementation of AMD's CAS with some minor tweaks
float contrast_adaptive_sharpening = -0.125;

macro INIT_CONTRAST_ADAPTIVE_SHARPENING(code)
  (code) {
    contrast_adaptive_sharpening@f1 = contrast_adaptive_sharpening;
  }
endmacro

macro USE_CONTRAST_ADAPTIVE_SHARPENING(code)
  hlsl(code) {
    #include <pixelPacking/yCoCgSpace.hlsl>

    half4 tonemap(half4 color)
    {
      return half4(color.rgb * rcp(abs(color.r) + 1), color.a);
    }

    half4 tonemap_inv(half4 color)
    {
      return half4(color.rgb * rcp(max(1e-5, 1 - abs(color.r))), color.a);
    }

    half4 tex2DCAS(Texture2D tex, float2 uv, float2 res, float2 invRes, float sharpening)
    {
      int2 pixelCoord = int2(floor(uv * res));
      half4 a = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(-1, -1))));
      half4 b = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(0, -1))));
      half4 c = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(1, -1))));
      half4 d = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(-1, 0))));
      half4 e = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(0, 0))));
      half4 f = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(1, 0))));
      half4 g = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(-1, 1))));
      half4 h = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(0, 1))));
      half4 i = tonemap(PackToYCoCgAlpha(texelFetchOffset(tex, pixelCoord, 0, int2(1, 1))));

      // Soft min and max.
      //  a b c             b
      //  d e f * 0.5  +  d e f * 0.5
      //  g h i             h
      // These are 2.0x bigger (factored out the extra multiply).
      half mn = min3(min3(d.x, e.x, f.x), b.x, h.x);
      half mn2 = min3(min3(mn, a.x, c.x), g.x, i.x);
      mn+=mn2;
      half mx = max3(max3(d.x, e.x, f.x), b.x, h.x);
      half mx2 = max3(max3(mx, a.x, c.x), g.x, i.x);
      mx+=mx2;

      // Smooth minimum distance to signal limit divided by smooth max.
      half amp = saturate(min(mn, 2.0 - mx) * rcp(mx));

      // Shaping amount of sharpening.
      amp = sqrt(amp);
      // Filter shape.
      //  0 w 0
      //  w 1 w
      //  0 w 0
      half w = amp * sharpening;

      half sharpenedY = (b.r*w + d.r*w + f.r*w + h.r*w + e.r) * rcp(1.0 + 4.0 * w);
      half3 midPointCoCgAlpha = e.gba;
      half4 linearYCoCgAlpha = tonemap_inv(half4(sharpenedY, midPointCoCgAlpha));

      return UnpackFromYCoCgAlpha(linearYCoCgAlpha);
    }
  }
endmacro