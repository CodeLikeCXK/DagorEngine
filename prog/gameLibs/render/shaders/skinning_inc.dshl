
buffer context_gpu_data;

macro INIT_WORLD_LOCAL_BASE(code)
(code) {
  context_gpu_data@cbuf = context_gpu_data hlsl {
    cbuffer context_gpu_data@cbuf
    {
      float4 proj_to_world_tm_0;
      float4 proj_to_world_tm_1;
      float4 proj_to_world_tm_2;
      float4 proj_to_world_tm_3;

      float4 proj_to_view_tm_0;
      float4 proj_to_view_tm_1;
      float4 proj_to_view_tm_2;
      float4 proj_to_view_tm_3;
    }
  }
}
endmacro

macro USE_WORLD_LOCAL_BASE(code)
(code) { immediate_dword_count = 2; }
hlsl(code) {
  #define SETUP_RENDER_VARS(rigid_index)                                                                                   \
    uint offsetToNodeChunk = max((int)OFFSET_TO_NODE_DATA(rigid_index), 0);                                                \
    float4 globtm_0 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 0);                                             \
    float4 globtm_1 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 1);                                             \
    float4 globtm_2 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 2);                                             \
    float4 globtm_3 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 3);                                             \
    float4 prev_globtm_0 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 4);                                        \
    float4 prev_globtm_1 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 5);                                        \
    float4 prev_globtm_2 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 6);                                        \
    float4 prev_globtm_3 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 7);                                        \
    float4 opacity__unused__extra = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 8);                               \
    float2 opacity__unused = opacity__unused__extra.xy; /*.y is unused after addition of OFFSET_TO_INSTANCE_DATA */        \
    float2 node_extra_data = opacity__unused__extra.zw;                                                                    \
    float node_opacity = opacity__unused.x;                                                                                \
    float4 node_tm_0, node_tm_1, node_tm_2;                                                                                \
    if ( (get_immediate_dword_0() & 0xFF) > 9)                                                                             \
    {                                                                                                                      \
      node_tm_0 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 9);                                                 \
      node_tm_1 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 10);                                                \
      node_tm_2 = loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + 11);                                                \
    }                                                                                                                      \
    else                                                                                                                   \
    {                                                                                                                      \
      node_tm_0 = float4(1, 0, 0, 0);                                                                                      \
      node_tm_1 = float4(0, 1, 0, 0);                                                                                      \
      node_tm_2 = float4(0, 0, 1, 0);                                                                                      \
    }                                                                                                                      \
    uint offsetToInstanceChunk = max(OFFSET_TO_INSTANCE_DATA, 0);                                                          \
    float4 unpack_pos_mul = loadBuffer(INSTANCE_DATA_BUFFER, offsetToInstanceChunk + 0);                                   \
    float4 pos_ofs__cnt = loadBuffer(INSTANCE_DATA_BUFFER, offsetToInstanceChunk + 1);                                     \
    float3 unpack_pos_ofs = pos_ofs__cnt.xyz;                                                                              \
    float2 dynrend_params_offset_count = float2(offsetToInstanceChunk + 2.5, pos_ofs__cnt.w);

  #define BONES_START 9

  struct bone_t { float4 r0, r1, r2; };

  float4 get_bone_row(int offset)
  {
    uint offsetToNodeChunk = OFFSET_TO_NODE_DATA(0);
    return loadBuffer(INSTANCE_DATA_BUFFER, offsetToNodeChunk + BONES_START + offset);
  }

  bone_t get_bone(int bone_index)
  {
    bone_t bone;
    bone.r0 = get_bone_row(bone_index * 6 + 0);
    bone.r1 = get_bone_row(bone_index * 6 + 1);
    bone.r2 = get_bone_row(bone_index * 6 + 2);
    return bone;
  }

  bone_t get_prev_bone(int bone_index)
  {
    bone_t bone;
    bone.r0 = get_bone_row(bone_index * 6 + 3);
    bone.r1 = get_bone_row(bone_index * 6 + 4);
    bone.r2 = get_bone_row(bone_index * 6 + 5);
    return bone;
  }

  #define GET_DYNREND_PARAM(param_no) ((int)param_no < (int)dynrend_params_offset_count.y ? \
    loadBuffer(INSTANCE_DATA_BUFFER, max(dynrend_params_offset_count.x + param_no, 0)) : float4(0, 0, 0, 0))
}
endmacro

macro INIT_WORLD_LOCAL_VS()
  INIT_WORLD_LOCAL_BASE(vs)
endmacro

macro USE_WORLD_LOCAL_VS()
  USE_WORLD_LOCAL_BASE(vs)
endmacro

macro WORLD_LOCAL_VS()
  INIT_WORLD_LOCAL_VS()
  USE_WORLD_LOCAL_VS()
endmacro