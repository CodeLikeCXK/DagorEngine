include "shader_global.dshl"
include "gbuffer.dshl"
include "wires_helper.dshl"
include "static_shadow.dshl"
include "vr_multiview.dshl"

buffer cables_buf;
buffer bvh_cables_vertices_buf;
buffer bvh_cables_indices_buf;
float pixel_scale;

int bvh_cables_vertices_buf_reg_no = 6;
int bvh_cables_indices_buf_reg_no = 7;

float4 global_wires_albedo_color = (0, 0, 0, 0);

int cables_render_pass = 1;
interval cables_render_pass : cables_render_pass_shadow < 1, cables_render_pass_opaque < 2, cables_render_pass_trans < 3, cables_render_pass_bvh;

shader wires
{
  supports global_frame;
  supports global_const_block;
  cull_mode = none;

  if (cables_render_pass == cables_render_pass_bvh && !hardware.dx12 && !hardware.vulkan && !hardware.metal && !hardware.ps5)
  {
    dont_render;
  }

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      ##if cables_render_pass != cables_render_pass_bvh
        float4 normal_blend : NORMAL;
        ##if cables_render_pass == cables_render_pass_trans
          float3 fogAdd : TEXCOORD0;
        ##else
          float3 pointToEye : TEXCOORD0;
        ##endif
      ##endif
    };
  }

  (vs) {
    globtm@f44 = globtm;
    pixel_scale@f1 = (pixel_scale, 0, 0, 0);
  }

  (vs) {
    cables_buf@buf = cables_buf hlsl {
      #include "render/cables.hlsli"
      StructuredBuffer<CableData> cables_buf@buf;
    }
  }

  (ps) {wires_albedo_color@f3 = global_wires_albedo_color}

  if (cables_render_pass == cables_render_pass_bvh)
  {
    (vs) {
      bvh_cables_vertices_buf@uav : register(bvh_cables_vertices_buf_reg_no) hlsl {
        struct CableVertex
        {
          float3 position;
          uint color;
        };
        RWStructuredBuffer<CableVertex> bvh_cables_vertices_buf@uav;
      }
      bvh_cables_indices_buf@uav : register(bvh_cables_indices_buf_reg_no) hlsl {
        RWStructuredBuffer<uint> bvh_cables_indices_buf@uav;
      }
    }
  }

  if (cables_render_pass == cables_render_pass_trans)
  {
    CABLES_FOG_VS()
  }

  VR_MULTIVIEW_RENDERING(cables_render_pass == cables_render_pass_opaque, true)
  ENABLE_ASSERT(ps)

  hlsl(vs) {
    VsOutput cables_vs(uint vertex_id : SV_VertexID USE_VIEW_ID)
    {
      uint instance_id = vertex_id / (TRIANGLES_PER_CABLE + 4);
      vertex_id = vertex_id % (TRIANGLES_PER_CABLE + 4);

      VsOutput output;
      output.pos = float4(-2, -2, 0, 1);

      ##if cables_render_pass == cables_render_pass_bvh
        if (vertex_id == TRIANGLES_PER_CABLE + 3 || vertex_id == 0)
          return output;
      ##endif

      if (vertex_id == TRIANGLES_PER_CABLE + 3)
        vertex_id--;
      if (vertex_id != 0)
        vertex_id--;

      float point_count = TRIANGLES_PER_CABLE * 0.5;
      float4 point1_rad = structuredBufferAt(cables_buf, instance_id).point1_rad;
      float4 point2_sag = structuredBufferAt(cables_buf, instance_id).point2_sag;
      float3 start = point1_rad.xyz;
      float3 end = point2_sag.xyz;
      float3 dir = end - start;
      float sag = point2_sag.w;
      int point_num = vertex_id >> 1;
      dir.y += sag * 4 * (point_num / point_count - 1);
      float3 pos = start + dir * point_num / point_count;
      float3 right = normalize(float3(dir.x, dir.y + sag * 4 * point_num / point_count, dir.z));

      // TODO: if (point1_rad.w <= 0) { /* some actions with ragged cables */ }
      float radius = abs(point1_rad.w); // ragged cable bit is a sign bit of cable radius
      float blend = 1;
      ##if cables_render_pass != cables_render_pass_shadow && cables_render_pass != cables_render_pass_bvh
        float w = dot(float4(pos, 1), float4(globtm[0].w, globtm[1].w, globtm[2].w, globtm[3].w));
        float pixel_rad = w * pixel_scale; //can be negative if point behind camera
        radius = max(radius, pixel_rad); //increase radius to at least one pixel size
        blend = abs(point1_rad.w / pixel_rad);
        float visibleDistance = 100; //meters
        ##if cables_render_pass == cables_render_pass_opaque
          if (w > visibleDistance)
            radius = 0; //to not render far cables in opaque pass
        ##else //cables_render_pass == cables_render_pass_trans
          blend = 2 - w / visibleDistance; //blend when farther than visibleDistance;
        ##endif
        output.normal_blend.w = blend;
      ##endif

      ##if cables_render_pass == cables_render_pass_bvh
        const uint vertexPerCable = TRIANGLES_PER_CABLE + 2;
        const uint indexPerCable = TRIANGLES_PER_CABLE * 3;

        float3 up = float3(0, 1, 0);

        if (vertex_id & 1)
          up = -up;
        pos += up * radius;

        CableVertex vertex;
        vertex.position = pos;
        vertex.color = 0;
        structuredBufferAt(bvh_cables_vertices_buf, vertexPerCable * instance_id + vertex_id) = vertex;

        if (vertex_id < TRIANGLES_PER_CABLE)
        {
          uint baseVertex = instance_id * vertexPerCable + vertex_id;

          uint3 indices = uint3(baseVertex + 0, baseVertex + 1, baseVertex + 2) % vertexPerCable;
          if (vertex_id & 1)
            indices = indices.yzx;

          uint baseIndex = instance_id * indexPerCable + vertex_id * 3;

          structuredBufferAt(bvh_cables_indices_buf, baseIndex + 0) = indices.x;
          structuredBufferAt(bvh_cables_indices_buf, baseIndex + 1) = indices.y;
          structuredBufferAt(bvh_cables_indices_buf, baseIndex + 2) = indices.z;
        }
      ##else
        float3 view;
        ##if cables_render_pass == cables_render_pass_shadow
          view = from_sun_direction;
        ##else
          view = normalize(pos - world_view_pos);
        ##endif
        float3 up = normalize(cross(right, view));
        float3 normal = normalize(cross(right, up));

        if (vertex_id & 1)
          up = -up;
        pos += up * radius;
        normal += up * saturate(blend - 1); //to imitate rounded normal at close distance

        float3 pointToEye = world_view_pos - pos;

        output.pos = mulPointTm(pos, globtm);
        output.normal_blend.xyz = normal;

        ##if cables_render_pass == cables_render_pass_trans
          half3 fogMul, fogAdd;
          get_cables_fog(pointToEye, output.pos, fogMul, fogAdd);
          output.fogAdd = fogAdd;
        ##else
          output.pointToEye = pointToEye;
        ##endif

        VR_MULTIVIEW_REPROJECT(output.pos);

      ##endif
      return output;
    }
  }

  if (cables_render_pass == cables_render_pass_opaque || cables_render_pass == cables_render_pass_shadow)
  {
    INIT_STATIC_SHADOW_PS()
    WRITE_GBUFFER()
    hlsl(ps) {
      GBUFFER_OUTPUT cables_ps(VsOutput input HW_USE_SCREEN_POS)
      {
        UnpackedGbuffer result;
        init_gbuffer(result);
        init_albedo(result, wires_albedo_color);
        init_normal(result, normalize(input.normal_blend.xyz));
        //init_dynamic(result, 1);
        init_smoothness(result, 0.25);
        init_metalness(result, 0);
        return encode_gbuffer(result, input.pointToEye, GET_SCREEN_POS(input.pos));
      }
    }
  }
  else if (cables_render_pass == cables_render_pass_bvh)
  {
    color_write = 0;
    z_test = false;
    z_write = false;
  }
  else //if (cables_render_pass == cables_render_pass_trans)
  {
    INIT_HDR(ps)
    USE_HDR(ps)
    z_write = false;
    blend_src = sa; blend_dst = isa;
    blend_asrc = 0; blend_adst = 1;
    hlsl(ps) {
      float4 cables_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
      {
        ##if in_editor_assume == no
          if (input.normal_blend.w > 1)
            discard; //to avoid render transparent cable on opaque one
        ##endif
        return float4(pack_hdr(input.fogAdd).rgb, saturate(input.normal_blend.w)); //return blended black color with fog and scattered light applied
      }
    }
  }

  compile("target_vs", "cables_vs");
  if (cables_render_pass == cables_render_pass_bvh)
  {
    compile("ps_null", "null_ps");
  }
  else
  {
    compile("target_ps", "cables_ps");
  }
}
