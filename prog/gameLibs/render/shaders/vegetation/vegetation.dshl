include "snoise.dshl"
include "global_consts.dshl"
include "tree_ellipsoid_normal.dshl"

int impostor_normal_mip = 0;
int treeCrown_buf_slot = 17;

macro INIT_WEIGHT_FOR_AO()
  static float ao_weight = 1.0;
  (ps) { ao_weight@f1 = (ao_weight) };
endmacro

macro USE_WEIGHT_FOR_AO()
  hlsl (ps) {
    #define CHANGE_AO_WEIGHT 1
    void init_gbuffer_ao(inout UnpackedGbuffer gbuffer, float ao)
    {
      init_ao(gbuffer, lerp(1.0, ao, saturate(get_ao_weight())));
    }
  }
endmacro

// To be used both for declaration and for stubbing for drawcall sequences when the buf is set once
macro RESERVE_TREE_CROWN_SLOT()
  (ps) {
    treeCrown@tex : register(treeCrown_buf_slot) hlsl {
      Buffer<float4> treeCrown@tex;
    }
  }
endmacro

macro FILL_CURRENT_GBUFFER(is_impostorbaker)
  (ps) {
    diffuse_tex@static = tex;
    normal_tex@static = normal;
    impostor_normal_mip@i1 = impostor_normal_mip;
  }
  if (is_impostorbaker) {
    RESERVE_TREE_CROWN_SLOT()
  }
  if (in_editor_assume == no)
  {
    (ps) {immediate_dword_count = 3;}
  }
  hlsl(ps) {
    #include <rendInst/rotation_palette_consts.hlsli>

    half2 UnpackFloat16(uint a)
    {
        float2 tmp = f16tof32(uint2(a & 0xFFFF, a >> 16));
        return half2(tmp);
    }

    #ifndef CHANGE_AO_WEIGHT
      void init_gbuffer_ao(inout UnpackedGbuffer gbuffer, float ao)
      {
        init_ao(gbuffer, ao);
      }
    #endif

    UnpackedGbuffer get_current_gbuffer(VsOutput input, half3 diffuseColor)
    {
      UnpackedGbuffer gbuffer;
      init_gbuffer(gbuffer);

      /*##if shader == rendinst_tree_colored
      input.normal = normalize(cross(ddx(input.pointToEye), ddy(input.pointToEye)));
      if (dot(input.normal, input.pointToEye)<0)
        input.normal = -input.normal;
      //input.normal
      ##endif*/
##if is_impostorbaker
      //Here we use a  custom mip on ImpostorBaker stage, for hack of smoothness for branches, to avoid whitish stuff on it
      half4 packedNormalMap = tex2DLodBindless(get_normal_tex(), float4(input.diffuseTexcoord.xy, 0, impostor_normal_mip));
##else
      half4 packedNormalMap = tex2DBindless(get_normal_tex(), input.diffuseTexcoord.xy);
##endif

      half smoothness = packedNormalMap.r;//there is nothing good here!
      //smoothness = get_specular_intensity_from_color( diffuseColor.rgb );//fixme: remove!
      half3 normalMap = unpack_ag_normal(packedNormalMap);
      half3 worldNormal = perturb_normal( normalMap, normalize(input.normal.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy );

      ##if atest != atestOff
        half translucency = get_back_view_dep() > 0.001 ? packedNormalMap.b : 0;

        #if COLOR_NEEDED
          //encode threshold instead of using pow4 on translucency
          //0.01 ^ (1/4) = 0.316
          diffuseColor = translucency < (get_back_view_dep() > 0.4 ? 0.316 : 0.01) ? diffuseColor : diffuseColor * input.colorMul;
        #endif
        ##if in_editor_assume == no
          #if !MOBILE_DEVICE
          half2 crown_transmittance_falloff_stop_distance = UnpackFloat16(get_immediate_dword_2());
          float pointToEyeLen = length(input.pointToEye.xyz);
          uint impostor_data_offset = get_immediate_dword_0();
          float3 inv_crown_rad1 = impostor_data_buffer[impostor_data_offset + TRANSMITTANCE_CROWN_RAD1_DATA_OFFSET].xyz;
          BRANCH
          if (crown_transmittance_falloff_stop_distance.y >= 0. &&
            pointToEyeLen >= crown_transmittance_falloff_stop_distance.y && any(inv_crown_rad1 > 0))
          {
            half2 crown_transmittance_brightness_falloff_start = UnpackFloat16(get_immediate_dword_1());
            float4 crown_center1 = impostor_data_buffer[impostor_data_offset + TRANSMITTANCE_CROWN_CENTER1_DATA_OFFSET];
            float ao1 = length(float4((input.localPos.xyz - crown_center1.xyz) * inv_crown_rad1, crown_transmittance_brightness_falloff_start.x));
            float ao2 = 1;
            float3 inv_crown_rad2 = impostor_data_buffer[impostor_data_offset + TRANSMITTANCE_CROWN_RAD2_DATA_OFFSET].xyz;
            BRANCH
            if (any(inv_crown_rad2 > 0))
            {
              float4 crown_center2 = impostor_data_buffer[impostor_data_offset + TRANSMITTANCE_CROWN_CENTER2_DATA_OFFSET];
              ao2 = length(float4((input.localPos.xyz - crown_center2.xyz) * inv_crown_rad2, crown_transmittance_brightness_falloff_start.x));
            }
            ao1 = smoothstep(crown_transmittance_brightness_falloff_start.y, crown_transmittance_falloff_stop_distance.x, min(ao1, ao2));
            float vignette = saturate((pointToEyeLen - crown_transmittance_falloff_stop_distance.y) * 10 - 9);
            ao1 = lerp(1, ao1, vignette);
            init_gbuffer_ao(gbuffer, ao1*input.normal.a);
          }
          else
          #endif //!MOBILE_DEVICE
          init_gbuffer_ao(gbuffer, input.normal.a);
        ##else
          ##if is_impostorbaker
            half2 crown_transmittance_falloff_stop_distance = treeCrown[0].zw;
            float3 inv_crown_rad1 = treeCrown[2].xyz;
            float pointToEyeLen = length(input.pointToEye.xyz);
            BRANCH
            if (crown_transmittance_falloff_stop_distance.y >= 0. && any(inv_crown_rad1 > 0))
            {
              half2 crown_transmittance_brightness_falloff_start = treeCrown[0].xy;
              float4 crown_center1 = treeCrown[1];

              float ao1 = length(float4((input.localPos.xyz - crown_center1.xyz) * inv_crown_rad1, crown_transmittance_brightness_falloff_start.x));
              float ao2 = 1;
              float3 inv_crown_rad2 =  treeCrown[4].xyz;
              BRANCH
              if (any(inv_crown_rad2 > 0))
              {
                float4 crown_center2 = treeCrown[3];
                ao2 = length(float4((input.localPos.xyz - crown_center2.xyz) * inv_crown_rad2, crown_transmittance_brightness_falloff_start.x));
              }
              ao1 = smoothstep(crown_transmittance_brightness_falloff_start.y, crown_transmittance_falloff_stop_distance.x, min(ao1, ao2));
              float vignette = saturate(pointToEyeLen - crown_transmittance_falloff_stop_distance.y) * 10 - 9;
              ao1 = lerp(1, ao1, vignette);
              init_gbuffer_ao(gbuffer, ao1*input.normal.a);
            }
          ##else
            init_gbuffer_ao(gbuffer, input.normal.a);
          ##endif
        ##endif
        init_translucency(gbuffer, translucency);
        //init_reflectance(gbuffer, 0.5 * (1.0 - translucency));
      ##else
        init_gbuffer_ao(gbuffer, input.normal.a);
        half translucency = 0;
      ##endif
      init_material(gbuffer, translucency > 0 ? SHADING_FOLIAGE : SHADING_NORMAL);

      #ifdef MOTION_VECTORS_ENABLED
        init_motion_vector(gbuffer, encode_motion_vector(input.out_pos, input.out_pos_prev));
      #endif
      init_smoothness(gbuffer, smoothness);
      init_normal(gbuffer, worldNormal);
      init_albedo(gbuffer, diffuseColor.rgb);
      return gbuffer;
    }
  }
endmacro


// Used to make objects (i.e. leaves) disappear while the player
// camera clips through them.
macro USE_CLIP_DISSOLVE()
USE_FAST_NOISE()
hlsl(ps) {
  half clip_dissolve_func(float3 tc)
  {
    #if !MOBILE_DEVICE
      half val = clamp(dot(fast_noise2(tc.xy), 0.2f), -0.5, 0.5);
      return saturate(val + tc.z);
    #else
      return tc.z;
    #endif
  }
}
endmacro

hlsl{
  #define DISSOLVE_ANGLE 4
}

macro VEGETATION_PS(is_render_depth_pass, atest_is_on, alpha_clip_is_separate)
  supports global_const_block;
  hlsl(ps) {
  #include <interleavedGradientNoise.hlsl>
  void alpha_clip(float alpha, float3 tc, float leaves_fade_vert)
  {
    BRANCH
    if (get_angle_dissolve() > 0)
    {
      float leaves_fade = saturate(abs(DISSOLVE_ANGLE*leaves_fade_vert));
      alpha *= leaves_fade;
    }
    #if !MOBILE_DEVICE
      float lodDissolveValue = interleavedGradientNoiseFramed(tc.xy, dissolve_frame) + tc.z;
      clip(min(alpha - 0.5, lodDissolveValue));
    #else
      //no dissolve for vegatation, leave dissolve only on impostors
      //gives good enough results while keeping shader simple & fast
      clip(alpha - 0.5);
    #endif
  }

  ##if is_render_depth_pass
    ##if hardware.ps5
      [RE_Z]
    ##endif
    void simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
    {
      #if SET_UP_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      float4 screenpos = GET_SCREEN_POS(input.pos);
      ##if alpha_clip_is_separate
        alpha_clip(tex2DBindless(get_alpha_tex(), input.diffuseTexcoord.xy).x, float3(screenpos.xy, input.diffuseTexcoord.z), input.pointToEye.w);
      ##else
        alpha_clip(tex2DBindless(get_diffuse_tex(), input.diffuseTexcoord.xy).a, float3(screenpos.xy, input.diffuseTexcoord.z), input.pointToEye.w);
      ##endif
    }
  ##else
    GBUFFER_OUTPUT simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
    {
      #if SET_UP_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #endif
      float4 screenpos = GET_SCREEN_POS(input.pos);
      #ifndef IS_DYNAMIC
        #define IS_DYNAMIC 0
      #endif
      #ifndef FORCE_AUTO_MOTION_VECTOR
        #define FORCE_AUTO_MOTION_VECTOR 0
      #endif
      half4 diffuseColor = tex2DBindless(get_diffuse_tex(), input.diffuseTexcoord.xy);
      ##if atest_is_on
        ##if alpha_clip_is_separate
          alpha_clip(tex2DBindless(get_alpha_tex(), input.diffuseTexcoord.xy).x, float3(screenpos.xy, input.diffuseTexcoord.z), input.pointToEye.w);
        ##else
          alpha_clip(diffuseColor.a, float3(screenpos.xy, input.diffuseTexcoord.z), input.pointToEye.w);
        ##endif
      ##endif
      input.normal.xyz = MUL_VFACE(input.normal.xyz);
      #ifdef NEED_ELLIPSOID_NORMAL
      input.normal.xyz = normalize(lerp(input.normal.xyz, input.ellipsoidNormal.xyz, get_n_ellipsoid_mix()));
      #endif
      #if GRASS_COLORING
        apply_grass_coloring(diffuseColor.rgb, input);
      #endif
      UnpackedGbuffer gbuffer = get_current_gbuffer(input, diffuseColor.rgb);
      ##if atest_is_on
        float leaves_fade2 = saturate(abs(2 * input.pointToEye.w));
        gbuffer.reflectance *= leaves_fade2;
      ##endif
      if (input.localPos.w > 0) {
        init_dynamic(gbuffer, IS_DYNAMIC);
        init_order(gbuffer, GBUFFER_ORDER_DYNAMIC);
      }
      init_auto_motion_vector(gbuffer, FORCE_AUTO_MOTION_VECTOR);
      return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
    }
  ##endif
  }
  compile("target_ps", "simple_ps");
endmacro
