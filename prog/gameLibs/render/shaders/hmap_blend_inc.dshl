include "heightmap_common.dshl"

float ri_hmap_blend_sharpness = 8.0;
float ri_hmap_perlin_tex_scale = 0.25;
float ri_hmap_min_height = 0.5;
float ri_hmap_mip_bias = 1.0; //0 is very expensive on xbox one s

macro INIT_HMAP_BLEND_STATIC()
  static int enable_hmap_blend = 0;
  interval enable_hmap_blend: no < 1, yes;

  if (enable_hmap_blend == yes)
  {
    static float hmap_blend_height = 0.1 no_warnings;
    static float hmap_blend_depth = 0.1 no_warnings; // For cave blending underground

    static float ri_hmap_blend_sharpness_mul = 1.0 no_warnings;
    static float ri_hmap_min_blend_angle = 0 no_warnings;
    static float ri_hmap_max_blend_angle= 90 no_warnings;
    static float ri_hmap_perlin_tex_scale_mul = 1.0 no_warnings;
    static float ri_hmap_min_height_mul = 1.0 no_warnings;
    static float ri_hmap_blend_angle_vertex_normal_amount = 0.0 no_warnings;
    static float ri_hmap_blend_check_holes = 0 no_warnings;
  }

  bool has_hmap_blend = enable_hmap_blend == yes && compatibility_mode != compatibility_mode_on && tex_hmap_low != NULL;

  if (has_hmap_blend)
  {
    (vs)
    {
      ri_hmap_vs_static_params@f4 = (ri_hmap_min_blend_angle, ri_hmap_max_blend_angle, ri_hmap_min_height_mul, ri_hmap_blend_check_holes);
    }
    (ps)
    {
      ri_hmap_ps_static_params@f4 = (ri_hmap_blend_sharpness_mul, ri_hmap_perlin_tex_scale_mul, hmap_blend_height, ri_hmap_blend_angle_vertex_normal_amount);
      ri_hmap_ps_static_params2@f1 = hmap_blend_depth;
    }
  }
endmacro

macro INIT_HMAP_BLEND() //use after INIT_HMAP_FOR_RI_BLOCK
    (vs)
    {
      ri_hmap_vs_params@f1 = (1.0 / max(ri_hmap_min_height, 0.0001));
    }
    (ps)
    {
      ri_hmap_ps_params@f3 = (ri_hmap_blend_sharpness / 5.0, ri_hmap_perlin_tex_scale, pow(2.0, ri_hmap_mip_bias), 0);
    }
endmacro

macro USE_HMAP_BLEND_VS_PARAMS()
  if (heightmap_holes_support_assume == on)
  {
    USE_HMAP_HOLES(vs)
  }
  else
  {
    hlsl(vs)
    {
      bool checkHeightmapHoles(float3 worldPos)
      {
        return false;
      }
    }
  }
  if (has_hmap_blend)
  {
    hlsl
    {
      #define RI_HMAP_BLEND_ON 1
      #define RI_HMAP_BLEND_VS_TYPE float3

      float2 getAngleRange(float2 anglesMinMax)
      {
        float2 angleParam = anglesMinMax;
        angleParam = clamp(angleParam, 0.0, PI / 2.0);
        angleParam = sin(angleParam);
        float rcpSinAngleDiff = rcp(angleParam.y - angleParam.x);
        angleParam = float2(1.0, -angleParam.x) * rcpSinAngleDiff;
        return angleParam;
      }
    }
    hlsl (vs)
    {
      RI_HMAP_BLEND_VS_TYPE make_ri_hmap_blend_vs_params(float3 worldPos)
      {
        const float DEG_TO_RAD = PI / 180.0;
        float2 angleParam = get_ri_hmap_vs_static_params().xy * DEG_TO_RAD;
        angleParam = getAngleRange(angleParam);
        float min_height_mul = get_ri_hmap_vs_static_params().z;
        float rcpMinHeight = min_height_mul <= 0 || (get_ri_hmap_vs_static_params().w && checkHeightmapHoles(worldPos)) ? -1 : ri_hmap_vs_params / max(min_height_mul, 0.0001);
        return RI_HMAP_BLEND_VS_TYPE(angleParam, rcpMinHeight);
      }
    }
  }
endmacro