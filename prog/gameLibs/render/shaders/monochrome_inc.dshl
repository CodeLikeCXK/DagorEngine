macro MONOCHROME_PS()
(ps)
{
  color@f4 = color;
  metalness@f1 = (metalness);
  smoothness@f1 = (smoothness);
  reflectance@f1 = (reflectance);
}
hlsl(ps)
{
  #if VOXELIZE_ALBEDO_PASS
    void simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
  #else
    GBUFFER_OUTPUT simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
  #endif
  {
    #if SET_UP_MULTIDRAW
      SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
    #endif
  #ifdef VOXELIZE_DISCARD_PRIM
    VOXELIZE_DISCARD_PRIM
  #endif
  #ifndef IS_DYNAMIC
    #define IS_DYNAMIC 0
  #endif
  #ifndef FORCE_AUTO_MOTION_VECTOR
    #define FORCE_AUTO_MOTION_VECTOR 0
  #endif

  input.normal.xyz = MUL_VFACE(input.normal.xyz);

  half4 diffuseColor = get_color();

  ##if atest == atestOn
    clip (diffuseColor.a-0.5);
  ##endif

  #if VOXELIZE_ALBEDO_PASS
    float3 worldPos = world_view_pos - input.pointToEye.xyz;
    WRITE_SCENE25D_VOXEL_DATA(worldPos, diffuseColor.rgb, 0, 0);
  #else
    half ao = 1;
    half3 worldNormal = normalize(input.normal.xyz);

    UnpackedGbuffer gbuffer;
    init_gbuffer(gbuffer);

    init_ao(gbuffer, ao);
    init_material(gbuffer, SHADING_NORMAL);
    init_metalness(gbuffer, get_metalness());
    init_smoothness(gbuffer, get_smoothness());
    init_reflectance(gbuffer, get_reflectance());
    init_normal(gbuffer, worldNormal);
    init_albedo(gbuffer, diffuseColor.rgb);
    init_dynamic(gbuffer, IS_DYNAMIC);
    init_order(gbuffer, GBUFFER_ORDER_STATIC);
    init_auto_motion_vector(gbuffer, FORCE_AUTO_MOTION_VECTOR);

    #ifdef MOTION_VECTORS_ENABLED
      float3 motion = encode_motion_vector( input.out_pos, input.out_pos_prev );
      init_motion_vector(gbuffer, motion);
    #endif
    return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
  #endif
  }
}
compile("target_ps", "simple_ps");

endmacro