include "depth_above.dshl"
include "static_shadow.dshl"
include "heightmap_common.dshl"

macro INIT_INITIAL_GI_AMBIENT_LIGHTING_MODEL(code)
  INIT_STATIC_SHADOW_BASE(code)
  hlsl(code) {
    #define HAS_STATIC_SHADOW 1
    #define FASTEST_STATIC_SHADOW_PCF 1
    #define STATIC_SHADOW_NO_VIGNETTE 1
  }
  USE_STATIC_SHADOW_BASE(code)
  supports global_const_block;
  INIT_SKY_DIFFUSE_BASE(code)
  USE_SKY_DIFFUSE_BASE(code)
endmacro

macro INIT_INITIAL_GI_WORLD_AO(code)
  (code) {
    blurred_depth@smpArray = blurred_depth;
    depth_above@smpArray = depth_around;
  }
  hlsl(code) {
    float getWorldBlurredAOInitial(float3 worldPos, float depthHt, float vignetteEffect, float height_bias, float height_scale)
    {
      float occlusion = rcp((max(0.01, (depthHt - height_bias - worldPos.y)*(height_scale)+1)));
      float ao = saturate(occlusion)*0.98 + 0.02;
      return lerp(ao, 0.1, vignetteEffect);
    }
  }
endmacro

macro INIT_INITIAL_GI_AMBIENT_LIGHTING_MODEL_WORLD_AO(code)
  INIT_INITIAL_GI_AMBIENT_LIGHTING_MODEL(code)
  INIT_INITIAL_GI_WORLD_AO(code)
endmacro

macro SSGI_CLEAR_INITIAL_VOLMAP()
  INIT_DEPTH_ABOVE(cs, blurred_depth)
  USE_DEPTH_ABOVE(cs, blurred_depth)
  USE_HEIGHTMAP_COMMON(cs)

  hlsl(cs) {

    void ssgi_init_volmap(float3 worldPos, float3 lightVoxelSize, inout float3 col0, inout float3 col1, inout float3 col2, inout float3 col3, inout float3 col4, inout float3 col5, bool copied)
    {
      if (copied)
        return;
      float invVoxelY = rcp(lightVoxelSize.y);
      float htHeight = decode_height(getHeightLowLod(calcTcLow(worldPos.xz), 0));
      float darken = exp2(min(0, 4*invVoxelY*(worldPos.y+0.5*lightVoxelSize.y-htHeight)));
      {
        float vignette_effect;
        float htBlurred = get_depth_above_fast(worldPos, vignette_effect);
        float ao = lerp(0, 1, saturate(1+0.5*invVoxelY*(worldPos.y-htBlurred)));
        darken = min(darken, lerp(ao, 1, vignette_effect));
      }
      darken = max(0.05, darken);
      //col0 = col1 = col2 = col3 = col4 = col5 = saturate(worldPos/100);
      col0 *= darken;
      col1 *= darken;
      col2 *= darken*sqrt(darken);//Y component is more darker
      col3 *= darken*sqrt(darken);//Y component is more darker
      col4 *= darken;
      col5 *= darken;
    }
  }
endmacro
