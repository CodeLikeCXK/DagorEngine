float4 sparkles_enable__size__density = (0, 1, 1, 0);
int sparkles_enable;
interval sparkles_enable: off < 1, on;

macro INIT_SPARKLES_BASE(code)
  if (sparkles_enable==on)
  {
    (code) { sparkles_enable__size__density@f3 = (sparkles_enable__size__density.x, sparkles_enable__size__density.y, sparkles_enable__size__density.z, 0); }
  }
endmacro

macro INIT_SPARKLES()
  INIT_SPARKLES_BASE(ps)
endmacro

macro USE_SPARKLES_BASE(code)
hlsl(code) {
#include "noise/Value2D.hlsl"
#include "noise/Value3D.hlsl"

  ##if sparkles_enable==on
    #define USE_SPARKLES_3D_NOISE 0
    #include "sparkles.hlsl"

    void computeSnowSparkle(float3 world_pos, float3 world_view_pos, float max_alpha, inout float3 world_normal, inout float smoothness)
    {
      float dummy1;
      float3 dummy2;
      computeSnowSparkle_impl(world_pos, world_view_pos, max_alpha, sparkles_enable__size__density.y, sparkles_enable__size__density.z, float3(0,0,0), 0, world_normal, dummy2, smoothness, dummy1);
    }
  ##else
  void computeSnowSparkle(float3 world_pos, float3 world_view_pos, float max_alpha, inout float3 world_normal, inout float smoothness){}
  ##endif
}
endmacro

macro USE_SPARKLES()
  USE_SPARKLES_BASE(ps)
endmacro