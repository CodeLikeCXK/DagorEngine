include "shader_global.dshl"
include "gbuffer.dshl"
include "assert.dshl"

texture downsampled_motion_vectors_tex;

float4x4 uvz_to_prev_frame_uvz;
float4x4 uvz_to_prev_frame_hero_bbox;
float4x4 uvz_to_prev_frame_hero_uvz;
float4 jitter_offset_uv;
float4 zn_zfar_current_prev;

int can_ignore_bbox = 0;

int motion_vector_type = 0;
interval motion_vector_type: static_uvz<1, dynamic_uv_static_z<2,  dynamic_uvz;

interval motion_vector_texture_size_to_use: not_set < 1, full<2, downsampled;
assume motion_vector_texture_size_to_use = not_set;

/*
 * This module is responsible for handing out motion vectors.
 * These motion vectors are always 3D regardless of the actual motion vector texture.
 * No motion vector case is taken care of automatically, and so is the hero matrix.
 * Usage:
 * INIT_FETCH_MOTION_VECTOR(cs, full)
 * USE_FETCH_MOTION_VECTOR(cs, full)  // full or downsampled
 * hlsl(cs){
 *   ...
 *   float3 motion_vector = fetch_motion_vector_jittered(uv, depth);
 *   ...
 * }
 *
 * Depth is absolutely necessary if the shader is expected to work in with reprojection as well.
 * If it's not expected to work in such a case 0 can be passed as depth.
 */

macro INIT_FETCH_MOTION_VECTOR(stage, source)
  G_ASSERT(motion_vector_texture_size_to_use == not_set || motion_vector_texture_size_to_use == source,
  "You are trying to motion vector access with different texture size than you initialized it with.")

  assume motion_vector_texture_size_to_use = source;

  if (motion_vector_type == dynamic_uv_static_z || motion_vector_type == dynamic_uvz)
  {
    if (motion_vector_texture_size_to_use == full)
    {
      INIT_READ_MOTION_BUFFER_BASE(stage)
    }
    else
    {
      (stage) {
        downsampled_motion_vectors_tex@smp2d = downsampled_motion_vectors_tex;
      }
    }
  }

  if (motion_vector_type == static_uvz || motion_vector_type == dynamic_uv_static_z)
  {
    (stage) {
      uvz_to_prev_frame_uvz@f44 = {uvz_to_prev_frame_uvz};
      uvz_to_prev_frame_hero_bbox@f44 = {uvz_to_prev_frame_hero_bbox};
      uvz_to_prev_frame_hero_uvz@f44 = {uvz_to_prev_frame_hero_uvz};
      depth_linearization_slope@f2 = (1.0/zn_zfar_current_prev.yw);
      depth_linearization_offset@f2 = (zn_zfar_current_prev.yw-zn_zfar_current_prev.xz)/(zn_zfar_current_prev.xz * zn_zfar_current_prev.yw);
      can_ignore_bbox@i1 = can_ignore_bbox;
    }
  }

  (stage) {
    currentFrameJitter@f2 = jitter_offset_uv.xy;
    prevFrameJitter@f2 = jitter_offset_uv.zw;
    currentToPrevFrameJitter@f2 = jitter_offset_uv.zw - jitter_offset_uv.xy;
  }
endmacro

// source is either full or downsampled
macro USE_FETCH_MOTION_VECTOR(stage, source)
  G_ASSERT(motion_vector_texture_size_to_use == not_set || motion_vector_texture_size_to_use == source,
  "You are trying to motion vector access with different texture size than you initialized it with.")

  assume motion_vector_texture_size_to_use = source;

  if ((motion_vector_type == dynamic_uv_static_z || motion_vector_type == dynamic_uvz) && motion_vector_texture_size_to_use == full)
  {
    USE_READ_MOTION_BUFFER_BASE(stage)
  }

  hlsl(stage) {

    ##if motion_vector_type == static_uvz || motion_vector_type == dynamic_uv_static_z
      bool is_in_hero_bbox(float2 uv, float depth)
      {
        float4 posRelToBBox = mul(uvz_to_prev_frame_hero_bbox, float4(uv, depth, 1));
        return all(abs(posRelToBBox / posRelToBBox.w) < 1);
      }

      bool is_subject_to_hero_reprojection(float2 uv, float depth)
      {
        #ifdef GBUFFER_HAS_HERO_COCKPIT_BIT
          bool result = isGbufferHeroCockpit(uv);
          if (!can_ignore_bbox)
            result = result | is_in_hero_bbox(uv, depth);
          return result;
        #else
          return is_in_hero_bbox(uv, depth);
        #endif
      }

      float3 calculate_reprojected_motion_vector(float2 uv, float depth)
      {
        float4x4 reprojection = is_subject_to_hero_reprojection(uv, depth) ? uvz_to_prev_frame_hero_uvz : uvz_to_prev_frame_uvz;
        float4 prevUVDepth = mul(reprojection, float4(uv, depth, 1));
        prevUVDepth /= prevUVDepth.w;
        float2 depths = float2(depth, prevUVDepth.z);
        float2 linearZ = rcp(depth_linearization_slope * depths + depth_linearization_offset);
        return float3(prevUVDepth.xy - uv, linearZ.y - linearZ.x);
      }
    ##endif

    float3 fetch_motion_vector_unjittered(float2 uv, float depth)
    {
      ##if motion_vector_type == static_uvz
        return calculate_reprojected_motion_vector(uv, depth);
      ##elif motion_vector_type == dynamic_uv_static_z
        ##if motion_vector_texture_size_to_use == full
          float3 mv = readMotionBuffer(uv).xyz;
        ##else
          float3 mv = tex2Dlod(downsampled_motion_vectors_tex, float4(uv, 0, 0)).xyz;
        ##endif
        return float3(mv.xy, calculate_reprojected_motion_vector(uv, depth).z);
      ##else
        ##if motion_vector_texture_size_to_use == full
          return readMotionBuffer(uv).xyz;
        ##else
          return tex2Dlod(downsampled_motion_vectors_tex, float4(uv, 0, 0)).xyz;
        ##endif
      ##endif
    }

    float3 fetch_motion_vector_jittered(float2 uv, float depth)
    {
      return fetch_motion_vector_unjittered(uv, depth) + float3(currentToPrevFrameJitter, 0);
    }

    float3 fetch_motion_vector_unjittered_to_jittered(float2 uv, float depth)
    {
      return fetch_motion_vector_unjittered(uv, depth) + float3(currentFrameJitter, 0);
    }

    float3 fetch_motion_vector_jittered_to_unjittered(float2 uv, float depth)
    {
      return fetch_motion_vector_unjittered(uv, depth) - float3(currentFrameJitter, 0);
    }

  }

endmacro