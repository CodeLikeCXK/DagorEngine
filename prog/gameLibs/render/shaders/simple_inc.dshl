macro USE_SIMPLE_PS(is_writing_gbuffer)
  if (is_writing_gbuffer)
  {
    WRITE_GBUFFER()
  }
  (ps) {
    diffuse_tex@static = tex;
    normal_tex@static = normal;
  }
  USE_CHARACTER_MICRODETAIL()

hlsl(ps)
{
  #ifndef SAMPLE_TEX
    #define SAMPLE_TEX(tex, tc) tex2DBindless(tex, tc)
  #endif
  #if VOXELIZE_ALBEDO_PASS
    void simple_ps(VsOutput input INPUT_VFACE)
  #else
    #if JITTER_DEPTH_PIXEL_OFFSET
      #include "interleavedGradientNoise.hlsl"
      GBUFFER_OUTPUT simple_ps(VsOutput input, out float depth : SV_DepthLessEqual)
    #else
      GBUFFER_OUTPUT simple_ps(VsOutput input INPUT_VFACE HW_USE_SCREEN_POS)
    #endif
  #endif
  {
    #if SET_UP_MULTIDRAW
      #if RENDINST_SHADER_MULTIDRAW
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET(input));
      #else
        INIT_MULTIDRAW(input);
        SET_DRAW_CALL_ID(GET_DRAW_ID(input) & MATERIAL_OFFSET_MASK);
      #endif
    #endif
  #ifdef VOXELIZE_DISCARD_PRIM
    VOXELIZE_DISCARD_PRIM
  #endif
  #ifndef IS_DYNAMIC
    #define IS_DYNAMIC 0
  #endif
  #ifndef FORCE_AUTO_MOTION_VECTOR
    #define FORCE_AUTO_MOTION_VECTOR 0
  #endif

  #if JITTER_DEPTH_PIXEL_OFFSET
    float depthJitter = interleavedGradientNoiseFramed( input.pos.xy, shadow_frame );
    depth = input.zw.x/(input.zw.y + depthJitter*0.05*min(1,input.zw.y));
  #endif

  input.normal.xyz = MUL_VFACE(input.normal.xyz);

  float2 texCoord = input.diffuseTexcoord.xy;

  #ifdef HAS_PARALLAX
    texCoord = applyParallax(input.diffuseTexcoord.xy, input.normal.xyz, input.pointToEye.xyz);
  #endif
  float3 worldPos = world_view_pos.xyz-input.pointToEye.xyz;
  half4 diffuseColor = SAMPLE_TEX(get_diffuse_tex(), texCoord);

  ##if atest == atestOn
    clip (diffuseColor.a-0.5);
  ##endif
  #if SUPPORT_DETAIL_TEX
    calculate_detail(diffuseColor.rgb, texCoord);
  #endif

  #if VOXELIZE_ALBEDO_PASS
    WRITE_SCENE25D_VOXEL_DATA(worldPos, diffuseColor.rgb, 0, 0);
  #else
    ##if normal != NULL
      half4 packedNormalMap = SAMPLE_TEX(get_normal_tex(), texCoord);
      half smoothness = packedNormalMap.r;
      half3 normalMap = unpack_ag_normal(packedNormalMap);
      half metalness = packedNormalMap.b;
    ##else
      half3 normalMap = half3(0,0,1);
      half metalness = 0;
      half smoothness = 0;
    ##endif

    half reflectance = 0.5;
    half ao = 1;
    BRANCH
    if (character_micro_detail_layer>=0)
    {
      apply_character_micro_detail(sample_character_micro_detail(input.diffuseTexcoord.xy*get_character_micro_detail_scale().xy, character_micro_detail_layer),
      diffuseColor.rgb, normalMap, reflectance, smoothness);
    }

    ##if mobile_render != off
      half3 worldNormal = normalize(input.normal.xyz);
    ##else
      half3 worldNormal = perturb_normal_precise( normalMap, normalize(input.normal.xyz), input.pointToEye.xyz, input.diffuseTexcoord.xy );
    ##endif

    ##if mobile_render == off
      #if NORMAL_RENDER_PASS
        apply_wetness_by_microdetail(character_micro_detail_layer, worldPos, diffuseColor.rgb, worldNormal, reflectance, smoothness, ao);
      #endif
    ##endif

    #if USE_SPECULAR_IN_ALPHA
      reflectance = diffuseColor.a;
    #endif

    UnpackedGbuffer gbuffer;
    init_gbuffer(gbuffer);

    init_metalness(gbuffer, metalness);
    init_ao(gbuffer, ao);
    ##if (shader == rendinst_simple_emissive_anim)
      init_material(gbuffer, SHADING_SELFILLUM);
      float emissionStrength = 0;
      get_emissive_anim(input.diffuseTexcoord.xy, time_scroll_param, diffuseColor, emissionStrength);
      #define ANIM_MAX_EMISSION 4.f
      init_emission(gbuffer, emissionStrength * ANIM_MAX_EMISSION);
      init_emission_color(gbuffer, 1); // this results in using albedo as emission color

      ##if (normal != NULL && atest == atestOn)
        half atestParam = packedNormalMap.b;
        clip_alpha(atestParam);
      ##endif
    ##else
      init_material(gbuffer, SHADING_NORMAL);
    ##endif

    init_smoothness(gbuffer, smoothness);
    init_reflectance(gbuffer, reflectance);
    init_normal(gbuffer, worldNormal);
    init_albedo(gbuffer, diffuseColor.rgb);
    init_dynamic(gbuffer, IS_DYNAMIC);
    init_order(gbuffer, GBUFFER_ORDER_STATIC);
    init_auto_motion_vector(gbuffer, FORCE_AUTO_MOTION_VECTOR);

    #ifdef MOTION_VECTORS_ENABLED
      float3 motion = encode_motion_vector( input.out_pos, input.out_pos_prev );
      init_motion_vector(gbuffer, motion);
    #endif
    #ifdef PLOD_PS_GEN
      PLOD_PS_GEN(input, pack_gbuffer(gbuffer), normalMap)
    #endif
    return encode_gbuffer(gbuffer, input.pointToEye.xyz, GET_SCREEN_POS(input.pos));
  #endif
  }
}
compile("target_ps", "simple_ps");
endmacro