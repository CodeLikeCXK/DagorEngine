include "shader_global.dshl"
include "gbuffer.dshl"
include "rendinst_inc.dshl"
include "rendinst_impostor_inc.dshl"

float4 texture_size = float4(1, 1, 0, 0);
int impostor_sdf_max_distance = 8;
int impostor_color_padding = 1;
float4 impostor_texture_transform = float4(1, 1, 0, 0);
int dynamic_impostor_texture_const_no = 13 always_referenced;

texture impostor_packed_albedo_alpha;
texture impostor_packed_normal_translucency;
texture impostor_packed_ao_smoothness;

int slice_id = 0;

texture impostor_sdf_tex;
int impostor_sdf_tex_const_no = 3 always_referenced;

texture impostor_branch_mask_tex;

macro USE_IMPOSTOR_STRUCTS()
  hlsl(ps) {
    #include <pack_impostor_texture.hlsl>

    struct PackedTexture
    {
      float4 albedo_alpha: SV_Target0;
      float4 normal_translucency: SV_Target1;
      float2 ao_smoothness: SV_Target2;
    };
    #define IMPOSTOR_MATERIAL_BRANCH 0
    #define IMPOSTOR_MATERIAL_FOLIAGE 1

    struct ImpostorParameters
    {
      float3 albedo;
      float alpha;
      float3 normal;
      float material;
      float translucency;
      float ao;
      float smoothness;
    };

    ImpostorParameters init_impostor_parameters()
    {
      ImpostorParameters params;
      params.albedo = 0;
      params.alpha = 0;
      params.normal = 0;
      params.material = 0;
      params.translucency = 0;
      params.ao = 0;
      params.smoothness = 0;
      return params;
    }
  }
endmacro

macro USE_READ_IMPOSTOR_GBUF_TEXTURES()
  ENABLE_ASSERT(ps)
  USE_IMPOSTOR_STRUCTS()
  INIT_LOAD_DEPTH_GBUFFER()
  USE_LOAD_DEPTH_GBUFFER()

  hlsl(ps) {
    Texture2D impostor_gbuf_a : register(t13);
    Texture2D impostor_gbuf_b : register(t14);
    Texture2D impostor_gbuf_c : register(t15);
    SamplerState impostor_gbuf_a_samplerstate : register(s13);
    SamplerState impostor_gbuf_b_samplerstate : register(s14);
    SamplerState impostor_gbuf_c_samplerstate : register(s15);

    ImpostorParameters read_impostor_params_from_gbuf(uint2 tc)
    {
      ImpostorParameters ret;

      float4 diffuse = texelFetch(impostor_gbuf_a, tc, 0);
      float4 normal_translucency = texelFetch(impostor_gbuf_b, tc, 0);
      float4 ao_shadowing = texelFetch(impostor_gbuf_c, tc, 0);
      float translucency = normal_translucency.w;

      float depth = loadGbufferDepth(tc);

      if (depth >= 0.5)
      {
        depth = 2 - depth*2;

        ret.albedo = diffuse.rgb;
        ret.alpha = diffuse.a;
        ret.normal = normalize(normal_translucency.xyz*2 - 1);
        if (translucency >= 0.5)
        {
          ret.material = IMPOSTOR_MATERIAL_FOLIAGE;
          ret.translucency = saturate(translucency*2 - 1);
        }
        else
        {
          ret.material = IMPOSTOR_MATERIAL_BRANCH;
          ret.translucency = saturate(translucency / 0.49);
        }
        ret.ao = ao_shadowing.x;
        ret.smoothness = 1-ao_shadowing.y;
      }
      else
      {
        ret.albedo = float3(0, 0, 0);
        ret.alpha = 0;
        ret.normal = float3(0, 0, 1);
        ret.material = IMPOSTOR_MATERIAL_BRANCH;
        ret.translucency = 0;
        ret.ao = 0;
        ret.smoothness = 0;
      }

      return ret;
    }
  }
endmacro

macro USE_READ_IMPOSTOR_PACKED_TEXTURES()
  ENABLE_ASSERT(ps)
  USE_IMPOSTOR_STRUCTS()

  (ps)
  {
    impostor_packed_albedo_alpha@smp2d = impostor_packed_albedo_alpha;
    impostor_packed_normal_translucency@smp2d = impostor_packed_normal_translucency;
    impostor_packed_ao_smoothness@smp2d = impostor_packed_ao_smoothness;
  }

  hlsl(ps) {
    ImpostorParameters read_impostor_params_from_packed_texture(uint2 tc)
    {
      float4 albedo_alpha = texelFetch(impostor_packed_albedo_alpha, tc, 0);
      float4 normal_translucency = texelFetch(impostor_packed_normal_translucency, tc, 0);
      float2 ao_smoothness = texelFetch(impostor_packed_ao_smoothness, tc, 0).xy;

      ImpostorParameters ret;

      ret.albedo = albedo_alpha.rgb;
      ret.alpha = albedo_alpha.a;
      ret.normal = normalize(normal_translucency.xyz*2 - 1);
      if (normal_translucency.w >= 0.5)
      {
        ret.material = IMPOSTOR_MATERIAL_FOLIAGE;
        ret.translucency = saturate(normal_translucency.w*2 - 1);
      }
      else
      {
        ret.material = IMPOSTOR_MATERIAL_BRANCH;
        ret.translucency = saturate(normal_translucency.w / 0.49);
      }
      ret.ao = ao_smoothness.x;
      ret.smoothness = 1 - ao_smoothness.y;

      return ret;
    }
  }
endmacro

macro USE_PACKED_TEXTURES()
  hlsl(ps) {
    struct ImpostorCombinedState
    {
      ImpostorParameters params;
    };

    ImpostorCombinedState init_combined_samples()
    {
      ImpostorCombinedState ret;
      ret.params = init_impostor_parameters();
      return ret;
    }

    void combine_impostor_samples(inout ImpostorCombinedState state, in ImpostorParameters params)
    {
      state.params = params;
    }

    ImpostorParameters combine_samples(in ImpostorCombinedState state)
    {
      return state.params;
    }

    PackedTexture pack_impostor_params(in ImpostorParameters params)
    {
      PackedTexture ret;

      ret.albedo_alpha.rgb = params.albedo;
      ret.albedo_alpha.a = params.alpha;

      ret.normal_translucency.xyz = normalize(params.normal)*0.5 + 0.5;
      ret.normal_translucency.w = params.material == IMPOSTOR_MATERIAL_FOLIAGE
        ? params.translucency*0.5+0.5
        : params.translucency*0.49f;

      ret.ao_smoothness.x = params.ao;
      ret.ao_smoothness.y = 1 - params.smoothness;

      return ret;
    }
  }
endmacro

macro USE_IMPOSTOR_SDF_CODEC()
  hlsl(ps)
  {
    #define DISTANCE_PRECISION (16)
    #define OFFSET_PRECISION ((32 - DISTANCE_PRECISION) / 2)
    #define DISTANCE_MASK ((1<<DISTANCE_PRECISION) - 1)
    #define OFFSET_MASK ((1<<OFFSET_PRECISION) - 1)

    uint encode_sdf(int2 pixel_offset, int best_dist_sq, int max_dist)
    {
      uint uintDistance = DISTANCE_MASK;
      if (best_dist_sq <= max_dist*max_dist)
      {
        float floatDistance = saturate(sqrt(float(best_dist_sq)) / float(max_dist));
        uintDistance = uint(floatDistance * (DISTANCE_MASK - 1)) & DISTANCE_MASK;
      }
      uint2 uintOffset = uint2(clamp(pixel_offset, -max_dist, max_dist) + max_dist) & OFFSET_MASK;

      uint sdf = (uintDistance << (2 * OFFSET_PRECISION)) | (uintOffset.x << OFFSET_PRECISION) | (uintOffset.y);
      return sdf;
    }

    float3 decode_sdf(uint sdf, int max_dist)
    {
      uint2 uintOffset;
      uintOffset.x = (sdf >> OFFSET_PRECISION) & OFFSET_MASK;
      uintOffset.y = sdf & OFFSET_MASK;
      float2 pixelOffset = int2(uintOffset) - max_dist;

      uint uintDistance = (sdf >> (2 * OFFSET_PRECISION)) & DISTANCE_MASK;
      float distance = saturate(float(uintDistance) / float(DISTANCE_MASK - 1)) * max_dist;
      return float3(pixelOffset, distance);
    }
  }
endmacro

shader impostor_postprocessor
{
  supports global_frame;

  cull_mode=none;
  z_write=false;
  z_test=false;

  (ps)
  {
    texture_size@f4 = (texture_size.x, texture_size.y, 1/texture_size.x, 1/texture_size.y);
    impostor_sdf_max_distance@i1 = (impostor_sdf_max_distance);
    impostor_sdf_tex@tex = impostor_sdf_tex hlsl { Texture2D<uint>impostor_sdf_tex@tex; }
  }

  USE_READ_IMPOSTOR_PACKED_TEXTURES()
  USE_PACKED_TEXTURES()
  USE_IMPOSTOR_SDF_CODEC()

  POSTFX_VS_TEXCOORD(0, tc)
  hlsl(ps) {
    //signed distance is positive when outside the impostor, and negative when inside
    float encode_distance_to_alpha(float signed_dist, float max_dist)
    {
      return saturate(-signed_dist / max_dist * 0.5 + 0.5);
    }
    PackedTexture pack_ps(VsOutput input)
    {
      PackedTexture ret;

      float2 texPos = input.tc;

      int2 center = int2(texPos*texture_size.xy);
      ImpostorParameters params = read_impostor_params_from_packed_texture(center);

      int maxDist = min(max(texture_size.x, texture_size.y)*RENDER_OVERSCALE/2, impostor_sdf_max_distance);
      bool isCenterInside = params.alpha >= 0.5;
      uint sdf = impostor_sdf_tex[center];
      float3 pixelOffsetDist = decode_sdf(sdf, maxDist);
      params.alpha = encode_distance_to_alpha(isCenterInside ? -pixelOffsetDist.z : pixelOffsetDist.z, maxDist);

      return pack_impostor_params(params);
    }
  }
  compile("target_ps", "pack_ps");
}

// This shader is used on each miplevel separately
// Adds a fixed amount of color padding on each mip level
shader impostor_color_padding
{
  supports global_frame;

  cull_mode=none;
  z_write=false;
  z_test=false;

  (ps)
  {
    texture_size@f4 = (texture_size.x, texture_size.y, 1/texture_size.x, 1/texture_size.y);
    impostor_color_padding@i1 = (impostor_color_padding);
  }

  USE_READ_IMPOSTOR_PACKED_TEXTURES()
  USE_PACKED_TEXTURES()

  POSTFX_VS_TEXCOORD(0, tc)
  hlsl(ps) {
    PackedTexture pack_ps(VsOutput input)
    {
      PackedTexture ret;

      float2 texPos = input.tc;

      int2 center = int2(texPos*texture_size.xy);
      ImpostorParameters originalParams = read_impostor_params_from_packed_texture(center);

      BRANCH
      if (originalParams.alpha >= 0.5)
      {
        return pack_impostor_params(originalParams);
      }
      else
      {
        int maxDist = min(max(texture_size.x, texture_size.y), impostor_color_padding);
        int bestDistSq = maxDist*maxDist+1;
        int2 bestTc = center;
        for (int y = -maxDist; y <= maxDist; ++y)
        {
          for (int x = -maxDist; x <= maxDist; ++x)
          {
            int distSq = x*x + y*y;
            int2 tc = center + int2(x, y);
            BRANCH
            if (distSq < bestDistSq && tc.x >= 0 && tc.y >= 0 && tc.x < texture_size.x && tc.y < texture_size.y)
            {
              if (texelFetch(impostor_packed_albedo_alpha, tc, 0).w >= 0.5)
              {
                bestTc = tc;
                bestDistSq = distSq;
              }
            }
          }
        }
        ImpostorParameters params = read_impostor_params_from_packed_texture(bestTc);
        params.alpha = originalParams.alpha;
        return pack_impostor_params(params);
      }
    }
  }
  compile("target_ps", "pack_ps");
}

shader pack_impostor_texture
{
  supports global_frame;

  cull_mode=none;
  z_write=false;
  z_test=false;

  POSTFX_VS_TEXCOORD(0, tc)

  USE_READ_IMPOSTOR_GBUF_TEXTURES()
  USE_PACKED_TEXTURES()
  USE_IMPOSTOR_SDF_CODEC()

  (ps)
  {
    texture_size@f4 = (texture_size.x, texture_size.y, 1/texture_size.x, 1/texture_size.y);
    impostor_texture_transform@f4 = (impostor_texture_transform.x*texture_size.x, impostor_texture_transform.y*texture_size.y, impostor_texture_transform.z*texture_size.x, impostor_texture_transform.w*texture_size.y);
    slice_id@i1 = (slice_id);
    impostor_sdf_max_distance@f1 = (impostor_sdf_max_distance);
    impostor_branch_mask_tex@tex2d = impostor_branch_mask_tex;
  }

  hlsl(ps) {
    RWTexture2D<uint> impostor_sdf_tex : register(u3);

    ImpostorParameters fetch_gbuf(int2 samplePos)
    {
      float2 normalizedTC = float2(samplePos) * texture_size.zw / RENDER_OVERSCALE;
      ImpostorParameters params = read_impostor_params_from_gbuf(samplePos);
      return params;
    }

    PackedTexture pack_ps(VsOutput input)
    {
      float2 tcTransformed = impostor_texture_transform.xy * input.tc + impostor_texture_transform.zw;
      int2 texCoord = int2(tcTransformed);
      int2 center = texCoord*RENDER_OVERSCALE + (RENDER_OVERSCALE+1)/2;

      ImpostorParameters params = fetch_gbuf(center);

      float branchValue = texelFetch(impostor_branch_mask_tex, texCoord, 0).x;
      params.translucency *= branchValue;

      bool isCenterInside = params.alpha >= 0.5;
      int maxDist = min(max(texture_size.x, texture_size.y)*RENDER_OVERSCALE/2, impostor_sdf_max_distance);
      int bestDistSq = maxDist*maxDist + 1;
      int2 bestTc = center;
      for (int y = -maxDist; y <= maxDist; ++y)
      {
        for (int x = -maxDist; x <= maxDist; ++x)
        {
          int distSq = x*x + y*y;
          int2 tc = center + int2(x, y);
          BRANCH
          if (distSq < bestDistSq && tc.x >= 0 && tc.y >= 0 && tc.x < texture_size.x*RENDER_OVERSCALE && tc.y < texture_size.y*RENDER_OVERSCALE)
          {
            if ((fetch_gbuf(tc).alpha >= 0.5) != isCenterInside)
            {
              bestTc = tc;
              bestDistSq = distSq;
            }
          }
        }
      }

      uint sdf = encode_sdf(bestTc - center, bestDistSq, maxDist);
      int2 targetCoord = input.tc * texture_size.xy;
      if (texture2DAt(impostor_sdf_tex, targetCoord) > sdf)
        texture2DAt(impostor_sdf_tex, targetCoord) = sdf;

      if (params.alpha <= 0.00001)
        discard;

      return pack_impostor_params(params);
    }
  }
  compile("target_ps", "pack_ps");
}

shader impostor_gen_mip
{
  supports global_frame;

  cull_mode=none;
  z_write=false;
  z_test=false;

  POSTFX_VS_TEXCOORD(0, tc)

  USE_READ_IMPOSTOR_PACKED_TEXTURES()
  USE_PACKED_TEXTURES()

  (ps)
  {
    texture_size@f4 = (texture_size.x, texture_size.y, 1/texture_size.x, 1/texture_size.y);
  }

  hlsl(ps) {

    PackedTexture pack_ps(VsOutput input)
    {
      int2 texCoord = int2(input.tc * texture_size.xy);

      ImpostorCombinedState state = init_combined_samples();

      const uint MIP_LEVEL_SCALE = 2;

      for (uint i = 0; i < MIP_LEVEL_SCALE; ++i)
      {
        for (uint j = 0; j < MIP_LEVEL_SCALE; ++j)
        {
          int2 samplePos = texCoord*MIP_LEVEL_SCALE + int2(i, j);

          ImpostorParameters params = read_impostor_params_from_packed_texture(samplePos);
          combine_impostor_samples(state, params);
        }
      }

      ImpostorParameters params = combine_samples(state);
      if (params.alpha < 0.01)
      {
        int maxDist = 4;
        float bestDistSq = maxDist*maxDist+1;
        int2 centerTc = texCoord*MIP_LEVEL_SCALE + MIP_LEVEL_SCALE/2;
        int2 bestTc = centerTc;
        for (int y = -maxDist; y <= maxDist; ++y)
        {
          for (int x = -maxDist; x <= maxDist; ++x)
          {
            float distSq = x*x + y*y;
            int2 tc = centerTc + int2(x, y);
            BRANCH
            if (distSq < bestDistSq && tc.x >= 0 && tc.y >= 0 && tc.x < texture_size.x*MIP_LEVEL_SCALE && tc.y < texture_size.y*MIP_LEVEL_SCALE)
            {
              if (texelFetch(impostor_packed_albedo_alpha, tc, 0).w > 0.01)
              {
                bestTc = tc;
                bestDistSq = distSq;
              }
            }
          }
        }
        params = read_impostor_params_from_packed_texture(bestTc);
        params.alpha = 0;
      }
      return pack_impostor_params(params);
    }
  }
  compile("target_ps", "pack_ps");
}

shader impostor_mask_shader
{
  supports global_frame;

  cull_mode=none;
  z_write=false;
  z_test=false;

  INIT_READ_DEPTH_GBUFFER()
  USE_READ_DEPTH_GBUFFER()

  POSTFX_VS_TEXCOORD(0, tc)
  hlsl(ps) {
    float4 mask_ps(VsOutput input) : SV_Target0
    {
      float d = readGbufferDepth(input.tc);
      return d >= 0.5 ? float4(1,1,1,1) : float4(0,0,0,0);
    }
  }
  compile("target_ps", "mask_ps");
}
