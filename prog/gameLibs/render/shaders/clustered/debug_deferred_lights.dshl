include "hardware_defines.dshl"
include "lights_cb.dshl"

float4 world_view_pos;

shader debug_lights, debug_spot_lights
{
  no_ablend;
  channel float3 pos = pos;
  cull_mode = none;
  (vs) {
    world_view_pos@f3 = world_view_pos;
    globtm@f44 = globtm;
  }
  z_test = true;
  z_write = true;
  INIT_AND_USE_PHOTOMETRY_TEXTURES(vs)
  INIT_AND_USE_OMNI_LIGHTS_CB(vs)
  INIT_SPOT_LIGHTS_CB(vs)

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float4 color: TEXCOORD0;
      float3 point2Eye: TEXCOORD1;
    };
  }

  hlsl(vs) {
    struct VsInput
    {
      float3 pos        : POSITION;
    };
    float3 tangent_to_world( float3 vec, float3 tangentZ )
    {
      float3 up = abs(tangentZ.z) < 0.999 ? float3(0,0,1) : float3(1,0,0);
      float3 tangentX = normalize( cross( up, tangentZ ) );
      float3 tangentY = cross( tangentZ, tangentX );
      return tangentX * vec.x + tangentY * vec.y + tangentZ * vec.z;
    }

    VsOutput debug_lights_vs(VsInput input, uint id : SV_InstanceID)
    {
      VsOutput output;
      ##if shader == debug_lights
        ##if hardware.metal // had to do this weird int conversions cause hlsl has insertBits calls which won't compile in metal because of signed/unsigned mismatch
        RenderOmniLight ol = omni_lights_cb[int(id)];
        ##else
        RenderOmniLight ol = omni_lights_cb[id];
        ##endif
        float4 pos_and_radius = ol.posRadius;
        float3 worldPos = pos_and_radius.xyz + input.pos.xyz*log2(2+pos_and_radius.w)*0.05;
        float4 color_and_attenuation = getFinalColor(ol, worldPos);
      ##else
        ##if hardware.metal // had to do this weird int conversions cause hlsl has insertBits calls which won't compile in metal because of signed/unsigned mismatch
        RenderSpotLight sl = spot_lights_cb[int(id)];
        ##else
        RenderSpotLight sl = spot_lights_cb[id];
        ##endif
        float4 pos_and_radius    = sl.lightPosRadius;
        float4 color_and_attenuation = sl.lightColorAngleScale;
        float4 dir_angle = sl.lightDirectionAngleOffset;

        const float lightAngleScale = color_and_attenuation.a;
        const float lightAngleOffset = dir_angle.a;
        float2 texId_scale = sl.texId_scale_illuminatingplane_shadow_contactshadow.xy;

        float cosOuter = -lightAngleOffset/lightAngleScale;
        float halfTan = sqrt(1/(cosOuter*cosOuter)-1);

        float3 ofs = tangent_to_world(float3(input.pos.xy*halfTan, input.pos.z), dir_angle.xyz );

        //float3 worldPos = pos_and_radius.xyz + ofs*pos_and_radius.w;
        float3 worldPos = pos_and_radius.xyz + ofs.xyz*log2(2+pos_and_radius.w)*0.1;
        if (input.pos.z!=0)
          color_and_attenuation/=8;
        color_and_attenuation.a =
          applyPhotometryIntensity(
            normalize(worldPos - pos_and_radius.xyz),
            dir_angle.xyz, texId_scale.x, texId_scale.y, color_and_attenuation.a);
      ##endif
      output.pos = mul(float4(worldPos, 1), globtm);
      output.point2Eye = worldPos-world_view_pos;
      output.color = color_and_attenuation/4;
      return output;
    }
  }
  hlsl(ps) {
    float4 xray_lighting(float3 point_to_eye, float4 hatching_color, float3 world_normal)
    {
      float4 hatching_type = float4(0.5,1,0,0);
      float fresnel = saturate(1 - abs(dot(world_normal, normalize(point_to_eye).xyz)));
      fresnel *= fresnel;fresnel *= fresnel;
      fresnel = saturate(lerp(hatching_type.y, hatching_type.z, fresnel) + hatching_type.x * world_normal.y);
      float4 hatching_fresnel = hatching_color*0.5;
      half4 colorRet = lerp(hatching_color, hatching_fresnel, fresnel);
      return float4(colorRet.rgb, hatching_color.a);
    }
    float4 debug_lights_ps(VsOutput IN) : SV_Target
    {
      float3 normal = normalize(cross(normalize(ddy(IN.point2Eye.xyz)), normalize(ddx(IN.point2Eye.xyz))));
      return xray_lighting(IN.point2Eye, IN.color, normal);
    }
  }
  compile("target_vs", "debug_lights_vs");
  compile("target_ps", "debug_lights_ps");
}
