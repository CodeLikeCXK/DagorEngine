include "shader_global.dshl"
include "wind_simulation_inc.dshl"

int fluid_wind_border_bounds = 0;
interval fluid_wind_border_bounds: fluid_wind_border_bounds_off < 1, fluid_wind_border_bounds_on;

int fluid_wind_debug_mode = 0;
interval fluid_wind_debug_mode: fluid_wind_debug_3d < 1, fluid_wind_debug_pressure < 2, fluid_wind_debug_speed < 3,
  fluid_wind_debug_divergence;

int fluid_wind_use_pressure = 1;
interval fluid_wind_use_pressure: fluid_wind_use_pressure_off < 1, fluid_wind_use_pressure_on;

// Size of volume
float4 fluid_wind_dim = float4(32, 32, 32, 1);
float fluid_wind_timestep = 1;

float4 fluid_motor_center_radius;
float4 fluid_motor_direction_duration;
float fluid_motor_strength;
float fluid_motor_time;

// Size of viewport
int fluid_wind_width = 512;
int fluid_wind_height = 512;

macro USE_FLUID_WIND_SIMULATION()
  hlsl(cs) {
    #define RADIUS_AA 0.5
    #define MAX_PHASE_FADE 0.5
    #define TIMESTEP fluid_wind_timestep
    #define MODULATE 1

    #define ROTATION float4x4( \
      1, 0, 0, 0, \
      0, 1, 0, 0, \
      0, 0, 1, 0, \
      0, 0, 0, 0 \
    )
    #define ZOOM 1
    #define COL_SCALE 5

    #define DEBUG_SLICES_3D 0
    #define DEBUG_PRESSURE 2
    #define DEBUG_SPEED 1
    #define DEBUG_DIVERGENCE 1

  ##if fluid_wind_debug_mode == fluid_wind_debug_3d
    #define DEBUG_SLICES_MODE DEBUG_SLICES_3D
  ##elif fluid_wind_debug_mode == fluid_wind_debug_pressure
    #define DEBUG_SLICES_MODE DEBUG_PRESSURE
    #define DEBUG_SLICES_DIM float3(dim.x / 4, dim.y, dim.z)
  ##elif fluid_wind_debug_mode == fluid_wind_debug_speed
    #define DEBUG_SLICES_MODE DEBUG_SPEED
    #define DEBUG_SLICES_DIM float3(dim.x, dim.y, dim.z)
  ##elif fluid_wind_debug_mode == fluid_wind_debug_divergence
    #define DEBUG_SLICES_MODE DEBUG_DIVERGENCE
    #define DEBUG_SLICES_DIM float3(dim.x / 4, dim.y, dim.z)
  ##endif

  ##if fluid_wind_border_bounds == fluid_wind_border_bounds_on
    #define ENABLE_BORDER_BOUNDS 1
  ##endif

  ##if fluid_wind_use_pressure == fluid_wind_use_pressure_on
    #define USE_PRESSURE 1
  ##endif
  }

  (cs) {
    dim@f3 = (fluid_wind_dim.x, fluid_wind_dim.y, fluid_wind_dim.z, 0);
    fluid_wind_timestep@f1 = (fluid_wind_timestep);
    width@f1 = (fluid_wind_width);
    height@f1 = (fluid_wind_height);
    fluid_wind_origin_delta@f3 = (fluid_wind_origin_delta.x, fluid_wind_origin_delta.y, fluid_wind_origin_delta.z, 0);
  }

  hlsl(cs) {
    Texture3D<float4> speed: register (t0);
    SamplerState speed_samplerstate : register(s0);
    Texture3D<float4> divergence: register (t1);
    Texture3D<float4> pressure: register (t2);

    RWTexture3D<float4> speedRW: register (u0);
    RWTexture3D<float4> divergenceRW: register (u1);
    RWTexture3D<float4> pressureRW: register (u2);
    RWTexture2D<float4> output: register(u3);

    bool isBorder(float3 i)
    {
      return i.x < 0.5 || i.x > dim.x - 0.5 || i.y < 0.5 || i.y > dim.y - 0.5 || i.z < 0.5 || i.z > dim.z - 0.5;
    }

    float3 toLocalPoint(uint3 i)
    {
      return i + 0.5;
    }
  }
endmacro

shader fluid_wind_clear
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  hlsl(cs) {
    // advect speed, by sampling speed at 'pos - dt*speed' position
    [numthreads(16, 4, 4)]
    void main(uint3 Gid: SV_GroupID, uint3 i: SV_DispatchThreadID, uint3 GTid: SV_GroupThreadID, uint GI: SV_GroupIndex)
    {
      texture3DAt(speedRW, i) = float4(0, 0, 0, 0);
      if (i.x < dim.x / 4)
        texture3DAt(pressureRW, i) = 0;
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_wind_advect
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  hlsl(cs) {
    // advect speed, by sampling speed at 'pos - dt*speed' position
    [numthreads(16, 4, 4)]
    void main(uint3 Gid: SV_GroupID, uint3 i: SV_DispatchThreadID, uint3 GTid: SV_GroupThreadID, uint GI: SV_GroupIndex)
    {
      // advect by trace back
      float3 coord = toLocalPoint(i) - speed[i].xyz * TIMESTEP * MODULATE * 1;
      float3 tc = (coord + fluid_wind_origin_delta.xyz) / dim;
      float4 s = tex3Dlod(speed, float4(tc, 0));
      texture3DAt(speedRW, i) = s;
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_wind_divergence
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  hlsl(cs) {
    // calc speed divergence, by sampling speed at 'pos - dt*speed' position
    [numthreads(16, 4, 4)]
    void main(uint3 Gid: SV_GroupID, uint3 i: SV_DispatchThreadID, uint3 GTid: SV_GroupThreadID, uint GI: SV_GroupIndex)
    {
      // early out
      if (i.x >= dim.x / 4)
        return;

      float pxm, pxp, pym, pyp, pzm, pzp;
      float4 divergence;

      UNROLL
      for (int j = 0; j < 4; j++)
      {
        uint3 i4 = uint3(4 * i.x + j, i.y, i.z);
        pxm = speed[i4 + uint3(-1, 0, 0)].x;
        pxp = speed[i4 + uint3(1, 0, 0)].x;
        pym = speed[i4 + uint3(0, -1, 0)].y;
        pyp = speed[i4 + uint3(0, 1, 0)].y;
        pzm = speed[i4 + uint3(0, 0, -1)].z;
        pzp = speed[i4 + uint3(0, 0, 1)].z;
        divergence[j] = (pxp - pxm + pyp - pym + pzp - pzm) / 2;
      }
      texture3DAt(divergenceRW, i) = divergence;
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_wind_jaccobi3d
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  hlsl(cs) {
    // jaccobi iteration to make gradient pressure equal to speed (before it has divergence 0)
    [numthreads(16, 4, 4)]
    void main(uint3 Gid: SV_GroupID, uint3 i: SV_DispatchThreadID, uint3 GTid: SV_GroupThreadID, uint GI: SV_GroupIndex)
    {
      // early out
      if (i.x >= dim.x/4)
        return;

      uint3 j;

      j = uint3(max(i.x - 1, 0), i.y, i.z);
      float4 pxm = float4(pressure[j].w, pressure[i].xyz);
      j = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
      float4 pxp = float4(pressure[i].yzw, pressure[j].x);

      j = uint3(i.x, max(i.y - 1, 0), i.z);
      float4 pym = pressure[j];
      j = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
      float4 pyp = pressure[j];

      j = uint3(i.x, i.y, max(i.z - 1, 0));
      float4 pzm = pressure[j];
      j = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
      float4 pzp = pressure[j];

    #if USE_PRESSURE
      texture3DAt(pressureRW, i) = (pxp + pxm + pyp + pym + pzp + pzm - divergence[i]) / 6;
    #else
      texture3DAt(pressureRW, i) = -divergence[i] / 6;
    #endif
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_wind_project3d
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  hlsl(cs) {
    // jaccobi iteration to make gradient pressure equal to speed (before it has divergence 0)
    [numthreads(16, 4, 4)]
    void main(uint3 Gid: SV_GroupID, uint3 i: SV_DispatchThreadID, uint3 GTid: SV_GroupThreadID, uint GI: SV_GroupIndex)
    {
      // early out
      if (i.x >= dim.x/4)
        return;

      uint3 j;

      j = uint3(max(i.x - 1, 0), i.y, i.z);
      float4 pxm = float4(pressure[j].w, pressure[i].xyz);
      j = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
      float4 pxp = float4(pressure[i].yzw, pressure[j].x);

      j = uint3(i.x, max(i.y - 1,0), i.z);
      float4 pym = pressure[j];
      j = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
      float4 pyp = pressure[j];

      j = uint3(i.x, i.y, max(i.z - 1, 0));
      float4 pzm = pressure[j];
      j = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
      float4 pzp = pressure[j];

      pxp -= pxm;
      pyp -= pym;
      pzp -= pzm;

    #if ENABLE_BORDER_BOUNDS
      #define APPLY_BORDER(speed) -speed
    #else
      #define APPLY_BORDER(speed) speed
    #endif

      float4 s;
      i.x *= 4;
      bool borderyz = any(i.yz == 0 | i.yz == dim.yz - 1);

      s = speed[i] - float4(pxp.x, pyp.x, pzp.x, 0) / 2 * MODULATE;
      s = (i.x == 0 || borderyz) ? APPLY_BORDER(s) : s;
      texture3DAt(speedRW, i) = s;
      i.x++;
      s = speed[i] - float4(pxp.y, pyp.y, pzp.y, 0) / 2 * MODULATE;
      s = (borderyz) ? APPLY_BORDER(s) : s;
      texture3DAt(speedRW, i) = s;
      i.x++;
      s = speed[i] - float4(pxp.z, pyp.z, pzp.z, 0) / 2 * MODULATE;
      s = (borderyz) ? APPLY_BORDER(s) : s;
      texture3DAt(speedRW, i) = s;
      i.x++;
      s = speed[i] - float4(pxp.w, pyp.w, pzp.w, 0) / 2 * MODULATE;
      s = (i.x == dim.x-1 || borderyz) ? APPLY_BORDER(s) : s;
      texture3DAt(speedRW, i) = s;
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_wind_render
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  hlsl(cs) {
    [numthreads(16, 16, 1)]
    void main(uint3 Gid: SV_GroupID, uint3 DTid: SV_DispatchThreadID, uint3 GTid: SV_GroupThreadID, uint GI: SV_GroupIndex)
    {
    #if DEBUG_SLICES_MODE == DEBUG_SLICES_3D
      float3 eye = float3(0.0f, 0.0f, 4.0f);
      float3 raydir = float3((2 * DTid.xy - float2(width, height)) / min(width, height) * ZOOM, 0) - eye;

      // rotate view
      eye = mul(float4(eye, 1), ROTATION).xyz;
      raydir = mul(float4(raydir, 0), ROTATION).xyz;

      // calc ray volume intersection, volume cube centered at origin edge size 2
      // ray = eye + t*raydir;
      // intersect at plane x = -1 and x = 1

      float3 t1 = max((-1 - eye) / raydir, 0);
      float3 t2 = max(( 1 - eye) / raydir, 0);

      float3 front = min(t1, t2);
      float3 back = max(t1, t2);

      float tfront = max(front.x, max(front.y, front.z));
      float tback = min(back.x, min(back.y, back.z));

      // calc texture coordinates of front and back intersection

      float3 texf = (eye + tfront * raydir + 1) / 2;
      float3 texb = (eye + tback * raydir + 1) / 2;

      float steps = floor(length(texf - texb) * dim.x + 0.5);
      float3 texdir = (texb - texf) / steps;

      steps = (tfront >= tback) ? 0 : steps; // no intersection ?
      // simple MIP render
      float m = 0;
      for (float i = 0.5; i < steps; i++)
      {
        float3 sam = texf + i * texdir;
        float s = length(tex3Dlod(speed, float4(sam, 0)).xyz);
        m = max(m, s);
      }

      // hot metal color
      float4 col = saturate(lerp(float4(0, -1.41, -3, -0.4), float4(1.41, 1.41,1, 1.41), m / 3));

    /*
      float4 col = 0;
      for (float i = 0.5; i < steps; i++)
      {
        float3 sam = texf + i * texdir;
        float s = tex3Dlod(speed, float4(sam, 0)).w;
        float4 c = saturate(lerp(float4(0,-1.41, -3, -0.4), float4(1.41, 1.41, 1, 1.41), s / 3));

        col.rgb += c.rgb * c.a * (1 - col.a);
        col.a += c.a * (1 - col.a);
      }
    */

      // scale to see
      col.rgb *= COL_SCALE;
      //
      texture2DAt(output, int2(width - DTid.x, DTid.y)) = col;
    #else
      float2 texcoord = DTid.xy / float2(width, height);
      float sliceSize = sqrt(width * height / float(DEBUG_SLICES_DIM.z));
      int2 numSlicesZ = ceil(int2(width, height) / sliceSize);
      numSlicesZ.y = ceil(DEBUG_SLICES_DIM.z / float(numSlicesZ.x));
      int2 coordZ = texcoord * numSlicesZ;
      int sliceZ = coordZ.x + coordZ.y * numSlicesZ.x;
      if (sliceZ >= DEBUG_SLICES_DIM.z)
      {
        texture2DAt(output, DTid.xy) = 0;
        return;
      }
      int2 coordXY = frac(texcoord * numSlicesZ) * DEBUG_SLICES_DIM.xy;

      #if DEBUG_SLICES_MODE == DEBUG_PRESSURE
        float4 res = pressure[int3(coordXY.xy, sliceZ)] * 1000;
        texture2DAt(output, DTid.xy) = float4(res.xyz, 0) * 0.01;
      #elif DEBUG_SLICES_MODE == DEBUG_SPEED
        float4 res = speed[int3(coordXY.xy, sliceZ)] * 100;
        texture2DAt(output, DTid.xy) = float4(abs(res.xyz), 0) * 0.01;
      #elif DEBUG_SLICES_MODE == DEBUG_DIVERGENCE
        float4 res = divergence[int3(coordXY.xy, sliceZ)] * 100;
        texture2DAt(output, DTid.xy) = float4(res.xyz, 0) * 0.01;
      #endif
    #endif
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_motor_omni
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  (cs) {
    fluid_motor_center_radius@f4 = fluid_motor_center_radius;
    fluid_motor_direction_duration@f4 = fluid_motor_direction_duration;
    fluid_motor_strength@f1 = (fluid_motor_strength);
    fluid_motor_time@f1 = (fluid_motor_time);
  }

  hlsl(cs) {
    [numthreads(16, 4, 4)]
    void main(uint3 i: SV_DispatchThreadID)
    {
      float force = fluid_motor_strength * TIMESTEP;
      float3 diff = toLocalPoint(i) - fluid_motor_center_radius.xyz;
      float radius = fluid_motor_center_radius.w + RADIUS_AA;
      float distSq = dot(diff, diff);

      if (distSq < (radius * radius))
      {
        float dist = sqrt(distSq);
        texture3DAt(speedRW, i) = texture3DAt(speed, i) + float4(force * diff / max(dist, 0.001) * pow2(saturate((radius - dist) / RADIUS_AA)), 0);
      }
      else
        texture3DAt(speedRW, i) = texture3DAt(speed, i);

      /*if (i.x < dim.x/4)
      {
        float4 newP = pressure[i];

        for (int c = 0; c < 4; ++c)
        {
          uint3 newI = uint3(i.x * 4 + c, i.y, i.z);

          float force = fluid_motor_strength * TIMESTEP;
          float3 diff = toLocalPoint(newI) - fluid_motor_center_radius.xyz;
          float radius = fluid_motor_center_radius.w + RADIUS_AA;
          float distSq = dot(diff, diff);

          if (distSq < (radius * radius))
          {
            float dist = sqrt(distSq);
            newP[c] = newP[c] + force * pow2(saturate((radius - dist) / RADIUS_AA));
          }
        }

        texture3DAt(pressureRW, i) = newP;
      }*/
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_motor_directional
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  (cs) {
    fluid_motor_center_radius@f4 = fluid_motor_center_radius;
    fluid_motor_direction_duration@f4 = fluid_motor_direction_duration;
    fluid_motor_strength@f1 = (fluid_motor_strength);
    fluid_motor_time@f1 = (fluid_motor_time);
  }

  hlsl(cs) {
    [numthreads(16, 4, 4)]
    void main(uint3 i: SV_DispatchThreadID)
    {
      float3 force = fluid_motor_direction_duration.xyz * fluid_motor_strength * TIMESTEP;
      float3 diff = toLocalPoint(i) - fluid_motor_center_radius.xyz;
      float radius = fluid_motor_center_radius.w + RADIUS_AA;
      float distSq = dot(diff, diff);

      if (distSq < (radius * radius))
      {
        float dist = sqrt(distSq);
        texture3DAt(speedRW, i) = texture3DAt(speed, i) + float4(force * pow2(saturate((radius - dist) / RADIUS_AA)), 0);
      }
      else
        texture3DAt(speedRW, i) = texture3DAt(speed, i);
    }
  }

  compile("cs_5_0", "main");
}

shader fluid_motor_vortex
{
  ENABLE_ASSERT(cs)
  USE_FLUID_WIND_SIMULATION()

  (cs) {
    fluid_motor_center_radius@f4 = fluid_motor_center_radius;
    fluid_motor_direction_duration@f4 = fluid_motor_direction_duration;
    fluid_motor_strength@f1 = (fluid_motor_strength);
    fluid_motor_time@f1 = (fluid_motor_time);
  }

  hlsl(cs) {
    [numthreads(16, 4, 4)]
    void main(uint3 i: SV_DispatchThreadID)
    {
      float force = fluid_motor_strength * TIMESTEP;
      float3 diff = toLocalPoint(i) - fluid_motor_center_radius.xyz;
      float radius = 15 + RADIUS_AA;
      float distSq = dot(diff, diff);

      if (distSq < (radius * radius))
      {
        float dist = sqrt(distSq);
        texture3DAt(speedRW, i) = texture3DAt(speed, i) + float4(force * cross(float3(0, 0, 1), diff / max(dist, 0.001)) * pow2(saturate((radius - dist) / RADIUS_AA)), 0);
      }
      else
        texture3DAt(speedRW, i) = texture3DAt(speed, i);
    }
  }

  compile("cs_5_0", "main");
}