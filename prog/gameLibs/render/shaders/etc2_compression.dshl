include "shader_global.dshl"
include "etc2_compression_inc.dshl"

texture src_tex;
float src_mip = 0;
float dst_mip = 0;

int compress_rgba = 0;
interval compress_rgba : no<1, yes;

shader etc2_compressor
{
  supports none;

  (cs) { src_delta_mip@f2 = (src_mip, dst_mip-src_mip, 0, 0); }
  (cs) { src_tex@smp2d = src_tex; }

  INIT_ETC2_COMPRESSION()
  ENABLE_ASSERT(cs)

  hlsl(cs)
  {
    [numthreads( 4, 4, 1 )]
    void bc_compressor_cs(uint3 dtId : SV_DispatchThreadID)
    {
    ##if compress_rgba == yes
      #define GET_TEXEL(xx, yy) texelFetch( src_tex, (uv + uint2(xx, yy))*mip_diff_scale, src_delta_mip.x).rgba
    ##else
      #define GET_TEXEL(xx, yy) texelFetch( src_tex, (uv + uint2(xx, yy))*mip_diff_scale, src_delta_mip.x).rggg
    ##endif

      uint mip_diff_scale = exp2(src_delta_mip.y);
      uint2 uv = dtId.xy*4;
      const float4 texels[16] = {
        GET_TEXEL(0, 0), GET_TEXEL(1, 0), GET_TEXEL(2, 0), GET_TEXEL(3, 0),
        GET_TEXEL(0, 1), GET_TEXEL(1, 1), GET_TEXEL(2, 1), GET_TEXEL(3, 1),
        GET_TEXEL(0, 2), GET_TEXEL(1, 2), GET_TEXEL(2, 2), GET_TEXEL(3, 2),
        GET_TEXEL(0, 3), GET_TEXEL(1, 3), GET_TEXEL(2, 3), GET_TEXEL(3, 3)
      };

      #undef GET_TEXEL

      ## if compress_rgba == yes
      texture2DAt(compressedTexture, dtId.xy) = CompressBlock_ETC2_RGBA(texels);
      ##else
      texture2DAt(compressedTexture, dtId.xy) = CompressBlock_ETC2_RG(texels);
      ##endif
    }
  }

  compile( "target_cs", "bc_compressor_cs" );
}
