include "sky_shader_global.dshl"

texture depth_ao_tex_to_blur;
float depth_ao_texture_size_inv;
int depth_above_blur_layer = 0;

shader single_pass_blur11
{
  supports global_frame;
  cull_mode=none;
  z_test=false;
  z_write=false;
  no_ablend;


  channel float2 pos=pos;
  channel float4 tc=tc[0];


  DECL_POSTFX_TC_VS_SCR()
  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float4 tc : TEXCOORD0;
    };
  }
  
  hlsl(vs) {
    struct VsInput
    {
      float2 pos        : POSITION;
      float4 tc        : TEXCOORD0;
    };

    VsOutput esm_blur_vs(VsInput input)
    {
      VsOutput output;
      float2 inpos = input.pos.xy;
      output.pos = float4(inpos,0,1);
      output.tc = input.tc;

      return output;
    }
  }

  (ps) {
    tex0@smpArray = depth_ao_tex_to_blur;
    blur_layer@i1 = depth_above_blur_layer;
    ofs@f1 = (depth_ao_texture_size_inv, 0, 0, 0);
  }

  PS4_DEF_TARGET_FMT_UNORM16_ABGR()

  hlsl(ps) {
    #define out_type float

    // automatically generated by GenerateGaussFunctionCode in genBlurs.cpp;

    out_type GaussianBlur( float2 centreUV, float2 pixelOffset, float4 clampTc )
    {
        out_type colOut = 0;

        #define stepCount 3
        #if stepCount == 3
        // Kernel width 11 x 11
        float gWeights[stepCount]={0.329654,0.157414,0.0129324};
        float gOffsets[stepCount]={0.622052,2.274,4.14755};

        UNROLL
        for( int i = 0; i < stepCount; i++ )
        {
          float2 texCoordOffset = gOffsets[i] * pixelOffset;
          out_type col = tex3Dlod(tex0, float4(clamp(centreUV + texCoordOffset, clampTc.xz, clampTc.yw), blur_layer, 0)).x +
            tex3Dlod(tex0, float4(clamp(centreUV - texCoordOffset, clampTc.xz, clampTc.yw), blur_layer, 0)).x;
          colOut += gWeights[i] * col;
        }
        #elif stepCount == 4
        // Kernel width 15 x 15
        float gWeights[4]={0.24956,0.192472,0.0515112,0.00645659};
        float gOffsets[4]={0.644353,2.37891,4.2912,6.21672};

        UNROLL
        for( int i = 0; i < stepCount; i++ )
        {
          float2 texCoordOffset = gOffsets[i] * pixelOffset;
          out_type col = tex3Dlod(tex0, float4(centreUV + texCoordOffset, blur_layer, 0)).x + tex3Dlod(tex0, float4(centreUV - texCoordOffset, blur_layer, 0)).x;
          colOut += gWeights[i] * col;
        }
        #elif  stepCount == 9
      // Kernel width 35 x 35
        float gWeights[9]={0.108011,0.130827,0.103888,0.072313,0.0441208,0.0235963,0.0110615,0.00454513,0.00163695};
        float gOffsets[9]={0.662966,2.47925,4.46271,6.44624,8.42989,10.4137,12.3977,14.3819,16.3663};

        UNROLL
        for( int i = 0; i < stepCount; i++ )
        {
            float2 texCoordOffset = gOffsets[i] * pixelOffset;
            out_type col = tex3Dlod(tex0, float4(centreUV + texCoordOffset, blur_layer, 0)).x + tex3Dlod(tex0, float4(centreUV - texCoordOffset, blur_layer, 0)).x;
            colOut += gWeights[i] * col;
        }
        #endif
        return colOut;
    }

    float esm_blur_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target
    {
      float4 pos = GET_SCREEN_POS(input.pos);
      #if stepCount != 3
        WE have to keep same kernel in horizontal and vertical pass!!!
      #endif
      float2 centre = pos.xy*ofs;
      float ret = 0;
      float gWeights[stepCount]={0.329654,0.157414,0.0129324};
      float gOffsets[stepCount]={0.622052,2.274,4.14755};//todo: offsets can be premultiplied

      UNROLL
      for( int i = 0; i < stepCount; i++ )
      {
        float texCoordOffset = gOffsets[i] * ofs;
        float col = GaussianBlur(float2(centre.x, centre.y - texCoordOffset), float2(ofs, 0), input.tc) + 
                    GaussianBlur(float2(centre.x, centre.y + texCoordOffset), float2(ofs, 0), input.tc);
        ret += gWeights[i] * col;
      }
      return ret;
    }
  }

  compile("target_vs", "esm_blur_vs");
  compile("target_ps", "esm_blur_ps");
}
