include "skyLight.dshl"
include "globtm_no_ofs.dshl"

texture prev_frame_tex;

macro INIT_FETCH_REFRACTED_PIXEL(stage)
  (stage) {viewProjectionMatrixNoOfs@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 }; }
  (stage) { prev_frame_tex@smp2d = prev_frame_tex; }
endmacro

macro REFRACTION_INIT()
  INIT_BRUNETON_FOG(vs)
  FOG_PS_STCODE()
  INIT_SUN_STCODE()

  if (in_editor_assume == no)
  {
    INIT_VOLUMETRIC_LIGHT_TRANSPARENT(ps)
    SQ_INIT_CLOUDS_SHADOW(ps)
    //INIT_STATIC_SHADOW() // not enough vsmp for both cascades
    INIT_STATIC_SHADOW_BASE_ONE_CASCADE(ps) //we would better use! INIT_STATIC_SHADOW_BASE_SECOND_CASCADE()
  }
  INIT_SKY_DIFFUSE()
  INIT_LOCAL_SPECULAR()
  //INIT_FOM_SHADOWS(vs)
  INIT_FETCH_REFRACTED_PIXEL(ps)
  INIT_HDR(ps)
endmacro

macro USE_FETCH_REFRACTED_PIXEL(stage)
  USE_HDR(stage)
hlsl(stage) {
  float4 fetchRefractedPixel(float2 screenUV, float3 cameraToPoint, float3 worldRayDir, float rayLen, float roughnessMip)
  {
    float4 ndcSamplePosition = mul(float4(cameraToPoint + worldRayDir*rayLen, 1.0), viewProjectionMatrixNoOfs);
    float2 refractUV = (ndcSamplePosition.xy/ndcSamplePosition.w);
    refractUV = refractUV*float2(0.5, -0.5) + 0.5;
    return float4(unpack_hdr(tex2Dlod(prev_frame_tex, float4(frac(abs(floor(refractUV))%2 ? -refractUV : refractUV), 0, roughnessMip)).xyz), 1);//simulate mirror addressing
  }
}
endmacro

macro REFRACTION_USE()
  USE_BRUNETON_FOG_VS()
  USE_FETCH_REFRACTED_PIXEL(ps)
  if (in_editor_assume == no)
  {
    SQ_CLOUDS_SHADOW(ps)
    USE_STATIC_SHADOW_ONE_CASCADE(ps)
    USE_VOLUMETRIC_LIGHT_TRANSPARENT(ps)
  }
endmacro
