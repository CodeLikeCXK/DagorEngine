include "static_shadow_stcode.dshl"

macro STATIC_SHADOW_DEFINE_SAMPLER_TYPE(code)
  hlsl(code)
  {
      #define STATIC_SHADOW_SAMPLER_STATE_REF SamplerComparisonState

    ##if (hardware.fsh_5_0)
      #define STATIC_SHADOW_TEXTURE_REF Texture2DArray<float4>

      half static_shadow_sample(float2 uv, float z, STATIC_SHADOW_TEXTURE_REF tex, STATIC_SHADOW_SAMPLER_STATE_REF tex_cmpSampler, float layer)
      {
        return (half)shadow2DArray(tex, float4(uv, layer, z));
      }
    ##else
      #define STATIC_SHADOW_TEXTURE_REF Texture2D<float4>

      half static_shadow_sample(float2 uv, float z, STATIC_SHADOW_TEXTURE_REF tex, STATIC_SHADOW_SAMPLER_STATE_REF tex_cmpSampler, float layer)
      {
        return half(shadow2D(tex, float3(uv, z)));
      }
    ##endif
  }
endmacro

macro USE_STATIC_SHADOW_BASE_INT(code, num_cascades)
  hlsl(code)
  {
    #if HAS_STATIC_SHADOW

      #define STATIC_SHADOW_CASCADE_NUM num_cascades
      #include <static_shadow_int.hlsl>

    #endif
  }
endmacro

macro INIT_STATIC_SHADOW_PS()
  INIT_STATIC_SHADOW_BASE(ps)
endmacro

macro INIT_STATIC_SHADOW_BLOCK_PS()
  INIT_STATIC_SHADOW_BASE_ONE_CASCADE(ps)
  INIT_STATIC_SHADOW_BASE_SECOND_CASCADE(ps)
endmacro

macro INIT_STATIC_SHADOW_VS()
  INIT_STATIC_SHADOW_BASE(vs)
endmacro

macro INIT_STATIC_SHADOW_CS()
  INIT_STATIC_SHADOW_BASE(cs)
endmacro

macro INIT_STATIC_SHADOW()
  INIT_STATIC_SHADOW_PS()
endmacro

macro INIT_STATIC_SHADOW_VS_ONE_CASCADE()
  INIT_STATIC_SHADOW_BASE_ONE_CASCADE(vs)
endmacro

macro INIT_STATIC_SHADOW_VS_PS_ONE_CASCADE()
  INIT_STATIC_SHADOW_BASE_ONE_CASCADE(vs)
  INIT_STATIC_SHADOW_BASE_ONE_CASCADE(ps)
endmacro

macro USE_STATIC_SHADOW_BASE_NUM(code, num_cascades)
  STATIC_SHADOW_DEFINE_SAMPLER_TYPE(code)
  USE_STATIC_SHADOW_BASE_INT(code, num_cascades)

  if (mobile_render == forward)
  {
    hlsl(code){
      #ifndef FASTEST_STATIC_SHADOW_PCF
      # define FASTEST_STATIC_SHADOW_PCF 1
      #endif
    }
  }

  hlsl(code){
    #if HAS_STATIC_SHADOW
    #include <static_shadow.hlsl>
    #endif
  }
endmacro

macro USE_STATIC_SHADOW_BASE(code)
  if (!DEFINED(skip_use_static_shadow))
  {
    if (static_shadows_cascades == two)
    {
      USE_STATIC_SHADOW_BASE_NUM(code, 2)
    }
    else if (static_shadows_cascades == one)
    {
      USE_STATIC_SHADOW_BASE_NUM(code, 1)
    }
    else if (static_shadows_cascades == off)
    {
      USE_STATIC_SHADOW_BASE_NUM(code, 0)
    }
  }
endmacro

macro USE_STATIC_SHADOW()
  if (!hardware.fsh_5_0 && static_shadows_cascades == two)
  {
    dont_render;
  }

  hlsl(ps) {
    #define HAS_STATIC_SHADOW 1
  }
  USE_STATIC_SHADOW_BASE(ps)
endmacro

macro USE_STATIC_SHADOW_ONE_CASCADE(code)
  hlsl(code) { #define HAS_STATIC_SHADOW 1}
  USE_STATIC_SHADOW_BASE_NUM(code, 1)
endmacro

macro USE_STATIC_SHADOW_VS()
  hlsl(vs) {
    #define HAS_STATIC_SHADOW 1
  }
  USE_STATIC_SHADOW_BASE(vs)
endmacro

macro USE_STATIC_SHADOW_VS_ONE_CASCADE()
  hlsl(vs) {
    #define STATIC_SHADOW_USE_CASCADE_1 0
    #define HAS_STATIC_SHADOW 1
  }
  USE_STATIC_SHADOW_BASE(vs)
endmacro

macro USE_STATIC_SHADOW_CS()
  hlsl(cs) {
    #define HAS_STATIC_SHADOW 1
  }
  USE_STATIC_SHADOW_BASE(cs)
endmacro
