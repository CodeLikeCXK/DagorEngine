int rtsm_bindless_slot = -1;
int rtsm_is_translucent = 0;
int csm_bindless_slot = -1;
int csm_sampler_bindless_slot = -1;

macro CHECKING_RTSM(stage)
  if (use_hw_raytracing)
  {
    (stage) {
      rtsm_bindless_slot@i1 = rtsm_bindless_slot;
      rtsm_is_translucent@i1 = rtsm_is_translucent;
      csm_bindless_slot@i1 = csm_bindless_slot;
      csm_sampler_bindless_slot@i1 = csm_sampler_bindless_slot;
    }

    hlsl (stage) {
      bool isRTSMEnabled()
      {
        return rtsm_bindless_slot >= 0;
      }
    }
  }
  else
  {
    hlsl (stage) {
      bool isRTSMEnabled()
      {
        return false;
      }
    }
  }
endmacro

macro USING_RTSM(stage)
  CHECKING_RTSM(stage)

  if (use_hw_raytracing)
  {
    hlsl (stage) {
      #define HAS_RTSM 1

      #include <rt_texture_outputs.inc.hlsli>

      #include <Include/NRDEncoding.hlsli>
      #include <Include/NRD.hlsli>

      half3 getRTSM(uint2 tci)
      {
        half4 shadowTexel = texture2DAt(rt_texture_outputs[rtsm_bindless_slot], tci);
        half4 shadowData = SIGMA_BackEnd_UnpackShadow(shadowTexel);

        if (!rtsm_is_translucent)
          return shadowTexel.xxx;
        else
          return lerp(shadowData.yzw, 1.0, shadowData.x);
      }
    }
  }
  else
  {
    hlsl (stage) {
      half3 getRTSM(uint2 tci)
      {
        return 0;
      }
    }
  }
endmacro