include "shader_global.dshl"
include "depth_above.dshl"
include "cfd_inc.dshl"

int4 cfd_voxel_tex_size;
int4 cfd_calc_offset;
float4 cfd_voxel_size;
float4 cfd_world_box_min;

float cfd_terrain_diff_tolerance = 2.0;
texture cfd_terrain_tex;

shader voxelize_depth_above
{
  ENABLE_ASSERT(cs)
  INIT_DEPTH_ABOVE(cs, blurred_depth)
  USE_DEPTH_ABOVE_TC(cs)

  (cs) {
    depth_above@smpArray = depth_around;
    voxel_tex@uav = cfd_voxel_tex hlsl {
      RWTexture3D<float> voxel_tex@uav;
    };
    tex_size@i3 = (cfd_voxel_tex_size.x, cfd_voxel_tex_size.y, cfd_voxel_tex_size.z);
    voxel_size@f3 = cfd_voxel_size;
    world_box_min@f3 = cfd_world_box_min;

    wind_terrain_tex@smp2d = cfd_terrain_tex;
    terrain_diff_tolerance@f1 = cfd_terrain_diff_tolerance;
    calc_offset@i2 = (cfd_calc_offset.x, cfd_calc_offset.y);
  }

  hlsl(cs) {
    float3 get_voxel_corner_in_world(uint3 id)
    {
      return world_box_min + id.xzy * voxel_size;
    }
  }

  hlsl(cs) {
    [numthreads(8, 8, 1)]
    void cs_main(uint3 tid : SV_DispatchThreadID)
    {
      uint3 coord = tid + uint3(calc_offset, 0);
      if (coord.x >= tex_size.x || coord.y >= tex_size.y || coord.z >= tex_size.z)
        return;

      float3 voxelCorner = get_voxel_corner_in_world(coord);
      float3 voxelCenter = voxelCorner + voxel_size * 0.5f;

      float3 depthAboveTc = 0;
      if (depth_ao_extra_enabled > 0)
        depthAboveTc = float3(saturate(world_to_depth_ao_extra.xy * voxelCenter.xz + world_to_depth_ao_extra.zw) - depth_ao_heights_extra.zw, 1);
      else
        depthAboveTc = float3(saturate(world_to_depth_ao.xy * voxelCenter.xz + world_to_depth_ao.zw) - depth_ao_heights.zw, 0);

      float height = decode_depth_above(tex3Dlod(depth_above, float4(depthAboveTc, 0)).x);

      float2 tc = float2(coord.xy + 0.5) / float2(tex_size.xy);
      float terrainHeight = tex2Dlod(wind_terrain_tex, float4(tc, 0, 0)).x;

      height = height - terrainHeight;
      if (height < terrain_diff_tolerance)
        height = 0.f;

      height += world_box_min.y;

      // Boundary textures will have 5 bits of data about center and surrounding boundaries
      float result = 0.0;
      if (height > voxelCenter.y)
        result = 1u / 32.0;
      else
        result = 0;

      texture3DAt(voxel_tex, coord) = result;
    }
  }
  compile("cs_5_0", "cs_main")
}

texture cfd_prev_boundaries;
texture cfd_next_boundaries;
int4 cfd_next_boundaries_tex_size;

shader cfd_generate_boundaries
{
  ENABLE_ASSERT(cs)

  (cs) {
    prev_boundaries@smp3d = cfd_prev_boundaries;
    next_boundaries@uav = cfd_next_boundaries hlsl {
      RWTexture3D<float> next_boundaries@uav;
    };
    tex_size@i3 = cfd_next_boundaries_tex_size;
    calc_offset@i2 = (cfd_calc_offset.x, cfd_calc_offset.y);
  }

  hlsl(cs) {
    float3 get_prev_tex_tc(uint3 id)
    {
      // Always take top left corner of 2x2 block of previous tex
      // TODO: Improve this by analyzing all 4 texels
      return float3(id.xy + 0.25, id.z + 0.5) / float3(tex_size);
    }

    uint get_boundary_data(float tex_data)
    {
      return uint(round(tex_data * 32.0));
    }
  }

  hlsl(cs) {
    [numthreads(8, 8, 1)]
    void cs_main(uint3 tid : SV_DispatchThreadID)
    {
      int3 coord = tid + int3(calc_offset, 0);
      if (coord.x >= tex_size.x || coord.y >= tex_size.y || coord.z >= tex_size.z)
        return;

      uint center = get_boundary_data(tex3Dlod(prev_boundaries, float4(get_prev_tex_tc(coord), 0)).x);
      uint top = get_boundary_data(tex3Dlod(prev_boundaries, float4(get_prev_tex_tc(coord + int3(0, -1, 0)), 0)).x);
      uint right = get_boundary_data(tex3Dlod(prev_boundaries, float4(get_prev_tex_tc(coord + int3(1, 0, 0)), 0)).x);
      uint bottom = get_boundary_data(tex3Dlod(prev_boundaries, float4(get_prev_tex_tc(coord + int3(0, 1, 0)), 0)).x);
      uint left = get_boundary_data(tex3Dlod(prev_boundaries, float4(get_prev_tex_tc(coord + int3(-1, 0, 0)), 0)).x);

      uint result = (center & 1) | ((top & 1) << 1) | ((right & 1) << 2) | ((bottom & 1) << 3) | ((left & 1) << 4);

      texture3DAt(next_boundaries, coord) = float(result) / 32.0;
    }
  }
  compile("cs_5_0", "cs_main")
}