include "indoor_light_probes_inc.dshl"

texture light_probe_specular_cubes;
int indoor_probes_to_use = 0;
interval indoor_probes_to_use : visible_probes < 1, active_probes;
float indoor_probes_grid_y_center;
float4 indoor_probes_grid_xz_center;
buffer indoor_active_probes_data;
buffer indoor_visible_probes_data;
buffer indoor_probe_cells_clusters;
float indoor_probes_max_distance_or_disabled; // if negative, indoor probes are not used

macro USE_INDOOR_LIGHT_PROBES(code, is_window)
if (compatibility_mode == compatibility_mode_off)
{
  USE_INDOOR_PROBE_CELL(code)
  (code) {
    light_probe_specular_cubes@smpCubeArray = light_probe_specular_cubes;
  }
  if (indoor_probes_to_use == active_probes)
  {
    (code) {
      indoor_probes_data@cbuf = indoor_active_probes_data hlsl {
        #include <indoor_probes_const.hlsli>
        cbuffer indoor_probes_data@cbuf
        {
          float4 indoor_probe_boxes[MAX_ACTIVE_PROBES * 3];
          float4 indoor_probe_pos_and_cubes[MAX_ACTIVE_PROBES];
          float4 indoor_probe_types[QUARTER_OF_ACTIVE_PROBES];
        }
      }
      indoor_probe_cells@buf = indoor_probe_cells_clusters hlsl {
        StructuredBuffer<uint4> indoor_probe_cells@buf;
      };
    }
  }
  else
  {
    (code) {
      indoor_probes_data@cbuf = indoor_visible_probes_data hlsl {
        #include <indoor_probes_const.hlsli>
        cbuffer indoor_probes_data@cbuf
        {
          float4 indoor_probe_boxes[NON_CELL_PROBES_COUNT * 3];
          float4 indoor_probe_pos_and_cubes[NON_CELL_PROBES_COUNT];
          float4 indoor_probe_types[NON_CELL_PROBES_COUNT/4];
        }
      }
    }
  }

  USE_INDOOR_LIGHT_PROBE_DFS(code)
  hlsl(code) {
    float3 get_local_dir(float3 world_dir, float3 xAxis, float3 yAxis, float3 zAxis)
    {
      return float3
      (
        dot(xAxis, world_dir),
        dot(yAxis, world_dir),
        dot(zAxis, world_dir)
      );
    }

    half3 parallax_correction_refl_box(half3 world_pos, half3 local_pos, half3 reflected, half3 probe_pos, half3 boxSize, half3 boxX, half3 boxY, half3 boxZ)
    {
      half3 roughRLocalSpace = get_local_dir(reflected, boxX, boxY, boxZ);

      half3 unitary = boxSize * 0.5;
      half3 firstPlaneIntersect = (unitary - local_pos) / roughRLocalSpace;
      half3 secondPlaneIntersect = (-unitary - local_pos) / roughRLocalSpace;
      half3 furthestPlane = max(firstPlaneIntersect, secondPlaneIntersect);
      half distance = min(furthestPlane.x, min(furthestPlane.y, furthestPlane.z));

      half3 intersectPositionWS = world_pos + reflected * distance;
      return intersectPositionWS - probe_pos;
    }

    half3 parallax_correction_refl_cylinder(half3 world_pos, half3 local_pos, half3 reflected, half3 probe_pos, half3 boxSize, half3 boxX, half3 boxY, half3 boxZ)
    {
      half3 roughRLocalSpace = get_local_dir(reflected, boxX, boxY, boxZ);
      float radius = min(boxSize.x, boxSize.y) * 0.5f;

      // Coefficents for the x^2 + y^2 = r^2, intersection = localpos + t * dir equation
      // (where the x,y are the intersection's x,y vals)
      float a = dot(roughRLocalSpace.xy, roughRLocalSpace.xy);
      float b = 2 * dot(local_pos.xy, roughRLocalSpace.xy);
      float c = dot(local_pos.xy, local_pos.xy) - radius * radius;

      float t = (-b + sqrt(b*b - 4*a*c))/(2*a);

      float tmin = (-boxSize.z*0.5f - local_pos.z) / roughRLocalSpace.z;
      float tmax = ( boxSize.z*0.5f - local_pos.z) / roughRLocalSpace.z;

      t = roughRLocalSpace.z < 0 ? min(t, tmin) : max(t, tmin);
      t = roughRLocalSpace.z < 0 ? max(t, tmax) : min(t, tmax);

      half3 intersectPositionWS = world_pos + reflected * t;
      return intersectPositionWS - probe_pos;
    }

    half3 parallax_correction_refl_capsule(half3 world_pos, half3 local_pos, half3 reflected, half3 probe_pos, half3 boxSize, half3 boxX, half3 boxY, half3 boxZ)
    {
      half3 roughRLocalSpace = get_local_dir(reflected, boxX, boxY, boxZ);
      float radius = min(boxSize.x, boxSize.y) * 0.5f;
      float half_height = (boxSize.z - radius) * 0.5f;

      // Body - cylinder
      // Coefficents for the x^2 + y^2 = r^2, intersection = localpos + t * dir equation
      // (where the x,y are the intersection's x,y vals)
      float a = dot(roughRLocalSpace.xy, roughRLocalSpace.xy);
      float b = 2 * dot(local_pos.xy, roughRLocalSpace.xy);
      float c = dot(local_pos.xy, local_pos.xy) - radius * radius;

      float t = (-b + sqrt(b*b - 4*a*c))/(2*a);

      float tmin = (-half_height - local_pos.z) / roughRLocalSpace.z;
      tmin = roughRLocalSpace.z < 0 ? -tmin : tmin;

      // Cap - sphere
      if (t < tmin)
      {
        float3 sphere_middle = t < tmin ? float3(0, 0, -half_height) : float3(0, 0, half_height);
        float3 p = local_pos - sphere_middle;

        a = dot(roughRLocalSpace, roughRLocalSpace);
        b = 2 * dot(p, roughRLocalSpace);
        c = dot(p,p) - radius*radius;

        t = (-b + sqrt(b*b - 4*a*c))/(2*a);
      }

      half3 intersectPositionWS = world_pos + reflected * t;
      return intersectPositionWS - probe_pos;
    }

    float4 use_indoor_probes(float3 world_pos, float3 normal, float3 reflected_dir, float roughnessMip, float viewDist)
    {
      if (indoor_probes_max_distance_or_disabled <= 0)
        return float4(0, 0, 0, 1);

      float3 gridPos;
      int3 gridSize;
      float fadeWeight;
      get_grid_params(world_pos, viewDist, gridPos, gridSize, fadeWeight);

      BRANCH
      if (fadeWeight == 0)
        return float4(0, 0, 0, 1);

  ##if indoor_probes_to_use == active_probes
      int probesCount = PROBES_IN_CELL;
      float3 idx =  gridPos + gridSize * 0.5;
      if (any(idx < 0) || any(idx >= float3(GRID_SIDE, GRID_HEIGHT, GRID_SIDE)))
        return float4(0, 0, 0, 1);
      uint id = (uint(idx.x) * GRID_HEIGHT + uint(idx.y)) * GRID_SIDE + uint(idx.z);
      uint4 probesIndicesPacked = structuredBufferAt(indoor_probe_cells, id);
      uint4 indices1 = probesIndicesPacked >> 16;
      uint4 indices2 = probesIndicesPacked & 0xFFFF;
      uint probesIndices[PROBES_IN_CELL] =
      {
        indices1.x, indices1.y, indices1.z, indices1.w,
        indices2.x, indices2.y, indices2.z, indices2.w
      };
  ##else
      int probesCount = NON_CELL_PROBES_COUNT;
  ##endif

      float3 result = float3(0, 0, 0);
      float totalWeight = 0;
      // no cubemap texture support for mobiles
  #if !MOBILE_DEVICE

      int boxesNearbyCount = 0;
      UNROLL
      for (int i = 0; i < probesCount; ++i)
      {
  ##if indoor_probes_to_use == active_probes
        uint probeIndex = probesIndices[i];
        if (probeIndex == uint(INVALID_CUBE_ID))
          break;
  ##else
        int probeIndex = i;
  ##endif
        uint cubeId = indoor_probe_pos_and_cubes[probeIndex].w;
        if (cubeId == INVALID_CUBE_ID)
          continue;

        half3 boxSize = half3(indoor_probe_boxes[probeIndex * 3 + 0].w, indoor_probe_boxes[probeIndex * 3 + 1].w, indoor_probe_boxes[probeIndex * 3 + 2].w);
        half3 boxX = indoor_probe_boxes[probeIndex * 3 + 0].xyz;
        half3 boxY = indoor_probe_boxes[probeIndex * 3 + 1].xyz;
        half3 boxZ = indoor_probe_boxes[probeIndex * 3 + 2].xyz;

        half3 probePos = indoor_probe_pos_and_cubes[probeIndex].xyz;
        half3 localPos = get_local_dir(world_pos - probePos, boxX, boxY, boxZ);
        half3 localNormal = get_local_dir(normal, boxX, boxY, boxZ);

        uint typeVectorIndex = probeIndex/4;
        uint typeSwizzle = probeIndex%4;

        // Box (/boundingbox) calculation
        //---------------------------------
        half3 boxDistanceVector = abs(localPos) - boxSize * 0.5;
        half signedDistance = max3(boxDistanceVector);
        half weight = 1;

        BRANCH
        if (signedDistance <= PROBE_BOX_OFFSET_FOR_BIG_BOX + PROBE_BOX_PADDING)
        {
          bool isCapsule = uint(indoor_probe_types[typeVectorIndex][typeSwizzle]) == ENVI_PROBE_CAPSULE_TYPE;
          bool isCylinder = uint(indoor_probe_types[typeVectorIndex][typeSwizzle]) == ENVI_PROBE_CYLINDER_TYPE;
          bool isBox = uint(indoor_probe_types[typeVectorIndex][typeSwizzle]) == ENVI_PROBE_CUBE_TYPE;

          float3 correctedReflShape = float3(0,0,0);

          // Dist calculation for other shapes
          //---------------------------------
          if (isCapsule || isCylinder)
          {
            float width = min(boxSize.x, boxSize.y);
            float radius = width * 0.5;
            float halfHeight = isCapsule ? (boxSize.z - width) * 0.5 : boxSize.z * 0.5;
            float3 a = float3(0, 0, halfHeight);
            float3 b = float3(0, 0, -halfHeight);

            float distance = isCapsule ? dfCapsule(localPos, a, b) - radius : sdfCylinder(localPos, a, b, radius);

            if (distance > 0)
              continue;

            correctedReflShape = isCapsule ? parallax_correction_refl_capsule(world_pos, localPos, reflected_dir, probePos, boxSize, boxX, boxY, boxZ) :
                                             parallax_correction_refl_cylinder(world_pos, localPos, reflected_dir, probePos, boxSize, boxX, boxY, boxZ);
          }
          else if (signedDistance > (is_window ? -1 : 0)) //We start modifying the box size when we are at most 1 meter far from the box boundary
          {
            half3 argSignedDistance = half3(boxDistanceVector == signedDistance);
            half projectedPos = sign(dot(argSignedDistance * localPos, 1));
            half projectedNormal = dot(argSignedDistance * localNormal, 1);

            half outwardFactor = saturate((projectedPos * projectedNormal) * 10 + 0.5);
            half distanceBias = lerp(PROBE_BOX_OFFSET_FOR_SMALL_BOX, PROBE_BOX_OFFSET_FOR_BIG_BOX, outwardFactor);
            half distanceBiasFadein = saturate((signedDistance - (-1)) * 2);
            distanceBias *= distanceBiasFadein;
            weight = 1 - saturate(((signedDistance + distanceBias) / PROBE_BOX_PADDING));
            boxSize += distanceBias;
          }

          float3 correctedRoughR_weight = isBox ? parallax_correction_refl_box(world_pos, localPos, reflected_dir, probePos, boxSize, boxX, boxY, boxZ) :
                                                  correctedReflShape;

          float3 color = texCUBEArraylod(light_probe_specular_cubes, float4(correctedRoughR_weight.rgb, cubeId), roughnessMip).rgb;

          BRANCH
          if (weight >= 1)
            return float4(color * fadeWeight, 1-fadeWeight);

          result += color * weight;
          totalWeight += weight;
          FLATTEN
          if (weight > 0.001)
            ++boxesNearbyCount;
        }
      }

      BRANCH
      if (boxesNearbyCount > 1)
      {
        //We are (most probably) between two rooms
        result = result / totalWeight;
        totalWeight = 1.f;
      }

      result *= fadeWeight;

  #endif //!MOBILE_DEVICE
      return float4(result, 1.0f-totalWeight*fadeWeight);
    }
  }
}
else
{
  hlsl(code)
  {
    float4 use_indoor_probes(float3 world_pos, float3 normal, float3 reflected_dir, float roughnessMip, float viewDist)
    {
      return float4(0, 0, 0, 1);
    }
  }
}
endmacro
