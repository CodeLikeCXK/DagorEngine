Root           ?= ../../.. ;
Location        = prog/3rdPartyLibs/libcurl ;

TargetType      = lib ;
Target          = 3rdPartyLibs/libcurl.lib ;

include $(Root)/prog/_jBuild/defaults.jam ;
Target = $(Target:S=~z$(UseZlibVer).lib) ;

AddIncludes =
  $(Root)/$(Location)/lib
  $(Root)/$(Location)/include
  $(Root)/prog/3rdPartyLibs/arc/zlib-$(UseZlibVer)
  $(Root)/prog/3rdPartyLibs/arc/zstd-$(ZstdVer)
  $(Root)/prog/3rdPartyLibs/arc/brotli/include
;

UseProgLibs +=
  3rdPartyLibs/arc/zlib-$(UseZlibVer)
  3rdPartyLibs/arc/zstd-$(ZstdVer)
  3rdPartyLibs/arc/brotli
;

if $(Platform) in ps4 ps5 {
  UseProgLibs += 3rdPartyLibs/posix ;
  AddIncludes += $(Root)/prog/3rdPartyLibs/posix/include/ps4 ;
}

if $(Platform) in windows {
  AddLibs += Ws2_32.lib crypt32.lib ;
}

if $(Platform) = macOS {
  CPPopt += -Wno-deprecated-declarations ;
}

if $(UseSystemOpenSSL) != yes {
  AddIncludes += $(Root)/prog/3rdPartyLibs/openssl-$(OpenSSLVer)/include ;
  UseProgLibs += 3rdPartyLibs/openssl-$(OpenSSLVer) ;
}

AutoscanBuildLists lib/vauth lib : *.c  : Sources ;

Sources += lib/vtls/openssl.c
           lib/vtls/keylog.c
           lib/vtls/hostcheck.c
           lib/vtls/x509asn1.c
           lib/vtls/vtls.c ;

Copt =
  -DOPENSSL_SUPPRESS_DEPRECATED
  -DCURL_STATICLIB
  -DBUILDING_LIBCURL
  -DCURL_DISABLE_LDAP
  -DHTTP_ONLY
  -DHAVE_BROTLI
  -DHAVE_ZSTD
  -DHAVE_LIBZ
  -DHAVE_ZLIB_H
;

if $(PlatformSpec) = clang {
  if $(Sanitize) = undefined {
    Copt += -fno-sanitize=undefined ;
  }
}

if $(Platform) in macOS iOS tvOS linux android ps4 ps5 { CPPopt += -DHAVE_CONFIG_H ; }

if $(UseSystemLibcurl) = yes {
  Exit Custom libcurl should not be included in build when UseSystemLibcurl setted to yes ;
}

if $(Platform) = nswitch {
  Exit Nintendo switch platform doesn't allow custom libcurl library. Look for UseSystemLibcurl option ;
}

include $(Root)/prog/_jBuild/build.jam ;
