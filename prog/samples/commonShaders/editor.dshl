include "shader_global.dshl"
include "gbuffer.dshl"

int pass_type = 0;

int editorEnableZ = 1;
interval editorEnableZ : no<1, yes;

float sky_scale = 0;   // Not used.
shader editor_helper, editor_helper_no_tex, editor_helper_no_tex_blend
{
  z_write=false;
  cull_mode=none;
  hlsl {
    struct VSOutput
    {
      VS_OUT_POSITION(pos)
      ##if shader == editor_helper
      float2 texcoord : TEXCOORD0;
      ##endif
      float4 color : COLOR0;
    };
  }

  if (shader==editor_helper || shader==editor_helper_no_tex_blend)
  {
    blend_src=sa; blend_dst=isa;
  }
  
  channel float3 pos=pos;
  channel color8 vcol=vcol;
  channel float2 tc[0]=tc[0];

  if (shader==editor_helper)
  {
    dynamic texture tex;
    (ps){ tex@smp2d = tex; }
  }

  (ps){ sky_scale@f1 = (sky_scale); }

  if (shader==editor_helper)
  {
    stencil=true;
    stencil_func=always;
    stencil_pass=replace;
    stencil_ref=255;
    stencil_zfail=keep;
    stencil_fail=keep;

    hlsl(ps) {

      float4 editor_helper_ps(VSOutput input) : SV_Target
      {
        return tex2D(tex, input.texcoord) * input.color;
      }
    }
  }
  else
  {
    stencil=false;
    hlsl(ps) { float4 editor_helper_ps(VSOutput input) : SV_Target { return input.color; } }
  }
  
  compile("target_ps", "editor_helper_ps");

  (vs)
  {
    globtm@f44 = globtm;
  }

  hlsl(vs) {

    VSOutput editor_helper_vs(
      float4 pos: POSITION,
      float4 color : COLOR0,
      float2 texcoord : TEXCOORD0)
    {
      VSOutput output;
      output.pos = mul(pos, globtm);
      output.color = color;
    ##if shader == editor_helper
      output.texcoord = texcoord;
    ##endif
      return output;
    }
  }
  compile("target_vs", "editor_helper_vs");
}
shader editor_opaque_geom_helper, editor_opaque_geom_helper_no_tex
{
  channel float3 pos=pos;
  channel color8 vcol=vcol;
  channel float2 tc[0]=tc[0];

  if (shader == editor_opaque_geom_helper)
  {
    dynamic texture tex;
    (ps){ tex@smp2d = tex; }
  }
  hlsl {
    struct VSOutput
    {
      VS_OUT_POSITION(pos)
      float3 pointToEye : TEXCOORD0;
      float3 normal : TEXCOORD1;
      ##if shader == editor_opaque_geom_helper
      float2 texcoord : TEXCOORD2;
      ##endif
      float4 color : COLOR0;
    };
  }

  WRITE_GBUFFER()
  hlsl(ps) {
    GBUFFER_OUTPUT editor_helper_ps(VSOutput input HW_USE_SCREEN_POS) : SV_Target
    {
      UnpackedGbuffer gbuffer;
      float3 albedo = input.color.rgb;
      float smoothness = input.color.a;
    ##if shader == editor_opaque_geom_helper
      float4 t = tex2D(tex, input.texcoord);
      albedo *= t.rgb;
      smoothness *= t.a;
    ##endif

      init_gbuffer(gbuffer);
      init_albedo(gbuffer, albedo);
      init_smoothness(gbuffer, smoothness);
      init_normal(gbuffer, input.normal);
      init_ao(gbuffer, 1);
      return encode_gbuffer(gbuffer, input.pointToEye, GET_SCREEN_POS(input.pos));
    }
  }
  compile("target_ps", "editor_helper_ps");


  (vs)
  {
    world_view_pos@f3 = world_view_pos;
    globtm@f44 = globtm;
  }

  hlsl(vs) {

    VSOutput editor_helper_vs(
      float4 pos: POSITION,
      float4 color : COLOR0,
      float2 texcoord : TEXCOORD0)
    {
      VSOutput output;
      output.pos = mul(pos, globtm);
      output.pointToEye = world_view_pos - pos;
      output.normal = float3(0,1,0);
      output.color = color;
    ##if shader == editor_opaque_geom_helper
      output.texcoord = texcoord;
    ##endif
      return output;
    }
  }
  compile("target_vs", "editor_helper_vs");
}

int editor_rhv_tex_pass = 0;
interval editor_rhv_tex_pass: pass1 < 1, pass2;

shader editor_rhv_tex
{
  cull_mode=none;

  blend_src=sa; blend_dst=isa;

  dynamic texture tex;

  channel float3 pos=pos;
  channel color8 vcol=vcol;
  channel float2 tc[0]=tc[0];

  (ps){ tex@smp2d = tex; }

  hlsl {
    struct VSOutput
    {
      VS_OUT_POSITION(pos)
      float2 texcoord : TEXCOORD0;
      float4 color : COLOR0;
    };
  }
  hlsl(ps) {

    float4 editor_rhv_tex_ps(VSOutput input) : SV_Target
    {
      return tex2D(tex, input.texcoord) * input.color;
    }
  }
  compile("target_ps", "editor_rhv_tex_ps");

  if ( editor_rhv_tex_pass == pass1 ) {
    (vs){c1@f4=(1,1,1,0.25); }
    z_write=false;
  } else {
    (vs){ c1@f4=(1,1,1,1); }
    z_write=true;
  }

  hlsl(vs) {

    VSOutput editor_rhv_tex_vs(
      float3 pos : POSITION,
      float4 color : COLOR0,
      float2 texcoord : TEXCOORD0)
    {
      VSOutput output;
      output.pos = float4(pos, 1);
      output.color = color * get_c1();
      output.texcoord = texcoord;
      return output;
    }
  }
  compile("target_vs", "editor_rhv_tex_vs");
}



shader isl_clear_shmap
{
  z_test=false;
  


  cull_mode=none;

  channel float2 pos=pos;

  hlsl(ps) {
    float4 isl_clear_shmap_ps() : SV_Target0
    {
      return float4(6.5e4, 6.5e4, 6.5e4, 6.5e4);
    }
  }
  compile("target_ps", "isl_clear_shmap_ps");


  hlsl(vs) {

    void isl_clear_shmap_vs(
      float2 pos : POSITION,
      out float4 out_pos : POSITION)
    {
      float4 c0 = float4(0, 0, 1, 1);
      out_pos = float4(pos, 1, 1);
    }
  }
  compile("target_vs", "isl_clear_shmap_vs");
}


